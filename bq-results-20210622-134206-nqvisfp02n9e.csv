repo_name,path,f0_
Majoolr/ethereum-libraries,TokenLib/truffle/contracts/ThrowProxy.sol,ThrowProxy(address _target);execute()
winsvega/solidity,test/libsolidity/syntaxTests/types/address/contract_payable_fallback_to_payable_address.sol,f()
DecentralizedEscrow/pre-ico,contracts/simplified_DEST.sol,"mul(uint256 a, uint256 b);div(uint256 a, uint256 b);sub(uint256 a, uint256 b);add(uint256 a, uint256 b);balanceOf(address who);transfer(address to, uint256 value);transfer(address _to, uint256 _value);balanceOf(address _owner);allowance(address owner, address spender);transferFrom(address from, address to, uint256 value);approve(address spender, uint256 value);transferFrom(address _from, address _to, uint256 _value);approve(address _spender, uint256 _value);allowance(address _owner, address _spender);price(uint _v);withdraw();finish()"
orbro/eth-enablers,decentGovernment.sol,Government();lendGovernmentMoney(address buddy);function();totalDebt();totalPayedOut();investInTheSystem();inheritToNextGeneration(address nextGeneration);getCreditorAddresses();getCreditorAmounts()
OR13/car2go,contracts/Transmute/EventStore.sol,"EventStore();getVersion();emitEvent(string _type, address _address, uint _uint, string _string);getType(uint eventId);getCreated(uint eventId);getAddressValue(uint eventId);getUIntValue(uint eventId);getStringValue(uint eventId)"
stevejaxon/ethereum-tutorials,contracts/exploitable/HoneyPot.sol,HoneyPot();put();get()
dmozzy/TimeClock,contracts/TimeClock.sol,getNextPaymentDate();contracteesSize();purchase(string description);update();contracteeWithdraw(uint index);contractorWithdraw();calculatedPaymentInterval()
pipermerriam/ethereum-alarm-clock,contracts/Scheduler/BaseScheduler.sol,""
ConsenSys/truffle,packages/decoder/test/current/contracts/WireTest.sol,"inherited(uint[2] memory);inheritedReturn();danger();overriddenReturn();notImplemented();redHerring(RedHerring memory);emitStuff(Triple memory p, address[2] memory precompiles, string[] memory strings);moreStuff(WireTest notThis, uint[] memory bunchOfInts);globalTest(GlobalStruct memory s, GlobalEnum e);danger();indexTest(uint a, uint b, string memory c, string memory d, uint e);libraryTest(string memory it);ambiguityTest();unambiguityTest();anonymousTest();returnsStuff();overriddenReturn();boom();extrasTestSome();extrasTestNone(address test);emitEvent(string calldata it);emitUnambiguousEvent();run()"
stevejaxon/ethereum-tutorials,contracts/ContractCallerProxy.sol,ContractCallerProxy(address _target);execute()
winsvega/solidity,test/libsolidity/syntaxTests/fallback/pure_modifier.sol,""
SwapyNetwork/swapy-exchange-protocol,test/TestSwapyExchange_actions.sol,shouldThrow(bool result);testUserCanCreateOfferWithoutVersion();testUserCanCreateOfferWithVersion();testUserCannotCreateOfferWithAnInvalidVersion();testUnitValueAndFundsMustMatch();testUserCanInvest();testOnlyInvestorCanCancelInvestment();testInvestorCanCancelInvestment();testOnlyOwnerCanRefuseInvestment();testOwnerCanRefuseInvestment();testOnlyOwnerCanWithdrawFunds();testOwnerCanWithdrawFunds();testOnlyInvestorCanPutOnSale();testInvestorCanPutOnSale();testOnlyInvestorCanRemoveOnSale();testInvestorCanRemoveOnSale();testUserCanBuyAsset();testOnlyBuyerCanCancelPurchase();testBuyerCanCancelPurchase();testOnlyInvestorCanRefusePurchase();testInvestorCanRefusePurchase();testOnlyInvestorCanAcceptSale();testInvestorCanAcceptSale();testOnlyOwnerCanReturnInvestment();testReturnValuesAndFundsMustMatch();testOwnerCanReturnInvestment()
winsvega/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/197_integer_boolean_and.sol,""
crypto-coder/Tokens,Token_Contracts/contracts/ExponentialDecayingTokenFunction.sol,"ExponentialDecayingTokenFunction();getFunctionType();executeDecayFunction(uint256 _amount, int256 _rangeLength, int256 _distanceInRange, uint256 _startPercent, uint256 _endPercent);oldExecuteDecayFunction(uint256 _amount, int256 _rangeLength, int256 _distanceInRange, uint256 _startPercent, uint256 _endPercent)"
ethereum/solidity,test/libsolidity/syntaxTests/constructor/constructer_internal_function_abstract.sol,""
delneg/cryptogrip-contracts,tokensale.sol,"CryptoGripInitiative(uint tokenTotalAmount, uint startTime, uint endTime, address admin);transfer(address _to, uint _value);transferFrom(address _from, address _to, uint _value);burn(uint _value);burnFrom(address _from, uint256 _value);Whitelist(address _owner, address _sale);accept(address a, uint amountInWei);setSale(address sale_);getCap(address _user);contributorCap(address contributor);eligible(address contributor, uint amountInWei);eligibleTestAndIncrement(address contributor, uint amountInWei);saleEnded();saleStarted();publicSaleStarted();setHaltSale(bool halt);buy(address recipient);sendETHToMultiSig(uint value);finalizeSale();emergencyDrain(ERC20 anyToken);debugBuy()"
ethereum/solidity,test/libsolidity/ABIJson/internal_constructor.sol,""
winsvega/solidity,test/libsolidity/syntaxTests/parsing/single_function_param_trailing_comma.sol,""
bobsummerwill/solidity,test/libsolidity/syntaxTests/parsing/single_function_param_trailing_comma.sol,""
BeBlockTech/Anemoi,Master/Contracts/presale.sol,"safeAdd(uint256 x, uint256 y);safeSubtract(uint256 x, uint256 y);safeMult(uint256 x, uint256 y);Anemoi();setWhiteList(address _whitelisted);removeWhiteList(address _whitelisted);finalize()"
BeBlockTech/Anemoi,Test/Presale/presale.sol,"safeAdd(uint256 x, uint256 y);safeSubtract(uint256 x, uint256 y);safeMult(uint256 x, uint256 y);Anemoi();setWhiteList(address _whitelisted);removeWhiteList(address _whitelisted);finalize()"
Braveno/cosigner,cosigner-ethereum-token-storage/SolidityContracts/V4/StorageEther.sol,"deposit(address to);internalTransfer();balanceOf(address owner);deleteContract(uint8[] sigV, bytes32[] sigR, bytes32[] sigS);topUp()"
EMAXio/cosigner,cosigner-ethereum-token-storage/SolidityContracts/V4/StorageEther.sol,"deposit(address to);internalTransfer();balanceOf(address owner);deleteContract(uint8[] sigV, bytes32[] sigR, bytes32[] sigS);topUp()"
EMAXio/heimdal,cosigner-ethereum-token-storage/SolidityContracts/V4/StorageEther.sol,"deposit(address to);internalTransfer();balanceOf(address owner);deleteContract(uint8[] sigV, bytes32[] sigR, bytes32[] sigS);topUp()"
mothershipcx/contracts,etherscan/MultiSigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
axic/ethereum-tokenescrow,tokenescrow.sol,"balanceOf(address _address);transfer(address _to, uint _value);setOwner(address _owner);TokenEscrow();create(address token, uint tokenAmount, uint price, address seller, address buyer, address recipient);create(address token, uint tokenAmount, uint price, address seller, address buyer);kill()"
misrab/gethools,testdata/imp2.sol,b()
ethereum/solidity,test/libsolidity/syntaxTests/functionTypes/inline_array_with_bound_function_mixed.sol,f(uint a);f()
ethereum/solidity,test/libsolidity/semanticTests/array/function_array_cross_calls.sol,f(function();test();e();f();g();h();htwo()
sonm-io/token,contracts/PresaleToken.sol,"PresaleToken(address _tokenManager, address _escrow);buyTokens(address _buyer);burnTokens(address _owner);balanceOf(address _owner);setPresalePhase(Phase _nextPhase);withdrawEther();setCrowdsaleManager(address _mgr)"
ocg1/assetx,005_FlatPricingExt.sol,"balanceOf(address who);transfer(address to, uint256 value);Ownable();transferOwnership(address newOwner);times(uint a, uint b);divides(uint a, uint b);minus(uint a, uint b);plus(uint a, uint b);halt();unhalt();isFinalizeAgent();isSane();finalizeCrowdsale();allowance(address owner, address spender);transferFrom(address from, address to, uint256 value);approve(address spender, uint256 value);CrowdsaleExt(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal, bool _isUpdatable, bool _isWhiteListed);investInternal(address receiver, uint128 customerId);preallocate(address receiver, uint fullTokens, uint weiPrice);investWithSignedAddress(address addr, uint128 customerId, uint8 v, bytes32 r, bytes32 s);investWithCustomerId(address addr, uint128 customerId);invest(address addr);buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s);buyWithCustomerId(uint128 customerId);buy();finalize();setFinalizeAgent(FinalizeAgent addr);setRequireCustomerId(bool value);setRequireSignedAddress(bool value, address _signerAddress);setEarlyParicipantWhitelist(address addr, bool status, uint minCap, uint maxCap);setEarlyParicipantsWhitelist(address[] addrs, bool[] statuses, uint[] minCaps, uint[] maxCaps);updateEarlyParicipantWhitelist(address addr, address contractAddr, uint tokensBought);updateJoinedCrowdsales(address addr);setLastCrowdsale(address addr);clearJoinedCrowdsales();updateJoinedCrowdsalesMultiple(address[] addrs);setStartsAt(uint time);setEndsAt(uint time);setPricingStrategy(PricingStrategy _pricingStrategy);setMultisig(address addr);loadRefund();refund();isMinimumGoalReached();isFinalizerSane();isPricingSane();getState();setOwnerTestValue(uint val);isCrowdsale();isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal);isBreakingInvestorCap(address receiver, uint tokenAmount);isCrowdsaleFull();assignTokens(address receiver, uint tokenAmount);isPricingStrategy();isSane(address crowdsale);isPresalePurchase(address purchaser);calculatePrice(uint value, uint weiRaised, uint tokensSold, address msgSender, uint decimals);FlatPricingExt(uint _oneTokenInWei, bool _isUpdatable);setLastCrowdsale(address addr);updateRate(uint newOneTokenInWei);calculatePrice(uint value, uint weiRaised, uint tokensSold, address msgSender, uint decimals)"
Opus-foundation/contracts,contracts/OpusDemoToken.sol,"OpusToken(address _multisig);start();halt();unhalt();buy();buyRecipient(address recipient);burn(uint256 _value);proposeFoundationTransfer(address newFoundation);cancelFoundationTransfer();acceptFoundationTransfer();setMultisig(address addr);transfer(address _to, uint256 _value, bytes _data);transfer(address _to, uint256 _value);transferFrom(address _from, address _to, uint256 _value);returnRate();perAddressCap();requestToken()"
GazeCoin/GazeCoinTokenContract,contracts/GazeCoinCrowdsale.sol,"balanceOf(address account);transfer(address to, uint value);transferFrom(address from, address to, uint value);approve(address spender, uint value);allowance(address owner, address spender);Owned();transferOwnership(address _newOwner);acceptOwnership();add(uint a, uint b);sub(uint a, uint b);mul(uint a, uint b);div(uint a, uint b);GazeCoin();balanceOf(address account);transfer(address to, uint tokens);approve(address spender, uint tokens);transferFrom(address from, address to, uint tokens);allowance(address owner, address spender );mint(address to, uint tokens);multiMint(address[] to, uint[] amount);GazeCoinCrowdsale();addToWhitelist(address[] addresses, uint[] amounts);addPrecommitment(address participant, uint tokens, uint ethers);proxyPayment(address contributor);finalise();transfer(address to, uint tokens);transferFrom(address from, address to, uint tokens)"
ethereum/solidity,test/libsolidity/syntaxTests/structs/recursion/recursive_struct_function_pointer.sol,f()
winsvega/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/200_integer_signed_exp_unsigned.sol,""
bryantwong/breadcoin,contract.sol,"initializeBread(uint breadSupply, string tokenName);sendBread(address recip, uint amount);proofOfWork(uint guess)"
crypto-coder/Tokens,Token_Contracts/contracts/TimeDecayingToken.sol,""
manojpramesh/solidity-contracts,contracts/darkdao.sol,"balanceOf(address _owner);transfer(address _to, uint256 _amount);transferFrom(address _from, address _to, uint256 _amount);approve(address _spender, uint256 _amount);balanceOf(address _owner);transfer(address _to, uint256 _amount);approve(address _spender, uint256 _amount);allowance(address _owner, address _spender);payOut(address _recipient, uint _amount);ManagedAccount(address _owner, bool _payOwnerOnly);payOut(address _recipient, uint _amount);createTokenProxy(address _tokenHolder);refund();divisor();createTokenProxy(address _tokenHolder);refund();divisor();receiveEther();newContract(address _newContract);changeAllowedRecipients(address _recipient, bool _allowed);changeProposalDeposit(uint _proposalDeposit);retrieveDAOReward(bool _toMembers);getMyReward();withdrawRewardFor(address _account);transferWithoutReward(address _to, uint256 _amount);halveMinQuorum();numberOfProposals();getNewDAOAddress(uint _proposalID);isBlocked(address _account);unblockMe();receiveEther();closeProposal(uint _proposalID);newContract(address _newContract);retrieveDAOReward(bool _toMembers);getMyReward();withdrawRewardFor(address _account);transfer(address _to, uint256 _value);transferWithoutReward(address _to, uint256 _value);transferFrom(address _from, address _to, uint256 _value);changeProposalDeposit(uint _proposalDeposit);changeAllowedRecipients(address _recipient, bool _allowed);isRecipientAllowed(address _recipient);actualBalance();minQuorum(uint _value);halveMinQuorum();createNewDAO(address _newCurator);numberOfProposals();getNewDAOAddress(uint _proposalID);isBlocked(address _account);unblockMe()"
ethereum/solidity,test/libsolidity/semanticTests/uninitializedFunctionPointer/uninitialized_internal_storage_function_legacy.sol,f()
coinstruct/coinstruct,CrowdFunding.sol,"cancel();launch();invest();refund();totalSupply();balanceOf(address _owner);transfer(address _to, uint256 _value);transferFrom(address _from, address _to, uint256 _value);approve(address _spender, uint256 _value);allowance(address _owner, address _spender)"
delneg/cryptogrip-contracts,compiled.sol,"balanceOf(address who);transfer(address to, uint256 value);mul(uint256 a, uint256 b);div(uint256 a, uint256 b);sub(uint256 a, uint256 b);add(uint256 a, uint256 b);transfer(address _to, uint256 _value);balanceOf(address _owner);allowance(address owner, address spender);transferFrom(address from, address to, uint256 value);approve(address spender, uint256 value);transferFrom(address _from, address _to, uint256 _value);approve(address _spender, uint256 _value);allowance(address _owner, address _spender);Ownable();transferOwnership(address newOwner);CryptoGripInitiative(uint tokenTotalAmount, uint startTime, uint endTime, address admin);transfer(address _to, uint _value);transferFrom(address _from, address _to, uint _value);burn(uint _value);burnFrom(address _from, uint256 _value);Whitelist(address _owner, address _sale);accept(address a, uint amountInWei);setSale(address sale_);getCap(address _user);contributorCap(address contributor);eligible(address contributor, uint amountInWei);eligibleTestAndIncrement(address contributor, uint amountInWei);saleEnded();saleStarted();publicSaleStarted();setHaltSale(bool halt);buy(address recipient);sendETHToMultiSig(uint value);finalizeSale();emergencyDrain(ERC20 anyToken);debugBuy()"
DennisBPeterson/Fairsale,fairsale.sol,"Fairsale(uint _blocks, uint _target);_deposit();deposit();withdrawRefund();fundOwner()"
winsvega/solidity,test/libsolidity/syntaxTests/parsing/fallback_function.sol,""
ethereum/solidity,test/libsolidity/semanticTests/structs/struct_memory_to_storage_function_ptr.sol,f();g()
szerintedmi/numbergame,contracts/NumberGame.sol,"NumberGame();function();getOraclizeCbAddress();latestRoundId();getRequiredBetAmount(uint roundId);getTotalPot(uint _roundId);getWinnablePot(uint _roundId);getFeeAmount(uint _roundId);getOraclizePrice(string _dataSource);getGameInfo();getRoundInfo(uint roundId);getBet(uint roundId, address playerAddress);setNextRoundLength(uint _nextRoundLength);setNextRoundFee(uint32 _nextRoundFee);startNewRound();verifyBet(uint roundId, uint value);placeBet(uint roundId, string encryptedBet);__callback(bytes32 queryId, string result);revealBet(address playerAddress, string result);checkAndCloseRound(bool forceClose);deductFee();payWinner();refundPlayers(uint _totalRefund)"
bobsummerwill/solidity,test/libsolidity/smtCheckerTests/types/function_type_external_address.sol,"f(address a, function(uint)"
ethereum/solidity,test/libsolidity/syntaxTests/conversion/function_cast_value_set.sol,f()
ethereum/solidity,test/libsolidity/semanticTests/array/function_memory_array.sol,"a(uint256 x);b(uint256 x);c(uint256 x);d(uint256 x);e(uint256 x);test(uint256 x, uint256 i)"
winsvega/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/570_function_type_undeclared_type.sol,a(function(Nested)
bobsummerwill/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/570_function_type_undeclared_type.sol,a(function(Nested)
ethereum/solidity,test/libsolidity/smtCheckerTests/typecast/function_type_to_function_type_external.sol,f(function(uint)
TruLtd/tru-reputation-token,contracts/test-helpers/MockFailUpgradeAgent.sol,"isUpgradeAgent();upgradeFrom(address _from, uint256 _value);changeSupply()"
ethereum/solidity,test/libsolidity/semanticTests/functionTypes/store_function.sol,addTwo(uint256 x);store(function(uint);eval(function(uint);t()
iam-dev/ERC23,installed_contracts/zeppelin-solidity/contracts/ownership/HasNoEther.sol,HasNoEther();reclaimEther()
ethereum/solidity,test/libsolidity/syntaxTests/abiEncoder/external_functions_taking_internal_types_struct_with_function_type.sol,f(S memory)
GazeCoin/GazeCoinTokenContract,test/GazeCoinCrowdsale.sol,"balanceOf(address account);transfer(address to, uint value);transferFrom(address from, address to, uint value);approve(address spender, uint value);allowance(address owner, address spender);Owned();transferOwnership(address _newOwner);acceptOwnership();add(uint a, uint b);sub(uint a, uint b);mul(uint a, uint b);div(uint a, uint b);GazeCoin();balanceOf(address account);transfer(address to, uint tokens);approve(address spender, uint tokens);transferFrom(address from, address to, uint tokens);allowance(address owner, address spender );mint(address to, uint tokens);multiMint(address[] to, uint[] amount);GazeCoinCrowdsale();addToWhitelist(address[] addresses, uint[] amounts);addPrecommitment(address participant, uint tokens, uint ethers);proxyPayment(address contributor);finalise();transfer(address to, uint tokens);transferFrom(address from, address to, uint tokens)"
shellygr/ECFChecker,RunningExample/SimpleDAO-and-Mallory.sol,donate(address to);withdraw(uint amount);queryCredit(address to);Mallory(SimpleDAO addr);getJackpot()
bobsummerwill/solidity,test/libsolidity/semanticTests/types/external_function_to_address.sol,f();g(function()
adklempner/solidity-license,contracts/zeppelin/MultisigWallet.sol,"MultisigWallet(address[] _owners, uint256 _required, uint256 _daylimit);destroy(address _to);execute(address _to, uint256 _value, bytes _data);confirm(bytes32 _h);setDailyLimit(uint256 _newLimit);resetSpentToday();clearPending()"
LindaHealthcareICO/linda-crowdsale,contracts/zeppelin/MultisigWallet.sol,"MultisigWallet(address[] _owners, uint256 _required, uint256 _daylimit);destroy(address _to);execute(address _to, uint256 _value, bytes _data);confirm(bytes32 _h);setDailyLimit(uint256 _newLimit);resetSpentToday();clearPending()"
adamdossa/ProfitSharingContract,installed_contracts/zeppelin/contracts/MultisigWallet.sol,"MultisigWallet(address[] _owners, uint256 _required, uint256 _daylimit);destroy(address _to);execute(address _to, uint256 _value, bytes _data);confirm(bytes32 _h);setDailyLimit(uint256 _newLimit);resetSpentToday();clearPending()"
ConsenSys/live-libs,contracts/LiveLibs.sol,"LiveLibs(LibFund lf);setLibFund(LibFund lf);register(bytes32 libName, uint versionNum, address a, string abi, uint thresholdWei);registerResource(bytes32 libName, uint versionNum, bytes32 key, string uri);transferLibOwnership(bytes32 libName, address newOwner);get(bytes32 libName, uint versionNum);getResource(bytes32 libName, uint versionNum, bytes32 key);getVersions(bytes32 libName);allNames();stringsEqual(string storage _a, string memory _b)"
raiden-network/raiden-token,contracts/test/foundation_multisig.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
vaporry/dapp-bin,registrar/GlobalRegistrar.sol,"addr(string _name);name(address _owner);owner(string _name);addr(string _name);subRegistrar(string _name);content(string _name);name(address _owner);onAuctionEnd(string _name);bid(string _name, address _bidder, uint _value);Registrar();onAuctionEnd(string _name);reserve(string _name);requiresAuction(string _name);transfer(string _name, address _newOwner);disown(string _name);setAddress(string _name, address _a, bool _primary);setSubRegistrar(string _name, address _registrar);setContent(string _name, bytes32 _content);stringsEqual(string storage _a, string memory _b);owner(string _name);addr(string _name);subRegistrar(string _name);content(string _name);name(address _addr);__throw()"
LianaHus/dapp-bin,registrar/GlobalRegistrar.sol,"addr(string _name);name(address _owner);owner(string _name);addr(string _name);subRegistrar(string _name);content(string _name);name(address _owner);onAuctionEnd(string _name);bid(string _name, address _bidder, uint _value);Registrar();onAuctionEnd(string _name);reserve(string _name);requiresAuction(string _name);transfer(string _name, address _newOwner);disown(string _name);setAddress(string _name, address _a, bool _primary);setSubRegistrar(string _name, address _registrar);setContent(string _name, bytes32 _content);stringsEqual(string storage _a, string memory _b);owner(string _name);addr(string _name);subRegistrar(string _name);content(string _name);name(address _addr);__throw()"
OR13/car2go,contracts/MeshPoint.sol,"MeshPoint(string _name, address _creator);setBlockLimit(uint limit);getBlockLimit();setSendAmount(uint256 val);getSendAmount();getBalance();getRequestorAddresses();getRemainingBlocks();addRequestorAddress(address _requestor);authorizeRequestorAddress(address _requestor);revokeRequestorAddress(address _requestor);isAddressAuthorized(address _address);sendWei(address recp);getWei()"
winsvega/solidity,test/libsolidity/syntaxTests/types/mapping/function_type_return_external.sol,f(function()
bobsummerwill/solidity,test/libsolidity/syntaxTests/types/mapping/function_type_return_external.sol,f(function()
ethereum/solidity,test/libsolidity/semanticTests/events/event_indexed_function.sol,f()
ethereum/remix,remix-analyzer/test/analysis/test-contracts/solidity-v0.5/selfdestruct.sol,""
zchn/ethereum-analyzer,examples/co2.unica.it/ethereum/SimpleDAO_0.4.2.sol,donate(address to);withdraw(uint amount);queryCredit(address to);Mallory(SimpleDAO addr);getJackpot();attack();getJackpot()
Atzen2/hacking-law-proto,truffle/node_modules/zeppelin-solidity/contracts/MultisigWallet.sol,"MultisigWallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);setDailyLimit(uint _newLimit);resetSpentToday();clearPending()"
Atzen2/hacking-law-proto,truffle/contracts/zeppelin/MultisigWallet.sol,"MultisigWallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);setDailyLimit(uint _newLimit);resetSpentToday();clearPending()"
winsvega/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/075_fallback_function_with_arguments.sol,""
BSDStudios/parity,js/src/contracts/snippets/enhanced-wallet.sol,"isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirm(bytes32 _h);setDailyLimit(uint _newLimit);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);revoke(bytes32 _operation);changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);initMultiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();initDaylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();initWallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearWalletPending();Wallet(address[] _owners, uint _required, uint _daylimit);getOwner(uint ownerIndex);hasConfirmed(bytes32 _operation, address _owner);isOwner(address _addr)"
immartian/musicoin,js/src/contracts/snippets/enhanced-wallet.sol,"isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirm(bytes32 _h);setDailyLimit(uint _newLimit);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);revoke(bytes32 _operation);changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);initMultiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();initDaylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();initWallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearWalletPending();Wallet(address[] _owners, uint _required, uint _daylimit);getOwner(uint ownerIndex);hasConfirmed(bytes32 _operation, address _owner);isOwner(address _addr)"
jesuscript/parity,js/src/contracts/snippets/enhanced-wallet.sol,"isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirm(bytes32 _h);setDailyLimit(uint _newLimit);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);revoke(bytes32 _operation);changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);initMultiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();initDaylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();initWallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearWalletPending();Wallet(address[] _owners, uint _required, uint _daylimit);getOwner(uint ownerIndex);hasConfirmed(bytes32 _operation, address _owner);isOwner(address _addr)"
ethereum/remix,remix-analyzer/test/analysis/test-contracts/solidity-v0.4.24/selfdestruct.sol,""
erooijak/ethlance,resources/public/contracts/src/userLibrary.sol,"getUserCount(address db);userExists(address db, address userId);getAllUsers(address db);setStatus(address db, address userId, uint8 status);setFreelancerSkills(address db, address userId, uint[] skills);getFreelancerSkills(address db, address userId);setFreelancerCategories(address db, address userId, uint[] categories);getFreelancerCategories(address db, address userId);setUserNotifications(address db, address userId, bool[] boolNotifSettings, uint8[] uint8NotifSettings);addReceivedMessage(address db, address userId, uint messageId);addSentMessage(address db, address userId, uint messageId);isActiveEmployer(address db, address userId);isActiveFreelancer(address db, address userId);hasStatus(address db, address userId, uint8 status);getStatus(address db, address userId);setUserLanguages(address db, address userId, uint[] languages);addEmployerJob(address db, address userId, uint jobId);getEmployerJobs(address db, address userId);getFreelancerContractsCount(address db, address userId);addFreelancerContract(address db, address userId, uint contractId);getFreelancerContracts(address db, address userId);addEmployerContract(address db, address userId, uint contractId);getEmployerContracts(address db, address userId);addFreelancerTotalInvoiced(address db, address userId, uint amount);subFreelancerTotalInvoiced(address db, address userId, uint amount);addEmployerTotalInvoiced(address db, address userId, uint amount);subEmployerTotalInvoiced(address db, address userId, uint amount);addSponsorship(address db, address userId, uint sponsorshipId);addTotalSponsored(address db, address userId, uint amount);subTotalSponsored(address db, address userId, uint amount);getSponsorships(address db, address userId);getSponsorships(address db, address userId, bool isRefunded);userSponsorshipsPred(address db, uint[] args, uint sponsorshipId);addToAvgRating(address db, address userId, string countKey, string key, uint8 rating);addToFreelancerAvgRating(address db, address userId, uint8 rating);getFreelancerAvgRating(address db, address userId);addToEmployerAvgRating(address db, address userId, uint8 rating);getEmployerAvgRating(address db, address userId);addToFreelancerTotalEarned(address db, address userId, uint amount);addToEmployerTotalPaid(address db, address userId, uint amount);isFromCountry(address db, address userId, uint countryId);isFromState(address db, address userId, uint stateId);hasMinRating(address db, address userId, uint8 minAvgRating);hasFreelancerMinRatingsCount(address db, address userId, uint minRatingsCount);getFreelancerHourlyRate(address db, address userId);getFreelancerHourlyRateCurrency(address db, address userId);hasHourlyRateWithinRange(address db, address userId, uint[] minHourlyRates, uint[] maxHourlyRates);hasLanguage(address db, address userId, uint languageId);hasJobRecommendations(address db, address userId, uint jobRecommendations);isFreelancerAvailable(address db, address userId);userContractsPred(address db, uint[] contractStatuses, uint[] jobStatuses, uint contractId);getFreelancerContractsByStatus(address db, address userId, uint[] contractStatuses, uint[] jobStatuses);getEmployerContractsByStatus(address db, address userId, uint[] contractStatuses, uint[] jobStatuses);getFreelancerInvoicesByStatus(address db, address userId, uint8 invoiceStatus);getEmployerInvoicesByStatus(address db, address userId, uint8 invoiceStatus)"
cashpokerpro-dev/cash-smartcontracts,contracts/CashPokerProPreICO.sol,"balanceOf(address who);transferFrom(address _from, address _to, uint256 _value);mul(uint256 a, uint256 b);div(uint256 a, uint256 b);sub(uint256 a, uint256 b);add(uint256 a, uint256 b);Ownable();transferOwnership(address newOwner);pause();unpause();CashPokerProPreICO();setToken(address newToken);setTokenWallet(address newTokenWallet);buyTokens(address beneficiary);withdrawal(address to);transfer(address to, uint amount)"
pipermerriam/ethereum-gas-proxy,contracts/GasProxy.sol,"GasProxy(address _owner, address _target);__kill()"
ConsenSys/ether-pudding,test/Example.sol,Example(uint val);setValue(uint val);getValue();parrot(uint val);triggerEvent()
winsvega/solidity,test/libsolidity/syntaxTests/functionTypes/internal_function_returned_from_public_function.sol,f()
bobsummerwill/solidity,test/libsolidity/syntaxTests/functionTypes/internal_function_returned_from_public_function.sol,f()
benjaminion/solidity,test/libsolidity/syntaxTests/functionTypes/warn_function_type_return_parameters_with_names.sol,""
Project-WikiGit/WikiGit,dev/contracts/tasks_handler.sol,"invalidateTaskListingAtIndex(uint _index);acceptSolution(uint _taskId, uint _solId);penalizeSolutionSubmitter(uint _taskId, uint _solId);setPenalizedStatus(uint _taskId, address _memberAddr, bool _status);tHasSubmitted(uint _taskId, address _addr);tHasBeenPenalized(uint _taskId, address _addr);tMemberSolId(uint _taskId, address _addr)"
winsvega/solidity,test/libsolidity/syntaxTests/types/address/contract_payable_fallback_to_payable_address_implicitly.sol,f()
winsvega/solidity,test/libsolidity/semanticTests/expressions/uncalled_address_transfer_send.sol,f()
Fermion-Project/Light-Wallet,source_gnosis/contracts/MultiSigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
jamiehale/dao_partnership,contracts/Incomplete.sol,"run(uint value, bytes data)"
celeduc/dao_partnership,contracts/Incomplete.sol,"run(uint value, bytes data)"
ocg1/assetx,009_ReservedTokensFinalizeAgent.sol,"balanceOf(address who);transfer(address to, uint256 value);safeMul(uint a, uint b);safeDiv(uint a, uint b);safeSub(uint a, uint b);safeAdd(uint a, uint b);Ownable();transferOwnership(address newOwner);times(uint a, uint b);divides(uint a, uint b);minus(uint a, uint b);plus(uint a, uint b);halt();unhalt();isPricingStrategy();isSane(address crowdsale);isPresalePurchase(address purchaser);calculatePrice(uint value, uint weiRaised, uint tokensSold, address msgSender, uint decimals);isFinalizeAgent();isSane();finalizeCrowdsale();allowance(address owner, address spender);transferFrom(address from, address to, uint256 value);approve(address spender, uint256 value);CrowdsaleExt(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal, bool _isUpdatable, bool _isWhiteListed);investInternal(address receiver, uint128 customerId);preallocate(address receiver, uint fullTokens, uint weiPrice);investWithSignedAddress(address addr, uint128 customerId, uint8 v, bytes32 r, bytes32 s);investWithCustomerId(address addr, uint128 customerId);invest(address addr);buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s);buyWithCustomerId(uint128 customerId);buy();finalize();setFinalizeAgent(FinalizeAgent addr);setRequireCustomerId(bool value);setRequireSignedAddress(bool value, address _signerAddress);setEarlyParicipantWhitelist(address addr, bool status, uint minCap, uint maxCap);setEarlyParicipantsWhitelist(address[] addrs, bool[] statuses, uint[] minCaps, uint[] maxCaps);updateEarlyParicipantWhitelist(address addr, address contractAddr, uint tokensBought);updateJoinedCrowdsales(address addr);setLastCrowdsale(address addr);clearJoinedCrowdsales();updateJoinedCrowdsalesMultiple(address[] addrs);setStartsAt(uint time);setEndsAt(uint time);setPricingStrategy(PricingStrategy _pricingStrategy);setMultisig(address addr);loadRefund();refund();isMinimumGoalReached();isFinalizerSane();isPricingSane();getState();setOwnerTestValue(uint val);isCrowdsale();isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal);isBreakingInvestorCap(address receiver, uint tokenAmount);isCrowdsaleFull();assignTokens(address receiver, uint tokenAmount);isToken();transfer(address _to, uint _value);transferFrom(address _from, address _to, uint _value);balanceOf(address _owner);approve(address _spender, uint _value);allowance(address _owner, address _spender);isUpgradeAgent();upgradeFrom(address _from, uint256 _value);UpgradeableToken(address _upgradeMaster);upgrade(uint256 value);setUpgradeAgent(address agent);getUpgradeState();setUpgradeMaster(address master);canUpgrade();setReleaseAgent(address addr);setTransferAgent(address addr, bool state);releaseTokenTransfer();transfer(address _to, uint _value);transferFrom(address _from, address _to, uint _value);setReservedTokensList(address addr, uint inTokens, uint inPercentageUnit, uint inPercentageDecimals);getReservedTokensListValInTokens(address addr);getReservedTokensListValInPercentageUnit(address addr);getReservedTokensListValInPercentageDecimals(address addr);setReservedTokensListMultiple(address[] addrs, uint[] inTokens, uint[] inPercentageUnit, uint[] inPercentageDecimals);mint(address receiver, uint amount);setMintAgent(address addr, bool state);CrowdsaleTokenExt(string _name, string _symbol, uint _initialSupply, uint _decimals, bool _mintable, uint _globalMinCap);releaseTokenTransfer();canUpgrade();setTokenInformation(string _name, string _symbol);ReservedTokensFinalizeAgent(CrowdsaleTokenExt _token, CrowdsaleExt _crowdsale);isSane();finalizeCrowdsale()"
winsvega/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/202_bytes_reference_compare_operators.sol,""
dltdojo/courses,ethereum/dapps/dao/T100_Ballot.sol,"vote(Ballot ballot, uint8 proposal);Ballot(uint8 _numProposals);giveRightToVote(address voter);delegate(address to);vote(uint8 proposal);winningProposal()"
ethereum/solidity,test/libsolidity/syntaxTests/types/mapping/function_type_return_internal.sol,f(function()
wpypeiyao/Identity-On-Blockchain,node_modules/embark/test_app/app/contracts/simple_storage.sol,SimpleStorage(uint initialValue);set(uint x);get();getS()
ethereum/solidity,test/libsolidity/semanticTests/libraries/external_call_with_function_pointer_parameter.sol,double(uint256 _a);g(uint256 _value)
ethereum/solidity,test/libsolidity/syntaxTests/types/function_types/selector/state_variable_selector_super.sol,""
winsvega/solidity,test/libsolidity/syntaxTests/memberLookup/member_not_unique.sol,a(uint256);a(uint8);f();g()
bobsummerwill/solidity,test/libsolidity/syntaxTests/memberLookup/member_not_unique.sol,a(uint256);a(uint8);f();g()
SafecontractDev/protocol,contracts/bancor_contracts/BancorPriceFloor.sol,BancorPriceFloor(ISmartToken _token);sell();withdraw(uint256 _amount)
stanta/darfchain,ICO/contracts/PresaleFundCollector.sol,"PresaleFundCollector(address _owner, uint _freezeEndsAt, uint _weiMinimumLimit);invest();parcipateCrowdsaleInvestor(address investor);parcipateCrowdsaleAll();refund();setCrowdsale(Crowdsale _crowdsale)"
EarthDollar/farmer,mix/stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
bitcoinmeetups/dapp-bin,config/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
chriseth/dapp-bin,config/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
ethereum/dapp-bin,config/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
vaporry/dapp-bin,config/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
shahankhatch/dapp-bin,config/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
LianaHus/dapp-bin,config/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
frozeman/ethereum-smart-contracts,config/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
RepublicMaster/dapp-bin,config/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
winsvega/solidity,test/libsolidity/syntaxTests/parsing/single_event_arg_trailing_comma.sol,""
bobsummerwill/solidity,test/libsolidity/syntaxTests/parsing/single_event_arg_trailing_comma.sol,""
ethereum/solidity,test/libsolidity/syntaxTests/bound/bound_all.sol,g(function();f();t()
CubicContracts/ice,Cube.sol,"Cube(address _destination, uint _unlockedAfter, Cubic _cubicContract);setId(uint _id);deliver()"
easyMINE/SmartContracts,contracts/ICO/EasyMineIco.sol,"EasyMineIco(address _wallet);setup(address _easyMineToken, address _sys, address _reservationAddress, uint256 _minStartDelay, uint256 _maxDuration);maxTokensSold();totalTokensSold();scheduleStart(uint256 _startBlock);updateStage();buyTokens();reserveTokens(uint256 tokenCount);cleanup();finalize()"
winsvega/solidity,test/libsolidity/syntaxTests/bound/bound_all.sol,g(function();f();t()
bobsummerwill/solidity,test/libsolidity/syntaxTests/bound/bound_all.sol,g(function();f();t()
crypto-coder/Tokens,Token_Contracts/contracts/TimeDecayingTokenBoundaryRange.sol,calculateRangeLength();calculateCurrentDistanceInRange(address _environment)
anzheng67/rosca-contracts,contracts/TestReEntryAttack.sol,setRoscaAddress(address ROSCAContract_);withdrawTwice();contribute();bid(uint256 bid);startRound()
ethereum/solidity,test/libsolidity/semanticTests/functionTypes/struct_with_functions.sol,X();Y();f()
ethereum/solidity,test/libsolidity/syntaxTests/functionTypes/function_type_internal_public_variable.sol,""
ethereum/solidity,test/libsolidity/syntaxTests/errors/weird1.sol,""
shahankhatch/dapp-bin,wallet/wallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
RepublicMaster/dapp-bin,wallet/wallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
ethereum/solidity,test/libsolidity/syntaxTests/types/function_types/selector/state_variable_selector_not_pure.sol,""
winsvega/solidity,test/libsolidity/syntaxTests/parsing/multiple_return_param_trailing_comma.sol,""
bobsummerwill/solidity,test/libsolidity/syntaxTests/parsing/multiple_return_param_trailing_comma.sol,""
winsvega/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/198_integer_boolean_not.sol,""
darcius/rocketpool-crowdsale,contracts/sales/RocketPoolCrowdsale.sol,RocketPoolCrowdsale(address _tokenContractAddress);claimTokensAndRefund();ownerClaimTokensAndRefundForUser(address _contributerAddress);sendTokensAndRefund(address _contributerAddress);setSaleDepositsAllowed(bool _set);kill()
tokenai/tokenai-network-token,contracts/MultisigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
Great-Hill-Corporation/daodeepdive,assets/contracts/05-MultiSig.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
ethereum/solidity,test/libsolidity/syntaxTests/parsing/function_type_multiple_visibility.sol,f()
iExecBlockchainComputing/rlc-token,contracts/Crowdsale.sol,"Crowdsale();Crowdsale();start();receiveETH(address beneficiary);receiveBTC(address beneficiary, string btc_address, uint value, string txid);emitRLC(uint amount);bonus(uint amount);receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);setRLCPerETH(uint rate);finalize();drain()"
manojpramesh/solidity-contracts,contracts/BancorConverter.sol,"Utils();safeAdd(uint256 _x, uint256 _y);safeSub(uint256 _x, uint256 _y);safeMul(uint256 _x, uint256 _y);name();symbol();decimals();totalSupply();balanceOf(address _owner);allowance(address _owner, address _spender);transfer(address _to, uint256 _value);transferFrom(address _from, address _to, uint256 _value);approve(address _spender, uint256 _value);owner();transferOwnership(address _newOwner);acceptOwnership();withdrawTokens(IERC20Token _token, address _to, uint256 _amount);convertibleTokenCount();convertibleToken(uint16 _tokenIndex);getReturn(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount);convert(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn);change(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn);disableTransfers(bool _disable);issue(address _to, uint256 _amount);destroy(address _from, uint256 _amount);formula();gasPriceLimit();quickConverter();calculatePurchaseReturn(uint256 _supply, uint256 _reserveBalance, uint32 _reserveRatio, uint256 _depositAmount);calculateSaleReturn(uint256 _supply, uint256 _reserveBalance, uint32 _reserveRatio, uint256 _sellAmount);gasPrice();convert(IERC20Token[] _path, uint256 _amount, uint256 _minReturn);convertFor(IERC20Token[] _path, uint256 _amount, uint256 _minReturn, address _for);deposit();withdraw(uint256 _amount);withdrawTo(address _to, uint256 _amount);Owned();transferOwnership(address _newOwner);acceptOwnership();Managed();transferManagement(address _newManager);acceptManagement();TokenHolder();withdrawTokens(IERC20Token _token, address _to, uint256 _amount);SmartTokenController(ISmartToken _token);transferTokenOwnership(address _newOwner);acceptTokenOwnership();disableTokenTransfers(bool _disable);withdrawFromToken(IERC20Token _token, address _to, uint256 _amount);BancorConverter(ISmartToken _token, IBancorConverterExtensions _extensions, uint32 _maxConversionFee, IERC20Token _reserveToken, uint32 _reserveRatio);reserveTokenCount();convertibleTokenCount();convertibleToken(uint16 _tokenIndex);setExtensions(IBancorConverterExtensions _extensions);setQuickBuyPath(IERC20Token[] _path);clearQuickBuyPath();getQuickBuyPathLength();disableConversions(bool _disable);setConversionFee(uint32 _conversionFee);getConversionFeeAmount(uint256 _amount);addReserve(IERC20Token _token, uint32 _ratio, bool _enableVirtualBalance);updateReserve(IERC20Token _reserveToken, uint32 _ratio, bool _enableVirtualBalance, uint256 _virtualBalance);disableReservePurchases(IERC20Token _reserveToken, bool _disable);getReserveBalance(IERC20Token _reserveToken);getReturn(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount);getPurchaseReturn(IERC20Token _reserveToken, uint256 _depositAmount);getSaleReturn(IERC20Token _reserveToken, uint256 _sellAmount);convert(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn);buy(IERC20Token _reserveToken, uint256 _depositAmount, uint256 _minReturn);sell(IERC20Token _reserveToken, uint256 _sellAmount, uint256 _minReturn);quickConvert(IERC20Token[] _path, uint256 _amount, uint256 _minReturn);change(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn);quickChange(IERC20Token[] _path, uint256 _amount, uint256 _minReturn);quickBuy(uint256 _minReturn);hasQuickBuyEtherToken();getQuickBuyEtherToken();getSaleReturn(IERC20Token _reserveToken, uint256 _sellAmount, uint256 _totalSupply)"
ethereum/solidity,test/cmdlineTests/optimizer_BlockDeDuplicator/input.sol,fun_x();fun_();f()
winsvega/solidity,test/libsolidity/syntaxTests/functionTypes/internal_function_as_external_parameter.sol,f(function(uint)
bobsummerwill/solidity,test/libsolidity/syntaxTests/functionTypes/internal_function_as_external_parameter.sol,f(function(uint)
jeje/solidity-code-quality,core/src/test/antlr/test.sol,"f(uint a, uint b);g(uint c);f();fun(uint256 a);f();f();f();f();f();fun();fun();fun();fun();fun();f(ufixed x, fixed32x32 y);fun(uint256 a);functionName(bytes20 arg1, address addr);fun(uint256 a);x();fun(uint256 a);fun(uint256 a);fun(uint256 a);fun(uint256 a);functionName(bytes32 input);fun(uint256 a);fun();f();f();test();f();f(uint[] constant x, uint[] memory y);f();f();g();fun();fun();fun();fun();foo(uint a);bar(string a, string b);fun();f();functionName();fun(int256 a);fun(uint a);fun(uint a, uint b);fun();functionName(bytes32 input);fun();f();fun();f();f();fun(uint256 a);fun(uint256 a);f();f_priv();f_public();f_internal();fun(uint256 a);f(x)"
iam-dev/ERC23,installed_contracts/zeppelin-solidity/contracts/Bounty.sol,createTarget();deployContract();claim(Target target);checkInvariant()
AlexeyAkhunov/tokengame,contracts/TokenGame.sol,"transfer(address _to, uint256 _value);approve(address _spender, uint256 _value);transferFrom(address _from, address _to, uint256 _value);Token();mint(address _to, uint256 _value);ExcessWithdraw(uint _release_time, Token _token);withdraw();TokenDistribution(uint256 _target_in_wei, uint256 _cap_in_wei, uint256 _tokens_to_mint);exponential_decay(uint256 value, uint256 time);contribute(uint256 lock_weeks);escape(uint256 bucket);close_next_bucket();move_excess_for_bucket(uint256 bucket, uint256 excess);claim_tokens(address player, uint256 bucket);PrizePot(TokenDistribution _dist);claim_prize();cancel();TokenGame()"
misrab/gethools,testdata/sample.sol,"Sample();function();x(uint a, address b)"
ethereum/solidity,test/libsolidity/syntaxTests/functionTypes/function_type_named_call.sol,f()
darcius/rocketpool-crowdsale,contracts/sales/RocketPoolPresale.sol,"RocketPoolPresale(address _tokenContractAddress);addPresaleAllocation(address _address, uint256 _amount);getPresaleAllocation(address _address);mintSendTokens();finaliseFunding()"
ethereum/solidity,test/libsolidity/semanticTests/functionCall/call_function_returning_nothing_via_pointer.sol,f()
NathanLewis/surefair,contracts/Insurance.sol,"getQuote(address client, uint64 quoteId);verifyClaim(uint64 quoteId);CropOracle(address creator);getOracleDetails();getUserQuoteIds(address _client);getQuote(address _client, uint64 _quoteId);createQuote(uint256 gpsLat, uint256 gpsLong, bytes32 _ipfsHash );verifyClaim(uint64 _quoteId);MacBookOracle();getOracleDetails();getUserQuoteIds(address _client);getQuote(address _client, uint64 _quoteId);createQuote(uint256 _macbookYear, bytes32 _serial_number, bytes32 _ipfsHash);verifyClaim(uint64 _quoteId);Syndicate(uint256 maxFund);isContract(address addr);getInsuranceContracts();addOracle(address oracleAddress);getOracles();getInsuranceIDsByClient(address _client);getInsuranceDataByID(uint64 insuranceID);insureClient(address _oracle, uint64 _oracleQuoteId);clientClaim(address _client, uint64 _contractId);redeemFromEscrow(uint64 _contractId);dividendsOwing(address account);paymentsOwed(address account);updateAccount(address account);disburse(uint256 amount);drawDown(uint256 amount);getEscrowBalance();name();symbol();decimals();balanceOf(address _owner);transfer(address _to, uint256 _value);transferFrom(address _from, address _to, uint256 _value);approve(address _spender, uint256 _value);allowance(address _owner, address _spender);getStats();SFEscrow();getBalance();deposit(uint256 amount);redeem(uint256 amount);payout(address payee, uint256 amount)"
intellij-solidity/intellij-solidity,src/test/resources/fixtures/parser/solidity_official_tests/shouldSucceed/mappingAndArrayOfFunctions.sol,""
AnnaIsAWang/LedgerLabsCoops2016,Identity/Identity.sol,"Identity();register(string username);changeOwner(string username, address addr);getCurrentOwner(string username);kill()"
ethereum/solidity,test/libsolidity/syntaxTests/functionTypes/warn_function_type_parameters_with_names.sol,""
winsvega/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/040_functions_with_different_structs_in_interface.sol,f(S1 memory);f(S2 memory)
b-mueller/mythril,solidity_examples/WalletLibrary.sol,"revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);setDailyLimit(uint _newLimit);execute(address _to, uint _value, bytes calldata _data);confirm(bytes32 _h);initMultiowned(address[] memory _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);getOwner(uint ownerIndex);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);initDaylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();initWallet(address[] memory _owners, uint _required, uint _daylimit);kill(address payable _to);execute(address _to, uint _value, bytes calldata _data);create(uint _value, bytes memory _code);confirm(bytes32 _h);confirmAndCheck(bytes32 _operation);reorganizeOwners();underLimit(uint _value);today();clearPending()"
intellij-solidity/intellij-solidity,src/test/resources/fixtures/parser/solidity_official_tests/shouldSucceed/functionTypeStateVariable.sol,""
ethereum/solidity,test/libsolidity/semanticTests/types/external_function_to_address.sol,f();g(function()
winsvega/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/074_fallback_function.sol,""
pipermerriam/ethereum-gas-proxy,contracts/Testers.sol,doit();undo();set(uint v);infinite();fails();variable(uint loops)
winsvega/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/424_using_interface_complex.sol,f();g();f()
qjflores/singularity,contracts/User.sol,User(string _name);registerToProvider(address _providerAddress);setDebt(uint256 _debt);clearDebt();unsubcribe(address _providerAddress)
winsvega/solidity,test/libsolidity/syntaxTests/viewPureChecker/builtin_functions.sol,f();g()
ethereum/solidity,test/libsolidity/syntaxTests/constructor/constructor_internal_function.sol,""
winsvega/solidity,test/libsolidity/syntaxTests/types/address/nonpayable_address_to_contract_payable_fallback.sol,f()
intellij-solidity/intellij-solidity,src/test/resources/fixtures/parser/solidity_official_tests/shouldSucceed/functionTypeAsParameter.sol,f(function(uint)
besttests/ethereum,spec/contracts/exchange.sol,"nominate(address _keyholder, address _executive);open();nominate(address _keyholder, address _executive);open();close();deposit(hash _id);refill();withdraw(address _to, uint _value);drain(address _to, uint _value)"
SafecontractDev/protocol,contracts/bancor_contracts/EtherToken.sol,"EtherToken();deposit();withdraw(uint256 _amount);transfer(address _to, uint256 _value);transferFrom(address _from, address _to, uint256 _value)"
youvegoteth/youvegoteth.github.io,contracts/contracts/TransferIndex.sol,"TransferIndex();function();newTransfer(bool _disableDeveloperTip, address _owner, address _contract, uint _amount, uint _fee_amount, uint expires);claimTransfer(address _idx, address _to);expireTransfer(address _idx);getTransferDetails(address _idx);distributeFunds(address _idx, uint256 _pct_to_dev_team, address _main_to_address, address _contract )"
ethereum/solidity,test/libsolidity/syntaxTests/functionTypes/private_function_type.sol,f()
winsvega/solidity,test/libsolidity/syntaxTests/inlineAssembly/storage_reference_on_memory.sol,""
jeje/solidity-code-quality,core/src/test/antlr/FallbackContract.sol,""
zchn/ethereum-analyzer,examples/co2.unica.it/ethereum/SendTest.sol,"pay(uint n, address d);a();b();c();d();e();f();g();h();i();k();j();l();m();n();o();p();q();r();s();t();u();v();w();x();y();z()"
winsvega/solidity,test/libsolidity/ABIJson/include_fallback_function.sol,""
Bunjin/DXF,multisigDailyLimit.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data, uint nonce);confirmTransaction(bytes32 transactionHash);revokeConfirmation(bytes32 transactionHash);executeTransaction(bytes32 transactionHash);isConfirmed(bytes32 transactionHash);getNonce(address destination, uint value, bytes data);getConfirmationCount(bytes32 transactionHash);getTransactionCount(bool pending, bool executed);addTransaction(address destination, uint value, bytes data, uint nonce);addConfirmation(bytes32 transactionHash, address owner);getOwners();getConfirmations(bytes32 transactionHash);getTransactionHashes(uint from, uint to, bool pending, bool executed);MultiSigWalletWithDailyLimit(address[] _owners, uint _required, uint _dailyLimit);changeDailyLimit(uint _dailyLimit);executeTransaction(bytes32 transactionHash);underLimit(uint amount)"
NoahZinsmeister/ProveIt,contracts/Hash.sol,Hash();hashString(string dataString);hashBytes(bytes dataBytes);selfDestruct()
winsvega/solidity,test/libsolidity/syntaxTests/parsing/function_type_state_variable.sol,""
bobsummerwill/solidity,test/libsolidity/syntaxTests/parsing/function_type_state_variable.sol,""
ethereum/solidity,test/libsolidity/semanticTests/libraries/internal_library_function_bound_to_function_named_selector.sol,selector(function(uint);identity(uint x);test(uint value)
Matchpool/contracts,contracts/GUPToken.sol,"GUPToken(address _minter, uint _endMintingTime);createToken(address _recipient, uint _value);createIlliquidToken(address _recipient, uint _value);makeLiquid();transfer(address _recipient, uint _amount);transferFrom(address _from, address _recipient, uint _amount)"
dltdojo/courses,ethereum/truffle/multisig/contracts/MultiSigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getOwnersLength();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
eduelias/solidity-contracts,MultiSig.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);getOwner(uint ownerIndex);isOwner(address _addr);hasSigned(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
ethereum/solidity,test/libsolidity/semanticTests/constructor/store_function_in_constructor_packed.sol,doubleInv(uint16 _arg);use(uint16 _arg)
bobsummerwill/solidity,test/libsolidity/ABIJson/function_type.sol,g(function(uint)
ethereum/solidity,test/libsolidity/ABIJson/function_type.sol,g(function(uint)
bobsummerwill/solidity,test/libsolidity/semanticTests/uninitializedFunctionPointer/store2.sol,run();z()
ethereum/solidity,test/libsolidity/semanticTests/functionCall/calling_uninitialized_function_through_array.sol,t()
winsvega/solidity,test/libsolidity/syntaxTests/viewPureChecker/builtin_functions_view_fail.sol,f();g();h();i();j()
djh82uk/Winik.io,Crowdsale Contract/WinikToken.sol,"WinikToken();createTokens();totalSupply();balanceOf(address _owner);transfer(address _to, uint256 _value);transferFrom(address _from, address _to, uint256 _value);approve(address _spender, uint256 _value);allowance(address _owner, address _spender)"
zchn/ethereum-analyzer,examples/co2.unica.it/ethereum/KotET_0.4.2.sol,"KotET();sweepCommission(uint amount);calculateCompensation();calculateNewPrice();sweepCommission(uint amount);calculateCompensation();calculateNewPrice();unseatKing(address king, uint w);unseatKing(address king, uint w)"
esdrasedu/carlin,contracts/Meetups.sol,join();leave();done();cancel();withdraw();kill()
trailofbits/manticore,tests/ethereum/contracts/714.sol,""
montyly/manticore,tests/ethereum/contracts/714.sol,""
bobsummerwill/solidity,test/libsolidity/semanticTests/tryCatch/return_function.sol,g();f();fun()
Bunjin/DXF,multisig.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data, uint nonce);confirmTransaction(bytes32 transactionHash);revokeConfirmation(bytes32 transactionHash);executeTransaction(bytes32 transactionHash);isConfirmed(bytes32 transactionHash);getNonce(address destination, uint value, bytes data);getConfirmationCount(bytes32 transactionHash);getTransactionCount(bool pending, bool executed);addTransaction(address destination, uint value, bytes data, uint nonce);addConfirmation(bytes32 transactionHash, address owner);getOwners();getConfirmations(bytes32 transactionHash);getTransactionHashes(uint from, uint to, bool pending, bool executed)"
daostack/daostack,contracts/test/Wallet.sol,pay(address payable _beneficiary)
crypto-coder/Tokens,Token_Contracts/contracts/GPSDecayingTokenEnvironment.sol,"GPSDecayingTokenEnvironment(uint256 _currentLatitude, uint256 _currentLongitude)"
destenson/ethcore--parity,js-old/src/contracts/snippets/enhanced-wallet.sol,"revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);setDailyLimit(uint _newLimit);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);initMultiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);getOwner(uint ownerIndex);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);initDaylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();initWallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);create(uint _value, bytes _code);confirm(bytes32 _h);confirmAndCheck(bytes32 _operation);reorganizeOwners();underLimit(uint _value);today();clearPending();Wallet(address[] _owners, uint _required, uint _daylimit);getOwner(uint ownerIndex);hasConfirmed(bytes32 _operation, address _owner);isOwner(address _addr)"
winsvega/solidity,test/libsolidity/smtCheckerTests/typecast/function_type_to_address.sol,"f(address a, function(uint)"
ethereum/solidity,test/libsolidity/syntaxTests/inlineAssembly/two_stack_slot_access.sol,f()
ethereum/solidity,test/libsolidity/syntaxTests/inlineAssembly/two_stack_slots.sol,f()
mitchellfchan/IKB,IKB.sol,"totalSupply();balanceOf(address _owner);transfer(address _to, uint256 _value);transferFrom(address _from, address _to, uint256 _value);approve(address _spender, uint256 _value);allowance(address _owner, address _spender);owned();transferOwnership(address newOwner);safeAdd(uint256 x, uint256 y);safeSubtract(uint256 x, uint256 y);safeMult(uint256 x, uint256 y);Klein();balanceOf(address _owner);approve(address _spender, uint256 _value);specificApprove(address _spender, uint256 _edition);allowance(address _owner, address _spender);totalSupply();issueNewSeries();buy();returnChange(uint256 _receivable);transfer(address _to, uint _value);transferFrom(address _from, address _to, uint256 _value);specificTransfer(address _to, uint _edition);specificTransferFrom(address _from, address _to, uint _edition);getTokenHolder(uint searchedRecord);getHolderEditions(address _holder);redeemEther();fund();ritual(uint256 _edition)"
winsvega/solidity,test/libsolidity/syntaxTests/functionTypes/delete_function_type.sol,f()
bobsummerwill/solidity,test/libsolidity/syntaxTests/functionTypes/delete_function_type.sol,f()
ethereum/solidity,test/libsolidity/syntaxTests/functionTypes/delete_function_type.sol,f()
winsvega/solidity,test/libsolidity/syntaxTests/inlineAssembly/storage_reference_assignment.sol,""
mixbytes/storiqa_ico,test/helpers/ThrowProxy.sol,ThrowProxy(address _target)
Storiqa/ico_smart_contract,test/helpers/ThrowProxy.sol,ThrowProxy(address _target)
bobsummerwill/solidity,test/libsolidity/syntaxTests/fallback/old_syntax.sol,""
mixbytes/storiqa_ico,contracts/ownership/SimpleMultiSigWallet.sol,"SimpleMultiSigWallet(address[] _owners, uint _signaturesRequired);sendEther(address to, uint value)"
Storiqa/ico_smart_contract,contracts/ownership/SimpleMultiSigWallet.sol,"SimpleMultiSigWallet(address[] _owners, uint _signaturesRequired);sendEther(address to, uint value)"
frozeman/ethereum-smart-contracts,wallet/wallet.sol,"multiowned();revoke(bytes32 _operation);confirmed(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);reorganizeOwners();clearPending();changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);daylimit();setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(bytes32 identifier);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending();confirmVerbose(bytes32 _h, address _to, uint _value, bytes _data)"
kieranelby/dapp-test-runner,contracts/DTRContracts.sol,"reject();DTRExpensiveWallet(uint256 eatGasAmount_);spend(address dst, uint256 val);spendWithGas(address dst, uint256 val, uint256 extraGasAmount);spendWithGasAndData(address dst, uint256 val,uint256 extraGasAmount, bytes callData);kill()"
ethereum/solidity,test/libsolidity/syntaxTests/parsing/multiple_return_param_trailing_comma.sol,""
bobsummerwill/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/041_functions_with_stucts_of_non_external_types_in_interface.sol,f(S memory)
vvelikodny/go-ethereum,contracts/chequebook/contract/chequebook.sol,"cash(address beneficiary, uint256 amount, uint8 sig_v, bytes32 sig_r, bytes32 sig_s)"
ethersphere/go-ethereum,contracts/chequebook/contract/chequebook.sol,"cash(address beneficiary, uint256 amount, uint8 sig_v, bytes32 sig_r, bytes32 sig_s)"
trinityfx/trinity,contracts/chequebook/contract/chequebook.sol,"cash(address beneficiary, uint256 amount, uint8 sig_v, bytes32 sig_r, bytes32 sig_s)"
meta-network/go-meta,vendor/github.com/ethereum/go-ethereum/contracts/chequebook/contract/chequebook.sol,"cash(address beneficiary, uint256 amount, uint8 sig_v, bytes32 sig_r, bytes32 sig_s)"
getamis/go-ethereum,contracts/chequebook/contract/chequebook.sol,"cash(address beneficiary, uint256 amount, uint8 sig_v, bytes32 sig_r, bytes32 sig_s)"
wuestholz/go-ethereum,contracts/chequebook/contract/chequebook.sol,"cash(address beneficiary, uint256 amount, uint8 sig_v, bytes32 sig_r, bytes32 sig_s)"
markya0616/go-ethereum,contracts/chequebook/contract/chequebook.sol,"cash(address beneficiary, uint256 amount, uint8 sig_v, bytes32 sig_r, bytes32 sig_s)"
fireblock/go-ethereum,contracts/chequebook/contract/chequebook.sol,"cash(address beneficiary, uint256 amount, uint8 sig_v, bytes32 sig_r, bytes32 sig_s)"
OriginalMy/OriginalMyAccessControl,OriginalMyAccessControl.sol,"OriginalMyAccessControl();transferOwnership(address newOwner);enableSuperUser(address target, bool enable);enableManager(address target, bool enable);enableUser(address target, bool enable);isSuperUser(address target);isManager(address target);isUser(address target)"
benjaminion/solidity,test/compilationTests/zeppelin/Bounty.sol,createTarget();deployContract();claim(Target target);checkInvariant()
elementrem/solidity,test/compilationTests/zeppelin/Bounty.sol,createTarget();deployContract();claim(Target target);checkInvariant()
michinbear/solidity,test/compilationTests/zeppelin/Bounty.sol,createTarget();deployContract();claim(Target target);checkInvariant()
vsimetka/MVP,wallet_deployed.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);getOwner(uint ownerIndex);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
nelladragon/scab,contracts/message_engine/MsgEngine.sol,"MsgEngine(uint8 proposals);sendMsg(address _recipient, string _message);getMsg(address _recipient);consumeMsg();inboxIsEmpty(address _recipient);inboxSize(address _recipient);setSignedPublicEncKey(string key);getSignedPublicEncKey(address addr);inboxIsEmptyL(Inbox inbox);check()"
lkiversonlk/eth-cms,src/contract/94Ex.sol,"safeMul(uint a, uint b);safeSub(uint a, uint b);safeAdd(uint a, uint b);assert(bool assertion);totalSupply();balanceOf(address _owner);transfer(address _to, uint256 _value);transferFrom(address _from, address _to, uint256 _value);approve(address _spender, uint256 _value);allowance(address _owner, address _spender);transfer(address _to, uint256 _value);transferFrom(address _from, address _to, uint256 _value);balanceOf(address _owner);approve(address _spender, uint256 _value);allowance(address _owner, address _spender);ReserveToken();create(address account, uint amount);destroy(address account, uint amount);accountLevel(address user);setAccountLevel(address user, uint level);accountLevel(address user);EtherDelta(address admin_, address feeAccount_, address accountLevelsAddr_, uint feeMake_, uint feeTake_, uint feeRebate_);changeAdmin(address admin_);changeAccountLevelsAddr(address accountLevelsAddr_);changeFeeAccount(address feeAccount_);changeFeeMake(uint feeMake_);changeFeeTake(uint feeTake_);changeFeeRebate(uint feeRebate_);deposit();withdraw(uint amount);depositToken(address token, uint amount);withdrawToken(address token, uint amount);balanceOf(address token, address user);order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce);trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount);tradeBalances(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address user, uint amount);testTrade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount, address sender);availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s);amountFilled(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s);cancelOrder(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, uint8 v, bytes32 r, bytes32 s)"
intellij-solidity/intellij-solidity,src/test/resources/fixtures/formatter/multisigWallet-after.sol,"MultisigWallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);resetSpentToday();clearPending()"
bobsummerwill/solidity,test/libsolidity/smtCheckerTests/types/mapping_and_array_of_functions.sol,""
ethereum/solidity,test/libsolidity/semanticTests/functionCall/call_function_returning_function.sol,f()
TripleSpeeder/StandingOrderDapp,contracts/StandingOrder.sol,"getEntitledFunds();getUnclaimedFunds();getOwnerFunds();collectFunds();WithdrawOwnerFunds(uint amount);Terminate();createStandingOrder(address _payee, uint _paymentAmount, uint _paymentInterval, uint _startTime, string _label);getNumOrdersByOwner();getOwnOrderByIndex(uint index);getNumOrdersByPayee();getPaidOrderByIndex(uint index)"
ethereum/solidity,test/libsolidity/semanticTests/abiEncoderV2/calldata_array_function_types.sol,f(function();f_reenc(function();g(bool reenc)
winsvega/solidity,test/libsolidity/semanticTests/uninitializedFunctionPointer/invalidStoredInConstructor.sol,f();f()
bobsummerwill/solidity,test/libsolidity/semanticTests/uninitializedFunctionPointer/invalidStoredInConstructor.sol,f();f()
ethereum/solidity,test/libsolidity/syntaxTests/lvalues/valid_lvalues.sol,"i();e();f(uint x, bytes32 y);g(function();g(function()"
benjaminion/solidity,test/compilationTests/zeppelin/ownership/HasNoEther.sol,HasNoEther();reclaimEther()
michinbear/solidity,test/compilationTests/zeppelin/ownership/HasNoEther.sol,HasNoEther();reclaimEther()
borboss366/b9lab-splitter,contracts/Splitter.sol,"Splitter();getBalance(address account);contributeLocal();contribute(address party1, address party2);withdrawRefund()"
ethereum/solidity,test/libsolidity/semanticTests/functionTypes/pass_function_types_externally.sol,f(uint256 x);eval(function(uint);g(uint256 x)
mwensveen-nl/solidity-testing,src/test/resources/Fibonacci.sol,getNumber(uint position);value()
ethereum/solidity,test/libsolidity/semanticTests/constructor/store_internal_unused_function_in_constructor.sol,unused();t()
winsvega/solidity,test/libsolidity/syntaxTests/functionTypes/function_type_return_parameters_with_names.sol,""
bobsummerwill/solidity,test/libsolidity/syntaxTests/functionTypes/function_type_return_parameters_with_names.sol,""
Vorxil/MarketStake,test/ThrowProxy.sol,"ThrowProxy(address _target);transferOwnership(Owned owned, address new_owner);execute()"
ethereum/solidity,test/libsolidity/syntaxTests/emit/emit_non_event.sol,f()
TruLtd/tru-reputation-token,contracts/test-helpers/MockMigrationTarget.sol,"upgradeFrom(address _from, uint256 _value)"
ethereum/solidity,test/libsolidity/syntaxTests/memberLookup/member_not_unique.sol,a(uint256);a(uint8);f();g()
winsvega/solidity,test/libsolidity/semanticTests/smoke/fallback.sol,""
LykkeCity/EthereumApiDotNetCore,src/ContractBuilder/contracts/Erc223DepositContract.sol,"transferTokens(address _tokenAddress, address _to, uint256 _amount);tokenFallback(address _from, uint _value, bytes _data)"
ethereum/solidity,test/libsolidity/syntaxTests/iceRegressionTests/calling_external_function_via_local_variable_with_invalid_type.sol,f()
aragon/aragon-network-token,packages/sale/installed_contracts/zeppelin/contracts/MultisigWallet.sol,"MultisigWallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);setDailyLimit(uint _newLimit);resetSpentToday();clearPending()"
pooleja/SolidityPlayground,contracts/zeppelin/MultisigWallet.sol,"MultisigWallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);setDailyLimit(uint _newLimit);resetSpentToday();clearPending()"
maraoz/zeppelin-solidity,contracts/MultisigWallet.sol,"MultisigWallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);setDailyLimit(uint _newLimit);resetSpentToday();clearPending()"
osmode/ddash,ddash/source/nilometer.sol,"owned();transferOwnership(address newOwner);get_proposal_count();get_record_count();get_record_by_row(uint row);get_proposal_by_row(uint row);Nilometer();function();changeVotingRules(address _fundsRecipient, uint _daysToWait);newRecord(uint waterLevel);executeProposal(uint proposalNumber)"
benjaminion/solidity,test/compilationTests/zeppelin/MultisigWallet.sol,"MultisigWallet(address[] _owners, uint256 _required, uint256 _daylimit);destroy(address _to);execute(address _to, uint256 _value, bytes _data);confirm(bytes32 _h);setDailyLimit(uint256 _newLimit);resetSpentToday();clearPending()"
elementrem/solidity,test/compilationTests/zeppelin/MultisigWallet.sol,"MultisigWallet(address[] _owners, uint256 _required, uint256 _daylimit);destroy(address _to);execute(address _to, uint256 _value, bytes _data);confirm(bytes32 _h);setDailyLimit(uint256 _newLimit);resetSpentToday();clearPending()"
michinbear/solidity,test/compilationTests/zeppelin/MultisigWallet.sol,"MultisigWallet(address[] _owners, uint256 _required, uint256 _daylimit);destroy(address _to);execute(address _to, uint256 _value, bytes _data);confirm(bytes32 _h);setDailyLimit(uint256 _newLimit);resetSpentToday();clearPending()"
zchn/ethereum-analyzer,examples/etherscan.io/CryptoKittiesCore.sol,"Ownable();transferOwnership(address newOwner);totalSupply();balanceOf(address _owner);ownerOf(uint256 _tokenId);approve(address _to, uint256 _tokenId);transfer(address _to, uint256 _tokenId);transferFrom(address _from, address _to, uint256 _tokenId);name();symbol();tokensOfOwner(address _owner);tokenMetadata(uint256 _tokenId, string _preferredTransport);supportsInterface(bytes4 _interfaceID);isGeneScience();mixGenes(uint256 genes1, uint256 genes2, uint256 targetBlock);setCEO(address _newCEO);setCFO(address _newCFO);setCOO(address _newCOO);pause();unpause();_transfer(address _from, address _to, uint256 _tokenId);setSecondsPerBlock(uint256 secs);getMetadata(uint256 _tokenId, string);supportsInterface(bytes4 _interfaceID);setMetadataAddress(address _contractAddress);_owns(address _claimant, uint256 _tokenId);_approvedFor(address _claimant, uint256 _tokenId);_approve(uint256 _tokenId, address _approved);balanceOf(address _owner);totalSupply();ownerOf(uint256 _tokenId);tokensOfOwner(address _owner);_memcpy(uint _dest, uint _src, uint _len);_toString(bytes32[4] _rawBytes, uint256 _stringLength);tokenMetadata(uint256 _tokenId, string _preferredTransport);setGeneScienceAddress(address _address);_isReadyToBreed(Kitty _kit);_isSiringPermitted(uint256 _sireId, uint256 _matronId);_triggerCooldown(Kitty storage _kitten);approveSiring(address _addr, uint256 _sireId);setAutoBirthFee(uint256 val);_isReadyToGiveBirth(Kitty _matron);isReadyToBreed(uint256 _kittyId);isPregnant(uint256 _kittyId);_canBreedWithViaAuction(uint256 _matronId, uint256 _sireId);canBreedWith(uint256 _matronId, uint256 _sireId);_breedWith(uint256 _matronId, uint256 _sireId);breedWithAuto(uint256 _matronId, uint256 _sireId);giveBirth(uint256 _matronId);_owns(address _claimant, uint256 _tokenId);_escrow(address _owner, uint256 _tokenId);_transfer(address _receiver, uint256 _tokenId);_addAuction(uint256 _tokenId, Auction _auction);_cancelAuction(uint256 _tokenId, address _seller);_bid(uint256 _tokenId, uint256 _bidAmount);_removeAuction(uint256 _tokenId);_isOnAuction(Auction storage _auction);_currentPrice(Auction storage _auction);_computeCut(uint256 _price);pause();unpause();ClockAuction(address _nftAddress, uint256 _cut);withdrawBalance();bid(uint256 _tokenId);cancelAuction(uint256 _tokenId);cancelAuctionWhenPaused(uint256 _tokenId);getAuction(uint256 _tokenId);getCurrentPrice(uint256 _tokenId);SiringClockAuction(address _nftAddr, uint256 _cut);bid(uint256 _tokenId);SaleClockAuction(address _nftAddr, uint256 _cut);bid(uint256 _tokenId);setSaleAuctionAddress(address _address);setSiringAuctionAddress(address _address);withdrawAuctionBalances();createPromoKitty(uint256 _genes, address _owner);KittyCore();setNewAddress(address _v2Address);getKitty(uint256 _id);unpause();withdrawBalance()"
winsvega/solidity,test/libsolidity/semanticTests/abiEncoderV2/cleanup/function.sol,ggg(function();h(S calldata x);dummy();ffff(uint256 a)
bobsummerwill/solidity,test/libsolidity/semanticTests/abiEncoderV2/cleanup/function.sol,ggg(function();h(S calldata x);dummy();ffff(uint256 a)
ethereum/solidity,test/libsolidity/syntaxTests/functionTypes/external_function_to_function_type_calldata_parameter.sol,f(function(bytes memory);callback(bytes calldata);g()
ethereum/solidity,test/libsolidity/syntaxTests/structs/member_type_func.sol,f();g(function(S memory)
ethereum/solidity,test/libsolidity/syntaxTests/functionTypes/external_function_type_taking_internal.sol,""
EarthDollar/farmer,mix/stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
ethereum/solidity,test/libsolidity/syntaxTests/functionTypes/internal_function_returned_from_public_function.sol,f()
winsvega/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/041_functions_with_stucts_of_non_external_types_in_interface.sol,f(S memory)
AragonOne/zeppelin-solidity,contracts/Bounty.sol,createTarget();deployContract();checkInvariant();claim(Target target);checkInvariant()
ethereum/solidity,test/libsolidity/semanticTests/constructor/constructor_function_complex.sol,f();sixteen()
winsvega/solidity,test/libsolidity/ABIJson/function_type_extended.sol,g(function(test)
ChronoBank/LX-SC,contracts/helpers/Mock.sol,"ignore(bytes4 _sig, bool _enabled);expect(address _from, uint _value, bytes _input, bytes32 _return);assertExpectations();expectationsLeft();resetCallsCount()"
ethereum/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/571_function_type_undeclared_type_external.sol,a(function(Nested)
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.119/node_modules/solium/test/lib/rules/blank-lines/accept/function.sol,spam();ham();baba();spam();ham();lola();someFunction();anotherFunction();yetAnotherFunction()
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.116/node_modules/solium/test/lib/rules/blank-lines/accept/function.sol,spam();ham();baba();spam();ham();lola();someFunction();anotherFunction();yetAnotherFunction()
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.120/node_modules/solium/test/lib/rules/blank-lines/accept/function.sol,spam();ham();baba();spam();ham();lola();someFunction();anotherFunction();yetAnotherFunction()
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.118/node_modules/solium/test/lib/rules/blank-lines/accept/function.sol,spam();ham();baba();spam();ham();lola();someFunction();anotherFunction();yetAnotherFunction()
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.114/node_modules/solium/test/lib/rules/blank-lines/accept/function.sol,spam();ham();baba();spam();ham();lola();someFunction();anotherFunction();yetAnotherFunction()
duaraghav8/Solium,test/lib/rules/blank-lines/accept/function.sol,spam();ham();baba();spam();ham();lola();someFunction();anotherFunction();yetAnotherFunction()
dltdojo/courses,ethereum/solidity/T116_Payable.sol,set(uint x);Foo();kill()
chriseth/dapp-bin,wallet/wallet2.sol,"multiowned();confirmed(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);reorganizeOwners();changeRequirement(uint _newRequired);isOwner(address _addr);daylimit();setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet();kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);confirmVerbose(bytes32 _h, address _to, uint _value, bytes _data)"
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.116/node_modules/solparse-exp-jb/test/doc_examples.sol,"f();c();test(uint class);getChoice();Base(uint i);Derived(uint i);blah();f(uint x, uint y);f(uint x, uint y);g(uint pos);setData(uint pos, uint value);getData(uint pos);sendHalf(address addr);bar(uint[] memory self, function (uint);f(uint[][] calldata x);insert(data storage self, uint value);remove(data storage self, uint value);contains(data storage self, uint value);iterate_start(data storage self);iterate_valid(data storage self, uint index);iterate_advance(data storage self, uint index);iterate_get(data storage self, uint index);insert(uint v);sum();DualIndex();set(uint key1, uint key2, uint value);transfer_ownership(address _admin);lookup(uint key1, uint key2);functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage);something();sum(uint[] storage self);someFunction();fun();at(address _addr);test();get();foobar();bax();foobar();foo();bar(lorem, ipsum, dollar, quote);axe();baxe(a, bc, def, ghij);returnNumber(uint number);alloc();ham(S storage s1, uint[] storage arr);getMyTuple();abstain();foobar();foobar();a();bar(address);dell(function(int a, bool bcd);foo()"
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.118/node_modules/solparse-exp-jb/test/doc_examples.sol,"f();c();test(uint class);getChoice();Base(uint i);Derived(uint i);blah();f(uint x, uint y);f(uint x, uint y);g(uint pos);setData(uint pos, uint value);getData(uint pos);sendHalf(address addr);bar(uint[] memory self, function (uint);f(uint[][] calldata x);insert(data storage self, uint value);remove(data storage self, uint value);contains(data storage self, uint value);iterate_start(data storage self);iterate_valid(data storage self, uint index);iterate_advance(data storage self, uint index);iterate_get(data storage self, uint index);insert(uint v);sum();DualIndex();set(uint key1, uint key2, uint value);transfer_ownership(address _admin);lookup(uint key1, uint key2);functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage);something();sum(uint[] storage self);someFunction();fun();at(address _addr);test();get();foobar();bax();foobar();foo();bar(lorem, ipsum, dollar, quote);axe();baxe(a, bc, def, ghij);returnNumber(uint number);alloc();ham(S storage s1, uint[] storage arr);getMyTuple();abstain();foobar();foobar();a();bar(address);dell(function(int a, bool bcd);foo()"
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.114/node_modules/solparse-exp-jb/test/doc_examples.sol,"f();c();test(uint class);getChoice();Base(uint i);Derived(uint i);blah();f(uint x, uint y);f(uint x, uint y);g(uint pos);setData(uint pos, uint value);getData(uint pos);sendHalf(address addr);bar(uint[] memory self, function (uint);f(uint[][] calldata x);insert(data storage self, uint value);remove(data storage self, uint value);contains(data storage self, uint value);iterate_start(data storage self);iterate_valid(data storage self, uint index);iterate_advance(data storage self, uint index);iterate_get(data storage self, uint index);insert(uint v);sum();DualIndex();set(uint key1, uint key2, uint value);transfer_ownership(address _admin);lookup(uint key1, uint key2);functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage);something();sum(uint[] storage self);someFunction();fun();at(address _addr);test();get();foobar();bax();foobar();foo();bar(lorem, ipsum, dollar, quote);axe();baxe(a, bc, def, ghij);returnNumber(uint number);alloc();ham(S storage s1, uint[] storage arr);getMyTuple();abstain();foobar();foobar();a();bar(address);dell(function(int a, bool bcd);foo()"
ethereum/solidity,test/libsolidity/smtCheckerTests/types/function_type_array_as_reference_type.sol,b(function(Nested memory);c(function(Nested memory);d(function(Nested memory)
ethereum/solidity,test/libsolidity/syntaxTests/functionTypes/external_library_function_to_external_function_type.sol,f(uint256 _a);run(function(uint256);test()
UrsZeidler/licensemanager,licensemanager/mix/contracts.sol,"LicenseManager(address _paymentAddress, string _name);changePaymentAddress(address _newPaymentAdress);createIssuerContract(string itemName,string textHash,string url,uint lifeTime,uint price);stopIssuing(uint licenseId);changePaymentAddress(address _newPaymentAddress,uint licenseId);LicenseIssuer(string itemName, string textHash, string url, uint lifeTime, uint price, address _pa);checkLicense(bytes32 factHash,uint8 v,bytes32 sig_r,bytes32 sig_s);checkLicense(address _address);changePaymentAddress(address _newPaymentAddress);stopIssuing();buyLicense(address _address,string _name);getIssuable()"
ethereum/solidity,test/libsolidity/smtCheckerTests/types/function_type_nested.sol,h()
Bitorious/Genoil-cpp-ethereum,mix/stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(string32 _name);getName(address _owner);NameReg();register(string32 name);unregister();addressOf(string32 name);nameOf(address addr);kill();register(string32 name);addressOf(string32 name);unregister();nameOf(address addr)"
guanqun/cpp-ethereum,mix/stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(string32 _name);getName(address _owner);NameReg();register(string32 name);unregister();addressOf(string32 name);nameOf(address addr);kill();register(string32 name);addressOf(string32 name);unregister();nameOf(address addr)"
Gustav-Simonsson/cpp-ethereum,mix/stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(string32 _name);getName(address _owner);NameReg();register(string32 name);unregister();addressOf(string32 name);nameOf(address addr);kill();register(string32 name);addressOf(string32 name);unregister();nameOf(address addr)"
winsvega/solidity,test/libsolidity/syntaxTests/controlFlow/uninitializedAccess/functionType.sol,f(function(uint[] storage)
bobsummerwill/solidity,test/libsolidity/syntaxTests/controlFlow/uninitializedAccess/functionType.sol,f(function(uint[] storage)
winsvega/solidity,test/libsolidity/syntaxTests/inlineAssembly/storage_reference.sol,""
kryptopy1/crowdsale,contracts/MultiSigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
matthiaszimmermann/web3j_tests,resources/solidity/Savings.sol,"Savings(uint limitWei, uint periodSeconds);withdraw(uint amountWei);kill()"
winsvega/solidity,test/libsolidity/semanticTests/abiEncoderV2/calldata_array_function_types.sol,f(function();f_reenc(function();g(bool reenc)
bobsummerwill/solidity,test/libsolidity/semanticTests/abiEncoderV2/calldata_array_function_types.sol,f(function();f_reenc(function();g(bool reenc)
BSDStudios/parity,js/src/contracts/snippets/wallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);getOwner(uint ownerIndex);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
immartian/musicoin,js/src/contracts/snippets/wallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);getOwner(uint ownerIndex);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
jesuscript/parity,js/src/contracts/snippets/wallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);getOwner(uint ownerIndex);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
ethereum/solidity,test/libsolidity/syntaxTests/parsing/function_type_as_parameter.sol,f(function(uint)
livepeer/protocol,contracts/test/GenericMock.sol,"execute(address _target, bytes _data);setMockBool(bytes4 _func, bool _value);setMockAddress(bytes4 _func, address _value);mLoadAndReturn(uint256 _value);mLoadAndReturn(bytes32 _value);mLoadAndReturn(bool _value);mLoadAndReturn(address _value)"
pruby/AdversariallyVerifiableMachine,contracts/AVMDisputeProcess.sol,"transition(uint disputeId, DisputeState state);getNextAntiReplayTag(uint disputeId);AVMDisputeProcess();getDisputeState(uint disputeId);getDisputeStateText(uint disputeId);getDisputeParticipants(uint disputeId);getStepFunction(uint disputeId);getDisputeMemorySize(uint disputeId);getDisputeTimeoutState(uint disputeId);getPeriodInDispute(uint disputeId);getMaxResponseStates(uint disputeId);getRequiredStateNumbers(uint disputeId);getSubmittedStateRoot(uint disputeId, uint stateId);getMemoryTraceMeta(uint disputeId);getMemoryRead(uint disputeId, uint readId);getMemoryWrite(uint disputeId, uint writeId);isResolvedForComplainant(uint disputeId);isResolvedForDefendant(uint disputeId);doTimeoutForComplainant(uint disputeId);doTimeoutForDefendant(uint disputeId);doProvideStateRoots(uint disputeId, bytes32 antiReplayTag, bytes32[] stateRoots);doSelectDisputedStateRoot(uint disputeId, bytes32 antiReplayTag, uint disputedRoot);doProvideMemoryAccesses(uint disputeId, bytes32 antiReplayTag, uint256[] reads, uint256[] writes);doDisputeMemoryRead(uint disputeId, bytes32 antiReplayTag, uint readId);doDisputeMemoryWrite(uint disputeId, bytes32 antiReplayTag, uint writeId);doDisputeMemoryAccessSequence(uint disputeId, bytes32 antiReplayTag);doProveMemoryRead(uint disputeId, bytes32 antiReplayTag, bytes32[] merkleProof);doProveMemoryWrite(uint disputeId, bytes32 antiReplayTag, bytes32[] merkleProof)"
ethereum/solidity,test/libsolidity/semanticTests/storage/packed_functions.sol,set();g();h()
James-Sangalli/OpenRep,contracts/Reputation.sol,"addUser(string username, string location);trade(address vendor);giveReputation(address vendor, bool isPositive, string message);viewReputation(address user)"
OR13/car2go,contracts/MeshPointManager.sol,"MeshPointManager();getMeshPointByCreator();getMeshPointByName(string _name);getFaucets();createMeshPoint(string _name);requestAccess(address _meshPointAddress, address _requestorAddress );authorizeAccess(address _meshPointAddress, address _requestorAddress );revokeAccess(address _meshPointAddress, address _requestorAddress);killMeshPoint(address _address, string _name, address _creator)"
ethereum/solidity,test/libsolidity/syntaxTests/functionTypes/function_type.sol,f()
ethereum/solidity,test/libsolidity/syntaxTests/parsing/single_return_param_trailing_comma.sol,""
Project-WikiGit/WikiGit,dev/contracts/dao.sol,"invalidateVotingAtIndex(uint _index);vote(uint _votingId, bool _support);concludeVoting(uint _votingId);paySolutionReward(uint _taskId, uint _solId);paySolutionRewardGoodRep(address _submitter, uint _rewardGoodRep);getVotingListCount();vHasVoted(uint _votingId, address _addr)"
akhilss/embark-framework,test_app/app/contracts/simple_storage.sol,SimpleStorage(uint initialValue);set(uint x);get();getS()
orbro/eth-enablers,safeRemotePurchase.sol,Purchase();abort();confirmPurchase();confirmReceived()
jamiehale/dao_partnership,contracts/Partnership.sol,"proposeTransaction(address _to, uint _value, bytes _data, string _description);cancelTransaction(bytes32 _id);confirmTransaction(bytes32 _id);executeTransaction(bytes32 _id);distribute(address _recipient, uint _amount);distributeEvenly(uint _amount);repayLoan(address _recipient, uint _amount);withdraw(uint _amount);dissolve(address _beneficiary);isPartner(address _address)"
bobsummerwill/solidity,test/libsolidity/syntaxTests/types/contractTypeType/members/assign_function_via_base_name_to_var.sol,f();g();h()
winsvega/solidity,test/libsolidity/syntaxTests/fallback/default_visibility.sol,""
winsvega/solidity,test/libsolidity/syntaxTests/functionTypes/valid_function_type_variables.sol,fa(uint);fb(uint);fc(uint);fd(uint);fe(uint);ff(uint);fg(uint);fh(uint)
bobsummerwill/solidity,test/libsolidity/syntaxTests/functionTypes/valid_function_type_variables.sol,fa(uint);fb(uint);fc(uint);fd(uint);fe(uint);ff(uint);fg(uint);fh(uint)
ethereum/solidity,test/libsolidity/syntaxTests/functionTypes/valid_function_type_variables.sol,fa(uint);fb(uint);fc(uint);fd(uint);fe(uint);ff(uint);fg(uint);fh(uint)
winsvega/solidity,test/libsolidity/syntaxTests/inlineAssembly/storage_reference_fine.sol,""
dltdojo/courses,ethereum/solidity/T240_CrowdSale.sol,"info();buyTokens(Crowdsale crowdsale, uint weiAmount)"
ethereum/solidity,test/libsolidity/semanticTests/libraries/internal_library_function_bound_to_internal_function.sol,double(function(uint);identity(uint x);test(uint value)
mwensveen-nl/solidity-testing,src/test/resources/SelfDestructManager.sol,SelfDestructManager();give();endContract();SelfDestruct();endContract()
ocg1/assetx,007_MintedTokenCappedCrowdsaleExt.sol,"safeMul(uint a, uint b);safeDiv(uint a, uint b);safeSub(uint a, uint b);safeAdd(uint a, uint b);balanceOf(address who);transfer(address to, uint256 value);Ownable();transferOwnership(address newOwner);times(uint a, uint b);divides(uint a, uint b);minus(uint a, uint b);plus(uint a, uint b);halt();unhalt();isPricingStrategy();isSane(address crowdsale);isPresalePurchase(address purchaser);calculatePrice(uint value, uint weiRaised, uint tokensSold, address msgSender, uint decimals);isFinalizeAgent();isSane();finalizeCrowdsale();allowance(address owner, address spender);transferFrom(address from, address to, uint256 value);approve(address spender, uint256 value);CrowdsaleExt(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal, bool _isUpdatable, bool _isWhiteListed);investInternal(address receiver, uint128 customerId);preallocate(address receiver, uint fullTokens, uint weiPrice);investWithSignedAddress(address addr, uint128 customerId, uint8 v, bytes32 r, bytes32 s);investWithCustomerId(address addr, uint128 customerId);invest(address addr);buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s);buyWithCustomerId(uint128 customerId);buy();finalize();setFinalizeAgent(FinalizeAgent addr);setRequireCustomerId(bool value);setRequireSignedAddress(bool value, address _signerAddress);setEarlyParicipantWhitelist(address addr, bool status, uint minCap, uint maxCap);setEarlyParicipantsWhitelist(address[] addrs, bool[] statuses, uint[] minCaps, uint[] maxCaps);updateEarlyParicipantWhitelist(address addr, address contractAddr, uint tokensBought);updateJoinedCrowdsales(address addr);setLastCrowdsale(address addr);clearJoinedCrowdsales();updateJoinedCrowdsalesMultiple(address[] addrs);setStartsAt(uint time);setEndsAt(uint time);setPricingStrategy(PricingStrategy _pricingStrategy);setMultisig(address addr);loadRefund();refund();isMinimumGoalReached();isFinalizerSane();isPricingSane();getState();setOwnerTestValue(uint val);isCrowdsale();isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal);isBreakingInvestorCap(address receiver, uint tokenAmount);isCrowdsaleFull();assignTokens(address receiver, uint tokenAmount);isToken();transfer(address _to, uint _value);transferFrom(address _from, address _to, uint _value);balanceOf(address _owner);approve(address _spender, uint _value);allowance(address _owner, address _spender);setReservedTokensList(address addr, uint inTokens, uint inPercentageUnit, uint inPercentageDecimals);getReservedTokensListValInTokens(address addr);getReservedTokensListValInPercentageUnit(address addr);getReservedTokensListValInPercentageDecimals(address addr);setReservedTokensListMultiple(address[] addrs, uint[] inTokens, uint[] inPercentageUnit, uint[] inPercentageDecimals);mint(address receiver, uint amount);setMintAgent(address addr, bool state);MintedTokenCappedCrowdsaleExt(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal, uint _maximumSellableTokens, bool _isUpdatable, bool _isWhiteListed);isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal);isBreakingInvestorCap(address addr, uint tokenAmount);isCrowdsaleFull();assignTokens(address receiver, uint tokenAmount);setMaximumSellableTokens(uint tokens)"
ethereum/solidity,test/libsolidity/smtCheckerTests/types/function_type_as_argument.sol,f(function(uint)
ethereum/solidity,test/libsolidity/semanticTests/functionTypes/function_delete_storage.sol,a();set();d();ca()
lucywe/rootcore-crowdsale,solidity/contracts/CrowdsaleController.sol,"CrowdsaleController(uint256 _startTime, address _beneficiary);computeReturn(uint256 _contribution);upadateContributorsCount(uint256 _tokenAmount);addToWhitelist(address _address);removeFromWhitelist(address _address);contributeETH();contributePreSale();contributeFiat(address _contributor, uint256 _amount);processContribution()"
winsvega/solidity,test/libsolidity/ASTJSON/fallback_payable.sol,""
ethereum/solidity,test/libsolidity/semanticTests/constructor/store_internal_unused_library_function_in_constructor.sol,x();t()
rootprojectco/backend,contracts/reservation/Reservation.sol,"invest(address receiver);setEarlyParicipantWhitelist(address addr, bool status);setEndsAt(uint time);setPricingStrategy(address _pricingStrategy);setMultisig(address addr);loadRefund();refund();getState();isMinimumGoalReached();isBreakingCap(uint tokensSoldTotal);isReservationFull()"
stanta/darfchain,ICO/contracts/Crowdsale.sol,"Crowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal);investInternal(address receiver, uint128 customerId);preallocate(address receiver, uint fullTokens, uint weiPrice);investWithSignedAddress(address addr, uint128 customerId, uint8 v, bytes32 r, bytes32 s);investWithCustomerId(address addr, uint128 customerId);invest(address addr);buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s);buyWithCustomerId(uint128 customerId);buy();finalize();setFinalizeAgent(FinalizeAgent addr);setRequireCustomerId(bool value);setRequireSignedAddress(bool value, address _signerAddress);setEarlyParicipantWhitelist(address addr, bool status);setEndsAt(uint time);setPricingStrategy(PricingStrategy _pricingStrategy);loadRefund();refund();isMinimumGoalReached();isFinalizerSane();isPricingSane();getState();setOwnerTestValue(uint val);isCrowdsale();isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal);isCrowdsaleFull();assignTokens(address receiver, uint tokenAmount)"
Project-WikiGit/WikiGit,dev/contracts/main.sol,"Module(address _mainAddress);moduleAddress(string mod);Main(string _metadata, bytes _abiIPFSHash);initializeModuleAddresses(address[] _addrs);initializeABIHashForMod(uint _modId, bytes _abiHash);getABIHashForMod(bytes32 _modHash);setABIHashForMod(bytes32 _modHash, bytes _abiHash);removeModuleAtIndex(uint _index);setMetadata(string _meta)"
winsvega/solidity,test/libsolidity/syntaxTests/parsing/multiple_modifier_arg_trailing_comma.sol,""
bobsummerwill/solidity,test/libsolidity/syntaxTests/parsing/multiple_modifier_arg_trailing_comma.sol,""
ethereum/solidity,test/libsolidity/semanticTests/viaYul/function_selector.sol,f();h(function()
bobsummerwill/solidity,test/libsolidity/smtCheckerTests/types/function_type_arrays.sol,f()
apmilen/standard-token-sale,src/sale.t.sol,"SaleUser(StandardSale sale_);doBuy(uint wad);doTransfer(address to, uint256 amount);setToken(DSToken token_);doStop();time();addTime(uint extra);setUp();testSaleToken();testOwnerToken();testPublicBuy();testClaimTokens();testBuyManyTimes();testPostpone();testHitSoftCap();testFinalize();testTokenOwnershipAfterFinalize();testTransferAfterFinalize();testBuyExceedHardLimit();testFailTransferBeforeFinalize();testFailSoftLimit();testFailHardLimit();testFailStartTooEarly();testFailBuyAfterClose();time();addTime(uint extra);setUp();testSetPresale();testAppendTranch();testFailAppendTranch();testPreDistribute();testFailPreDistribute();testHitSoftCapPreDistribute();testHitPresaleCapPreDistribute();testFailHitPresaleCapPreDistribute();testHighestTranch();testHighestTranchNotExact();testMiddleTranch();testMiddleTranchNotExact();testLowestTranch();testHitSoftCapPresale();testHitPresaleCapPresale();testPresaleRefund();testRegularBuy();testUnsyncedRate()"
daxxcoin/daxxcore,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
orbro/eth-enablers,dgdSwapContract.sol,"balanceOf(address _owner);badgesOf(address _owner);transfer(address _to, uint256 _value);sendBadge(address _to, uint256 _value);transferFrom(address _from, address _to, uint256 _value);approve(address _spender, uint256 _value);allowance(address _owner, address _spender);mint(address _owner, uint256 _amount);calculateTxFee(uint256 _value, address _user);swap(address sendEtherTo, address adddressOfToken, uint tokenPriceInFinney_1000FinneyIs_1Ether, uint durationInDays);killSwap();emergencyWithdrawal(address token)"
winsvega/solidity,test/libsolidity/syntaxTests/parsing/multiple_function_param_trailing_comma.sol,""
bobsummerwill/solidity,test/libsolidity/syntaxTests/parsing/multiple_function_param_trailing_comma.sol,""
benjaminion/solidity,test/libsolidity/syntaxTests/functionTypes/external_function_to_function_type_calldata_parameter.sol,f(function(bytes memory);callback(bytes);g()
ethereum/solidity,test/libsolidity/syntaxTests/functionTypes/function_parameter_allowed_conversions.sol,test(function();test(function();f();g();h();i();j(function();testPure();testView();testDefault()
furusiyya/Notary-Platform,contracts/Crowdfunding.sol,"Crowdfunding();buy(address receiver);forwardFunds();multiSigAddress();tokenContractAddress();tokenStoreAddress();fundingStartAt();fundingEndsAt();distinctInvestors();investments();investedAmoun(address _addr);fundingRaised();exchnageRate();isWhiteListed(address _address);getState();updateMultiSig(address _newAddress);updateTokenContractAddr(address _newAddress);updateTokenStore(address _newAddress);updateEndsAt(uint256 _endsAt);updateExchangeRate(uint256 _newRate);updateWhiteList(address _address,bool _status);isCrowdsale();earlyBirds();updateBonuses(address _address,bool _status);getBonus(address _address,uint256 _value);isEarlyBird(address _address);isTokenContract();transferFrom(address _from, address _to, uint256 _value)"
NTRYPlatform/ntry-solidity,contracts/Crowdfunding.sol,"Crowdfunding();buy(address receiver);forwardFunds();multiSigAddress();tokenContractAddress();tokenStoreAddress();fundingStartAt();fundingEndsAt();distinctInvestors();investments();investedAmoun(address _addr);fundingRaised();exchnageRate();isWhiteListed(address _address);getState();updateMultiSig(address _newAddress);updateTokenContractAddr(address _newAddress);updateTokenStore(address _newAddress);updateEndsAt(uint256 _endsAt);updateExchangeRate(uint256 _newRate);updateWhiteList(address _address,bool _status);isCrowdsale();earlyBirds();updateBonuses(address _address,bool _status);getBonus(address _address,uint256 _value);isEarlyBird(address _address);isTokenContract();transferFrom(address _from, address _to, uint256 _value)"
vechain-team/crowdsale-contracts,contracts/Rollback.sol,"receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData);Rollback();withdrawETH(address _address,uint256 _amount);withdrawToken(address _address, uint256 _amount);setCredit(address _account, uint256 _amount);getCredit(address _account);receiveApproval(address _from, uint256 _value, address /*_tokenContract*/, bytes /*_extraData*/)"
ethereum/solidity,test/libsolidity/syntaxTests/functionTypes/public_function_type.sol,f()
orbro/eth-enablers,solidity-baby-steps-master/contracts/45_pong.sol,getPongvalTransactional();Pong(int8 _pongval);getPongvalTransactional();getPongvalConstant();setPongval(int8 _pongval);getPongvalTxRetrievalAttempted();getAddress();kill()
ethereum/solidity,test/libsolidity/syntaxTests/types/mapping/function_type_argument_internal.sol,f(function(mapping(uint=>uint)
winsvega/solidity,test/libsolidity/syntaxTests/functionTypes/public_function_type.sol,f()
bobsummerwill/solidity,test/libsolidity/syntaxTests/functionTypes/public_function_type.sol,f()
benjaminion/solidity,test/libsolidity/syntaxTests/functionTypes/public_function_type.sol,f()
aragon/aragon-network-token,packages/sale/installed_contracts/zeppelin/contracts/Bounty.sol,createTarget();deployContract();claim(Target target);checkInvariant()
pooleja/SolidityPlayground,contracts/zeppelin/Bounty.sol,createTarget();deployContract();claim(Target target);checkInvariant()
maraoz/zeppelin-solidity,contracts/Bounty.sol,createTarget();deployContract();claim(Target target);checkInvariant()
UrsZeidler/checksumDatabase,checksumDatabase/src/main/resources/mix/contract.sol,"ChecksumDatabase(string _name,string _url,string _description);addEntry(string _version,string _checksum);changeOwner(address newOwner);getEntry(uint id)"
Majoolr/ethereum-libraries,WalletLib/truffle/contracts/WalletLibTestContract.sol,"WalletLibTestContract();owners();ownerIndex(address _owner);maxOwners();ownerCount();requiredAdmin();requiredMinor();requiredMajor();currentSpend(address _token);majorThreshold(address _token);transactionLength(bytes32 _id);transactionConfirms(bytes32 _id, uint256 _txIndex);transactionConfirmCount(bytes32 _id, uint256 _txIndex);transactionSuccess(bytes32 _id, uint256 _txIndex);changeOwner(address _from, address _to, bool _confirm);addOwner(address _newOwner, bool _confirm);removeOwner(address _ownerRemoving, bool _confirm);changeRequiredAdmin(uint256 _newRequired, bool _confirm);changeRequiredMajor(uint256 _newRequired, bool _confirm);changeRequiredMinor(uint256 _newRequired, bool _confirm);changeMajorThreshold(address _token, uint256 _newThreshold, bool _confirm);serveTx(address _to, uint256 _value, bytes _txData, bool _confirm);confirmTx(bytes32 _id);revokeConfirm(bytes32 _id);checkNotConfirmed(bytes32 _id, uint256 _txIndex)"
ProjectEntropy/contracts,contracts/Entropy.sol,"Entropy();buyTokens();changeSafetyLimit(uint _new_limit);setGuardian(address _person, bool _is_guardian);isGuardian(address _citizen);isCitizen(address _citizen)"
Majoolr/ethereum-libraries,VestingLib/truffle/contracts/VestingLibETHTestContract.sol,"initializeETHBalance();registerUser(address _registrant, uint256 _vestAmount, uint256 _bonus);registerUsers(address[] _registrants, uint256 _vestAmount, uint256 _bonus);unregisterUser(address _registrant);unregisterUsers(address[] _registrants);swapRegistration(address _replacementRegistrant);withdrawETH();sendETH(address _beneficiary);ownerWithdrawExtraETH();getOwner();getTotalSupply();getContractBalance();getIsToken();getStartTime();getEndTime();getNumRegistered();getTimeInterval();getPercentPerInterval();getPercentReleased();getHasWithdrawn(address _participant);getVestingAmount(address _participant);getBonusAmount(address _participant)"
Project-WikiGit/WikiGit,dev/contracts/member_handler.sol,"MemberHandler(string _creatorUserName, address _mainAddr);setSelfAsContributor(string userName);setSelfAsPureShareholder(string _userName);removeMemberWithAddress(address _addr);alterBannedStatus(address _addr, bool _newStatus);incMemberGoodRep(address _addr, uint _amount);incMemberBadRep(address _addr, uint _amount);changeMemberGroup(uint _id, string _newGroupName);changeSelfName(string _newName);changeSelfAddress(address _newAddress);getMemberAtAddress(address _addr);getGroupRight(string _groupName, string _right);memberHasRight(address _addr, string _right);memberGroupNameHash(address _addr);getMemberListCount()"
ethereum/solidity,test/libsolidity/semanticTests/inheritance/inherited_function_through_dispatch.sol,f();f();g()
ethereum/solidity,test/libsolidity/semanticTests/functionTypes/function_external_delete_storage.sol,increment();set();incrementIndirectly();deleteFunction()
winsvega/solidity,test/libsolidity/smtCheckerTests/complex/slither/external_function.sol,funcCalled();callWithSuper();funcNotCalled();my_func();funcNotCalled();exec()
bobsummerwill/solidity,test/libsolidity/smtCheckerTests/complex/slither/external_function.sol,funcCalled();callWithSuper();funcNotCalled();my_func();funcNotCalled();exec()
ethereum/solidity,test/libsolidity/semanticTests/viaYul/function_address.sol,f();g();h(function()
ethereum/solidity,test/libsolidity/syntaxTests/functionTypes/function_type_parameter.sol,f(function(uint)
Majoolr/ethereum-libraries,VestingLib/truffle/contracts/VestingLibTokenTestContract.sol,"initializeTokenBalance(CrowdsaleToken token, uint256 _balance);registerUser(address _registrant, uint256 _vestAmount, uint256 _bonus);registerUsers(address[] _registrants, uint256 _vestAmount, uint256 _bonus);unregisterUser(address _registrant);unregisterUsers(address[] _registrants);swapRegistration(address _replacementRegistrant);withdrawTokens(CrowdsaleToken token);sendTokens(CrowdsaleToken token, address _beneficiary);ownerWithdrawExtraTokens(CrowdsaleToken token);getOwner();getTotalSupply();getContractBalance();getIsToken();getStartTime();getEndTime();getNumRegistered();getTimeInterval();getPercentPerInterval();getPercentReleased();getHasWithdrawn(address _participant);getVestingAmount(address _participant);getBonusAmount(address _participant)"
FedCoup/FedCoup,installed_contracts/zeppelin/contracts/Bounty.sol,createTarget();deployContract();claim(Target target);checkInvariant()
ethereum/solidity,test/libsolidity/semanticTests/array/copying/copy_function_storage_array.sol,test();a()
ethereum/solidity,test/libsolidity/semanticTests/functionCall/calling_uninitialized_function_in_detail.sol,t()
elementrem/solidity,test/compilationTests/zeppelin/ownership/HasNoEther.sol,HasNoElement();reclaimElement()
ownage-ltd/ether-router,contracts/EtherRouter.sol,EtherRouter(Resolver _resolver)
ConsenSys/truffle,packages/decoder/test/current/contracts/DecodingSample.sol,example();spill()
QTBlockchain/SolidityNWeb3,SmartContracts/March2018/AbstractionDemo/contracts/AutoFare.sol,"AutoFare(uint16 distance,uint16 price);receiveEther();computeFare(uint16 distance);getBalance()"
ethereum/solidity,test/libsolidity/semanticTests/immutable/internal_function_pointer.sol,f();callZ()
Pavel-DV/ChronoMint,old/ChronoMint.sol,"getAddress(string name);isCBE(address key);getValue(string name);setAddress(string name, address value);setValue(string name, uint value);setContractValue(address subject, string name, uint value);getLOCbyID(uint _id);addLOCtoLHT(address laborOfferingContract, address laborHourToken);approveContract(address newContract);ChronoMint(address _tc, address _rc, address _ec)"
bshevchenko/ChronoMint,old/ChronoMint.sol,"getAddress(string name);isCBE(address key);getValue(string name);setAddress(string name, address value);setValue(string name, uint value);setContractValue(address subject, string name, uint value);getLOCbyID(uint _id);addLOCtoLHT(address laborOfferingContract, address laborHourToken);approveContract(address newContract);ChronoMint(address _tc, address _rc, address _ec)"
gnosis/solidity-arithmetic,test/ThrowProxy.sol,ThrowProxy(address _target);execute()
EthFans/carbonvote,contract/vote.sol,""
winsvega/solidity,test/libsolidity/syntaxTests/functionTypes/function_type_parameter.sol,f(function(uint)
bobsummerwill/solidity,test/libsolidity/syntaxTests/functionTypes/function_type_parameter.sol,f(function(uint)
benjaminion/solidity,test/libsolidity/syntaxTests/functionTypes/function_type_parameter.sol,f(function(uint)
BitySA/whetcwithdraw,address_authorization/whauthorizeaddress.sol,Owned();changeOwner(address _newOwner);getOwner();authorizeAddress(address _authorizedAddress);getCodeSize(address _addr);close();getIsClosed()
ethereum/solidity,test/libsolidity/syntaxTests/functionTypes/function_types_internal_visibility_error.sol,""
bitcoinmeetups/dapp-bin,clientreceipt/clientreceipt.sol,"nominate(address _keyholder, address _executive);open();nominate(address _keyholder, address _executive);open();close();deposit(hash _id);refill();transfer(address _to, uint _value, byte[] _data)"
chriseth/dapp-bin,clientreceipt/clientreceipt.sol,"nominate(address _keyholder, address _executive);open();nominate(address _keyholder, address _executive);open();close();deposit(hash _id);refill();transfer(address _to, uint _value, byte[] _data)"
AlphaDinoRC/rockchain,contracts/Crowdsale.sol,"Crowdsale(address _rok, address _escrow);contribute(address contributor);isStarted();isComplete();tokenBalance();isSuccessful();checkEthBalance(address _contributor);checkRokSold();checkRokTeam();checkRokBounty();refundPeriodOver();refundPeriodStart();percentOfGoal();getBonus(uint256 amount);setBalance(address sender,uint256 value);finalize();payout();payTeam();updateKYClist(address[] allowed);claim();refund();partialRefund(uint256 value)"
ethereum/solidity,test/libsolidity/syntaxTests/events/event_function_type_indexed.sol,f()
winsvega/solidity,test/libsolidity/smtCheckerTests/types/function_type_call.sol,f(function(uint);h()
bobsummerwill/solidity,test/libsolidity/smtCheckerTests/types/function_type_call.sol,f(function(uint);h()
WishFinanceCom/WF-contracts,contracts/buyback/BuyBack.sol,"emitError(uint errorCode);emitPricesUpdated(uint buyPrice, uint sellPrice);emitActiveChanged(bool isActive);_error(uint error);_emitPricesUpdated(uint buyPrice, uint sellPrice);_emitActiveChanged(bool isActive);setupEventsHistory(address _eventsHistory);init(Asset _asset, DelayedPayments _delayedPayments);setActive(bool _active);setPrices(uint _buyPrice, uint _sellPrice);_balanceOf(address _address);sell(uint _amount, uint _price);withdrawTokens(address _recipient, uint _amount);withdrawAllTokens(address _recipient);withdrawEth(address _recipient, uint _amount);withdrawAllEth(address _recipient);withdrawAll(address _recipient);emitError(uint errorCode);emitPricesUpdated(uint buyPrice, uint sellPrice);emitActiveChanged(bool isActive);getEventsHistory();_mul(uint _a, uint _b)"
winsvega/solidity,test/libsolidity/syntaxTests/functionTypes/external_function_to_function_type_calldata_parameter.sol,f(function(bytes memory);callback(bytes calldata);g()
bobsummerwill/solidity,test/libsolidity/syntaxTests/functionTypes/external_function_to_function_type_calldata_parameter.sol,f(function(bytes memory);callback(bytes calldata);g()
orbro/eth-enablers,pyramidScheme.sol,"Pyramid(address _bitcoinBridge);enter(bytes desc, bytes bitcoinAddress);getNumberOfParticipants();collectFees(address recipient);setBitcoinBridge(address _bitcoinBridge);setOwner(address _owner);queuePayment(bytes bitcoinAddress)"
winsvega/solidity,test/libsolidity/syntaxTests/functionTypes/external_function_type_taking_internal.sol,""
bobsummerwill/solidity,test/libsolidity/syntaxTests/functionTypes/external_function_type_taking_internal.sol,""
benjaminion/solidity,test/libsolidity/syntaxTests/functionTypes/external_function_type_taking_internal.sol,""
bobsummerwill/solidity,test/libsolidity/ABIJson/function_type_extended.sol,g(function(test)
ethereum/solidity,test/libsolidity/ABIJson/function_type_extended.sol,g(function(test)
Fermion-Project/Light-Wallet,contracts/MultiSigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
ethereum/solidity,test/libsolidity/semanticTests/viaYul/conversion/function_cast.sol,f(uint x);g();h(uint x);t()
benjaminion/solidity,test/libsolidity/syntaxTests/functionTypes/delete_function_type.sol,f()
raiden-network/raiden-token,contracts/test/gnosis_multisig_wallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
pembient/pembicoin,tests/Reentrant.sol,Reentrant(PembiCoinICO _victim);arm();disarm();requestRefund()
winsvega/solidity,test/libsolidity/syntaxTests/parsing/mapping_and_array_of_functions.sol,""
bobsummerwill/solidity,test/libsolidity/syntaxTests/parsing/mapping_and_array_of_functions.sol,""
ethereum/solidity,test/libsolidity/syntaxTests/parsing/multiple_modifier_arg_trailing_comma.sol,""
dltdojo/courses,ethereum/solidity/T250_Ballot.sol,"vote(Ballot ballot, uint8 proposal);Ballot(uint8 _numProposals);giveRightToVote(address voter);delegate(address to);vote(uint8 proposal);winningProposal()"
burnoutcoin/go-burnout,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
winsvega/solidity,test/libsolidity/ABIJson/function_type.sol,g(function(uint)
credsign/credsign.github.io,contracts/indexes/ContentSeries.sol,ContentSeries(address contentContract);add(uint256 contentID);getSize()
wilmveel/praetorian-contracts,contracts/Grant.sol,Grant(address _client);authorize();revoke();getState()
fccoelho/Curso_Blockchain,contracts/ICO/node_modules/openzeppelin-solidity/contracts/ownership/HasNoEther.sol,reclaimEther()
qjflores/singularity,contracts/Bank.sol,"Bank(string _name);customerExchangeFiat(uint256 _amount, address _userAddress, string _transactionType);customerExchangeEther(uint256 _amount, address _userAddress, string _transactionType)"
dltdojo/courses,ethereum/solidity/T130_MsgSender.sol,testTodo();info();Foo();kill();Alice(address _fooAddress);testFooSend();testFooKill();kill();Bob(address _fooAddress);testFooSend();testFooKill();testAliceFooSend();testAliceFooKill()
SmartChainX/ChainBlockchain,Contracts/ICO/Crowdsale.sol,"Crowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal);investInternal(address receiver, uint128 customerId);preallocate(address receiver, uint fullTokens, uint weiPrice);investWithSignedAddress(address addr, uint128 customerId, uint8 v, bytes32 r, bytes32 s);investWithCustomerId(address addr, uint128 customerId);invest(address addr);buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s);buyWithCustomerId(uint128 customerId)"
becodemonkey/solidity,contracts/wallet/MultiSigWalletWithDailyLimit.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed);MultiSigWalletWithDailyLimit(address[] _owners, uint _required, uint _dailyLimit);changeDailyLimit(uint _dailyLimit);executeTransaction(uint transactionId);isUnderLimit(uint amount);calcMaxWithdraw()"
ethereum/solidity,test/libsolidity/syntaxTests/parsing/multiple_event_arg_trailing_comma.sol,""
intellij-solidity/intellij-solidity,src/test/resources/fixtures/parser/solidity_official_tests/shouldSucceed/fallbackFunction.sol,""
validitylabs/SimpleEthVote,contracts/VoteFactory.sol,"transferOwner(address newOwner);payOut();VoteFactory();newVote(uint duration, string description);startNewVote(uint duration, string description);vote(bool isYes, address voteSender)"
winsvega/solidity,test/libsolidity/semanticTests/uninitializedFunctionPointer/storeInConstructor.sol,f()
bobsummerwill/solidity,test/libsolidity/semanticTests/uninitializedFunctionPointer/storeInConstructor.sol,f()
explosion78/hookrz,contracts/Hookrz.sol,"registerRequest(int userId, int requestId);withdrawRequest(int userId, int requestId);getRequest(int requestId);registerBid(int restaurantId, int bidId, int requestId);withdrawBid(int restaurantId, int bidId, int requestId);acceptBid(int restaurantId, int userId, int requestId, int bidId);getBid(int bidId)"
winsvega/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/199_integer_unsigned_exp_signed.sol,""
Project-WikiGit/WikiGit,dev/contracts/repo_handler.sol,RepoHandler(address _mainAddr);setPersonalHash(bytes _hash)
winsvega/solidity,test/libsolidity/smtCheckerTests/typecast/function_type_to_function_type_internal.sol,f(function(uint)
bobsummerwill/solidity,test/libsolidity/smtCheckerTests/typecast/function_type_to_function_type_internal.sol,f(function(uint)
ethereum/solidity,test/libsolidity/syntaxTests/functionTypes/function_type_returned.sol,f()
ethereum/solidity,test/libsolidity/semanticTests/structs/multislot_struct_allocation.sol,o(uint a);f()
jamespic/ethereum-tools,simple_contracts.sol,"a();x(bool y);x(bool y);x(bool y);x(int a, int b);y()"
dltdojo/courses,ethereum/dapps/multisig/X02_ParityMultisig.sol,"revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);setDailyLimit(uint _newLimit);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);initMultiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);getOwner(uint ownerIndex);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);initDaylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();initWallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);create(uint _value, bytes _code);confirm(bytes32 _h);confirmAndCheck(bytes32 _operation);reorganizeOwners();underLimit(uint _value);today();clearPending();Wallet(address[] _owners, uint _required, uint _daylimit);getOwner(uint ownerIndex);hasConfirmed(bytes32 _operation, address _owner);isOwner(address _addr)"
bobsummerwill/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/040_functions_with_different_structs_in_interface.sol,f(S1 memory);f(S2 memory)
ethereum/solidity,test/libsolidity/semanticTests/viaYul/array_function_pointers.sol,"f(uint n, uint m);g(uint n, uint m)"
cgewecke/eth-gas-reporter,mock/contracts/EtherRouter/EtherRouter.sol,setResolver(address _resolver)
y12studio/y12eth,ybc2016/ybc2016.sol,"query(uint _timestamp, string _datasource, string _arg);query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit);getPrice(string _datasource);getPrice(string _datasource, uint gaslimit);useCoupon(string _coupon);setProofType(byte _proofType);getAddress();oraclize_setNetwork(uint8 networkID);oraclize_query(string datasource, string arg);oraclize_query(uint timestamp, string datasource, string arg);oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit);oraclize_query(string datasource, string arg, uint gaslimit);oraclize_query(string datasource, string arg1, string arg2);oraclize_query(uint timestamp, string datasource, string arg1, string arg2);oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit);oraclize_query(string datasource, string arg1, string arg2, uint gaslimit);oraclize_cbAddress();oraclize_setProof(byte proofP);parseAddr(string _a);strCompare(string _a, string _b);indexOf(string _haystack, string _needle);strConcat(string _a, string _b, string _c, string _d, string _e);strConcat(string _a, string _b, string _c, string _d);strConcat(string _a, string _b, string _c);strConcat(string _a, string _b);parseInt(string _a);parseInt(string _a, uint _b);YBananaCoin();__callback(bytes32 myid, string result, bytes proof);update(uint delay);kill()"
winsvega/solidity,test/libsolidity/syntaxTests/parsing/single_return_param_trailing_comma.sol,""
bobsummerwill/solidity,test/libsolidity/syntaxTests/parsing/single_return_param_trailing_comma.sol,""
ethereum/solidity,test/libsolidity/syntaxTests/abiEncoder/v2_call_to_v2_contract_function_pointer_accepting_struct.sol,get(Item memory _item);foo()
channel/channel.github.io,contracts/Post.sol,"Post(address feedContract);publish(string headers, string document, address token, uint256 parentID);toContentID(address publisher, string headers, string document, address token, uint256 parentID)"
ethereum/solidity,test/libsolidity/smtCheckerTests/complex/slither/external_function.sol,funcCalled();callWithSuper();funcNotCalled();my_func();funcNotCalled();exec()
WingsDao/contracts,contracts/MultiSigWallet/MultiSigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
ethereum/solidity,test/libsolidity/semanticTests/tryCatch/return_function.sol,g();f();fun()
TheRougeProject/RougeTokens,contracts/RGXBonus.sol,"isFundingOpen();distribute(address _to, uint256 _value);endFunding(uint _fundingEnd);withdraw();kill()"
intellij-solidity/intellij-solidity,src/test/resources/fixtures/parser/solidity_official_tests/shouldSucceed/callingFunction.sol,f()
LykkeCity/EthereumApiDotNetCore,src/ContractBuilder/contracts/erc20DepositContract.sol,"transferAllTokens(address _tokenAddress, address _to);tokenFallback(address _from, uint _value, bytes _data)"
ethereum/solidity,test/libsolidity/syntaxTests/multiVariableDeclaration/multiVariableDeclarationThatIsExpression.sol,f()
Health-Nexus/drs,contracts/HealthDRS.sol,"zero();isKeyOwner(bytes32 key, address account);isServiceOwner(bytes32 service, address account);getUrl(bytes32 service);getUrlFromKey(bytes32 key);updateUrl(bytes32 service, string memory url);getOwnersLength(bytes32 key);setLatestContract(address _contract);createService(string memory url);createKey(bytes32 service);issueKey(bytes32 service, address payable issueTo);shareKey(bytes32 key, address account);shareService(bytes32 service, address account);unshareKey(bytes32 key, address account);unshareService(bytes32 service, address account);createSalesOffer(bytes32 key, address payable buyer, uint price, bool _canSell);cancelSalesOffer(bytes32 key);purchaseKey(bytes32 key);createTradeOffer(bytes32 have, bytes32 want);cancelTradeOffer(bytes32 key);tradeKey(bytes32 have, bytes32 want);getServiceCount();getKeyCount();getService(bytes32 service);getKey(bytes32 key);setKeyData(bytes32 key, bytes32 dataKey, bytes32 dataValue);getKeyData(bytes32 key, bytes32 dataKey);logAccess(bytes32 key, string memory data);message(bytes32 from, bytes32 to, string memory category, string memory data);log(bytes32 from, string memory data)"
yippee-ki-yay/eth-slots,contracts/SlotMachine.sol,"SlotMachine();oneRoll();contractBalance();calculatePrize(uint rand1, uint rand2, uint rand3);withdraw();balanceOf(address user);setCoinPrice(uint _coinPrice);cashout(uint _amount);randomGen(uint seed)"
winsvega/solidity,test/libsolidity/syntaxTests/types/address/contract_non_payable_fallback_to_payable_address.sol,f()
jscottmiller/patronage,contracts/Exchange.sol,"reserve(address owner, uint amount);unreserve(address owner, uint amount);transfer(address oldOwner, address newOwner, uint shares);Exchange();postOffer(Side side, uint price, uint32 shares);getNumberOfOffers(Side side);getTopOffer(Side side);getOffer(Side side, uint depth);cancelOffer(Side side, uint price, uint32 shares);withdrawal();getBalance();spliceOffer(Side side, int16 parentIndex, int16 nextIndex)"
winsvega/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/466_does_not_error_transfer_payable_fallback.sol,""
Cryptonomica/cryptonomica,src/main/webapp/cryptoshares/contracts/CryptoShares.sol,"add(uint256 a, uint256 b);sub(uint256 a, uint256 b);mul(uint256 a, uint256 b);div(uint256 a, uint256 b);mod(uint256 a, uint256 b);balanceOf(address _account);transfer(address _recipient, uint _amount);revokedOn(address _address);keyCertificateValidUntil(address _address);tokenFallback(address _from, uint _value, bytes calldata _data);addressIsVerifiedByCryptonomica(address _address);startDividendsPayments();payDividendsToNext();fundDividendsPayout();startDividendsPaymentsAndFundDividendsPayout();approve(address _spender, uint _value);approve(address _spender, uint _currentValue, uint _value);_transferFrom(address _from, address _to, uint _value);transferFrom(address _from, address _to, uint _value);transfer(address _to, uint _value);transfer(address _to, uint _value, bytes calldata _data);voteFor(uint256 _proposalId);voteAgainst(uint256 _proposalId);addEtherToContract();changeCryptonomicaVerificationContractAddress(address _newAddress);addAdmin(address _newAdmin);removeAdmin(address _oldAdmin);setWithdrawalAddress(address payable _withdrawalAddress);fixWithdrawalAddress(address _withdrawalAddress);withdrawAllToWithdrawalAddress();changePrice(uint _newPrice);changeDisputeResolutionAgreement(string calldata _newText);changeXEuroContractAddress(address _newAddress)"
MicahZoltu/ethereum-scripts,source/TheDAO.sol,"balanceOf(address _owner);transfer(address _to, uint256 _amount);transferFrom(address _from, address _to, uint256 _amount);approve(address _spender, uint256 _amount);allowance(address _owner, address _spender);balanceOf(address _owner);transfer(address _to, uint256 _amount);approve(address _spender, uint256 _amount);allowance(address _owner, address _spender);payOut(address _recipient, uint _amount);ManagedAccount(address _owner, bool _payOwnerOnly);payOut(address _recipient, uint _amount);createTokenProxy(address _tokenHolder);refund();divisor();createTokenProxy(address _tokenHolder);refund();divisor();receiveEther();newProposal(address _recipient, uint _amount, string _description, bytes _transactionData, uint _debatingPeriod, bool _newCurator);checkProposalCode(uint _proposalID, address _recipient, uint _amount, bytes _transactionData);vote(uint _proposalID, bool _supportsProposal);executeProposal(uint _proposalID, bytes _transactionData);splitDAO(uint _proposalID, address _newCurator);newContract(address _newContract);changeAllowedRecipients(address _recipient, bool _allowed);changeProposalDeposit(uint _proposalDeposit);retrieveDAOReward(bool _toMembers);getMyReward();withdrawRewardFor(address _account);transferWithoutReward(address _to, uint256 _amount);transferFromWithoutReward(address _from, address _to, uint256 _amount);halveMinQuorum();numberOfProposals();getNewDAOAddress(uint _proposalID);isBlocked(address _account);unblockMe()"
yaronvel/smart_contracts,EZshirt/post_contract.sol,"PostIL( );submit( string _confirmation_number, int8 _day, int8 _month, int16 _year, string _king_name );__callback(bytes32 myid, string result);update(uint delay, string _confirmation_number);change_king_name( string new_name );set_for_sale( uint min_price );buy_king( );king_of_returning_shirts();is_king_found( );is_king_for_sale( );get_king_price( );get_king_address( );date_string( int8 _day, int8 _month, int16 _year )"
Lunyr/crowdsale-contracts,contracts/NewToken.sol,"NewToken(address _upgradeAgent);createToken(address _target, uint256 _amount);transfer(address _to, uint256 _value);transferFrom(address _from, address _to, uint256 _value);approve(address _spender, uint256 _value);allowance(address _owner, address _spender);balanceOf(address _owner);UpgradeAgent(address _oldToken);safetyInvariantCheck(uint256 _value);setNewToken(address _newToken);setUpgradeHasBegun();upgradeFrom(address _from, uint256 _value)"
winsvega/solidity,test/libsolidity/semanticTests/viaYul/comparison_functions.sol,equal();unequal()
bobsummerwill/solidity,test/libsolidity/semanticTests/viaYul/comparison_functions.sol,equal();unequal()
stanta/darfchain,ICO/contracts/PreICOProxyBuyer.sol,"PreICOProxyBuyer(address _owner, uint _freezeEndsAt, uint _weiMinimumLimit, uint _weiCap);getToken();invest();buyForEverybody();getClaimAmount(address investor);getClaimLeft(address investor);claimAll();claim(uint amount);refund();setCrowdsale(Crowdsale _crowdsale);getState()"
ethereum/solidity,test/libsolidity/syntaxTests/parsing/single_modifier_arg_trailing_comma.sol,""
winsvega/solidity,test/libsolidity/syntaxTests/types/function_types/function_state_mutability_success.sol,internalPureFunc(uint256 x);internalViewFunc(uint256 x);internalMutableFunc(uint256 x);externalPureFunc(uint256 x);externalViewFunc(uint256 x);externalPayableFunc(uint256 x);externalMutableFunc(uint256 x);funcTakesInternalPure(function(uint256);funcTakesInternalView(function(uint256);funcTakesInternalMutable(function(uint256);funcTakesExternalPure(function(uint256);funcTakesExternalView(function(uint256);funcTakesExternalPayable(function(uint256);funcTakesExternalMutable(function(uint256);tests()
bobsummerwill/solidity,test/libsolidity/syntaxTests/types/function_types/function_state_mutability_success.sol,internalPureFunc(uint256 x);internalViewFunc(uint256 x);internalMutableFunc(uint256 x);externalPureFunc(uint256 x);externalViewFunc(uint256 x);externalPayableFunc(uint256 x);externalMutableFunc(uint256 x);funcTakesInternalPure(function(uint256);funcTakesInternalView(function(uint256);funcTakesInternalMutable(function(uint256);funcTakesExternalPure(function(uint256);funcTakesExternalView(function(uint256);funcTakesExternalPayable(function(uint256);funcTakesExternalMutable(function(uint256);tests()
ethereum/solidity,test/libsolidity/syntaxTests/types/function_types/function_state_mutability_success.sol,internalPureFunc(uint256 x);internalViewFunc(uint256 x);internalMutableFunc(uint256 x);externalPureFunc(uint256 x);externalViewFunc(uint256 x);externalPayableFunc(uint256 x);externalMutableFunc(uint256 x);funcTakesInternalPure(function(uint256);funcTakesInternalView(function(uint256);funcTakesInternalMutable(function(uint256);funcTakesExternalPure(function(uint256);funcTakesExternalView(function(uint256);funcTakesExternalPayable(function(uint256);funcTakesExternalMutable(function(uint256);tests()
ethereum/solidity,test/libsolidity/smtCheckerTests/types/function_type_call.sol,f(function(uint);h()
ethereum/solidity,test/libsolidity/syntaxTests/parsing/single_function_param_trailing_comma.sol,""
sonm-io/core,blockchain/source/contracts/TestnetFaucet.sol,"getTokens();mintToken(address target, uint256 mintedAmount);getTokenAddress()"
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.114/node_modules/prettier-plugin-solidity/tests/AllSolidityFeatures/AllSolidityFeatures.sol,"f();c();test();getChoice();Base(uint i);Derived(uint i);f(uint x, uint y);f(uint x, uint y);g(uint pos);setData(uint pos, uint value);getData(uint pos);sendHalf(address addr);insert(data storage self, uint value);remove(data storage self, uint value);contains(data storage self, uint value);iterate_start(data storage self);iterate_valid(data storage self, uint index);iterate_advance(data storage self, uint index);iterate_get(data storage self, uint index);insert(uint v);sum();DualIndex();set(uint key1, uint key2, uint value);transfer_ownership(address _admin);lookup(uint key1, uint key2);something();sum(uint[] storage self);someFunction();fun();at(address _addr);test();get();returnNumber(uint number);alloc();ham(S storage s1, uint[] storage arr);getMyTuple();abstain();foobar();foobar();a();a();foo();doStuff();doStuff();foo();bar();baz();long();foo()"
benjaminion/solidity,test/compilationTests/MultiSigWallet/MultiSigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
michinbear/solidity,test/compilationTests/MultiSigWallet/MultiSigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
orbro/eth-enablers,greedPit.sol,GreedPit();function();init();jumpIn();rand(uint max);addNewUser(address Address);collectFees();changeOwner(address newOwner);changeBaseMultiplier(uint multi);changeMaxMultiplier(uint multi);changeFee(uint fee);setNickname(string name);currentBalance();heroOfThePit();userName(address Address);totalRescues();multipliers();pitFee();nextPayoutGoal();unclaimedFees();totalEntries();totalUsers();awaitingPayout();entryDetails(uint index);userId(address user);userTokens(address user);userRescues(address user);userProfits();recycle()
crypto-coder/Tokens,Token_Contracts/contracts/TimeDecayingTokenEnvironment.sol,TimeDecayingTokenEnvironment(uint256 _currentTime)
Opus-foundation/contracts,contracts/OpusToken.sol,"OpusToken();halt();unhalt();buy();buyRecipient(address recipient);burn(uint256 _value);proposeFoundationTransfer(address newFoundation);cancelFoundationTransfer();acceptFoundationTransfer();setMultisig(address addr);transfer(address _to, uint256 _value, bytes _data);transfer(address _to, uint256 _value);transferFrom(address _from, address _to, uint256 _value);returnRate();perAddressCap();preCrowdsaleOn();crowdsaleOn();getEtherRaised();getTokenSold()"
ethereum/solidity,test/libsolidity/syntaxTests/parsing/function_type_state_variable.sol,""
ethereum/solidity,test/libsolidity/syntaxTests/immutable/function_pointer_initializing.sol,f()
EtherDogs/HeritableWallet,contracts/HeritableWallet.sol,"HeritableWallet(address walletBeneficiary, address walletOwner, uint periodInDays);checkIn();setCheckInPeriod(uint periodInDays);sendFunds(address destination, uint amount, bytes data);transferOwnership(address newOwner);setHeir(address heir, uint8 inheritancePoints, uint periodInDays);unlock();claimInheritance();destroy();getOwner();getBeneficiary()"
EtherDogs/PersonalBank,contracts/HeritableWallet.sol,"HeritableWallet(address walletBeneficiary, address walletOwner, uint periodInDays);checkIn();setCheckInPeriod(uint periodInDays);sendFunds(address destination, uint amount, bytes data);transferOwnership(address newOwner);setHeir(address heir, uint8 inheritancePoints, uint periodInDays);unlock();claimInheritance();destroy();getOwner();getBeneficiary()"
customizablebasicincome/cbi-tokensale,node_modules/zeppelin-solidity/contracts/Bounty.sol,createTarget();deployContract();claim(Target target);checkInvariant()
pash7ka/zeppelin-solidity,contracts/Bounty.sol,createTarget();deployContract();claim(Target target);checkInvariant()
iswarm/p2pCny,contracts/Bounty.sol,createTarget();deployContract();claim(Target target);checkInvariant()
LindaHealthcareICO/linda-crowdsale,contracts/zeppelin/Bounty.sol,createTarget();deployContract();claim(Target target);checkInvariant()
readevalprint/aragon-core,contracts/zeppelin/Bounty.sol,createTarget();deployContract();claim(Target target);checkInvariant()
cinderblockchain/cindertoken,contracts/Bounty.sol,createTarget();deployContract();claim(Target target);checkInvariant()
pz7/liquet,node_modules/zeppelin-solidity/contracts/Bounty.sol,createTarget();deployContract();claim(Target target);checkInvariant()
cashpokerpro-dev/cash-smartcontracts,contracts/Bounty.sol,createTarget();deployContract();claim(Target target);checkInvariant()
ethereum/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/570_function_type_undeclared_type.sol,a(function(Nested)
stanta/darfchain,ICO/contracts/GnosisWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
winsvega/solidity,test/libsolidity/syntaxTests/types/mapping/function_type_argument_external.sol,f(function(mapping(uint=>uint)
bobsummerwill/solidity,test/libsolidity/syntaxTests/types/mapping/function_type_argument_external.sol,f(function(mapping(uint=>uint)
winsvega/solidity,test/libsolidity/syntaxTests/memberLookup/member_value_not_unique.sol,value(uint256);value(uint8);f();g()
bobsummerwill/solidity,test/libsolidity/syntaxTests/memberLookup/member_value_not_unique.sol,value(uint256);value(uint8);f();g()
ethereum/solidity,test/libsolidity/semanticTests/functionTypes/mapping_of_functions.sol,f()
ramvi/iotmarket,contracts/SimpleDataMarket.sol,"register(string key, string desc, bool active, string help, address payTo, uint secondsLength, uint price);update(string key, string desc, bool active, string help, address payTo, uint secondsLength, uint256 price);toggleActive(string key);isRegistered(string key);getRecordAtIndex(uint rindex);getRecord(string key);getOwner(string key);getTime(string key);getTotalRecords();buyAccess(string key);checkAccess(string key, address _buyer);withdraw(string key);balance(string key)"
khmuminov/TokenSale,TokenSale.sol,"mul(uint256 a, uint256 b);div(uint256 a, uint256 b);sub(uint256 a, uint256 b);add(uint256 a, uint256 b);balanceOf(address _address);transferFromOwner(address _to, uint256 _value);setOwner(address _owner);setRate(uint _exchangeRate);setToken(address _icoToken);balanceOf(address _address);transfer(address _to, uint _value);transferByOwner(uint _value);convert();exchangeToIco(address owner);TokenSale();kill();transferFromOwner(address _to, uint256 _value);min(uint a, uint b)"
ethereum/solidity,test/cmdlineTests/optimizer_inliner_dynamic_reference_constructor/input.sol,a();h();f()
mixbytes/storiqa_ico,contracts/STQCrowdsale.sol,"STQCrowdsale(address[] _owners, address _token, address _funds, address _teamTokens);buy();iaOnInvested(address investor, uint payment, bool usingPaymentChannel);pause();unpause();fail();setToken(address _token);setFundsRegistry(address _funds);checkTime();distributeBonuses(uint investorsLimit);createMorePaymentChannels(uint limit);finishICO();changeState(IcoState _newState);onSuccess();onFailure();getLargePaymentBonus(uint payment);calcSTQAmount(uint _wei, uint extraBonus);recordInvestment(address investor, uint payment, uint timeBonus);getStartTime();getEndTime();getCurrentTime();getMinFunds();getMaximumFunds();getTotalInvested();getLastMaxInvestments()"
ethereum/solidity,test/libsolidity/syntaxTests/structs/member_type_eq_name.sol,f(function(S memory)
DigixGlobal/ethereum-ruby,contracts/classic/DigixbotEthereum.sol,"DigixbotEthereum(address _config);depositCoin(bytes32 _userid, uint _amount);getConfig();getUsersContract();getBotContract();getUserId(address _address);getUserAccount(bytes32 _userid);sendCoin(bytes32 _sender, bytes32 _recipient, uint _amt);withdrawCoin(bytes32 _user, uint _amount);withdrawCoinExt(uint _amount);getBalance(bytes32 _uid);totalBalance()"
marekkirejczyk/ethereum.rb,contracts/classic/DigixbotEthereum.sol,"DigixbotEthereum(address _config);depositCoin(bytes32 _userid, uint _amount);getConfig();getUsersContract();getBotContract();getUserId(address _address);getUserAccount(bytes32 _userid);sendCoin(bytes32 _sender, bytes32 _recipient, uint _amt);withdrawCoin(bytes32 _user, uint _amount);withdrawCoinExt(uint _amount);getBalance(bytes32 _uid);totalBalance()"
EthWorks/ethereum.rb,contracts/classic/DigixbotEthereum.sol,"DigixbotEthereum(address _config);depositCoin(bytes32 _userid, uint _amount);getConfig();getUsersContract();getBotContract();getUserId(address _address);getUserAccount(bytes32 _userid);sendCoin(bytes32 _sender, bytes32 _recipient, uint _amt);withdrawCoin(bytes32 _user, uint _amount);withdrawCoinExt(uint _amount);getBalance(bytes32 _uid);totalBalance()"
Cryptonomica/cryptonomica,src/main/webapp/app/ethidtokens/EthID.sol,"mul(uint256 a, uint256 b);div(uint256 a, uint256 b);sub(uint256 a, uint256 b);add(uint256 a, uint256 b);mod(uint256 a, uint256 b);receiveApproval(address _from, uint256 _value, address _inContract, bytes _extraData);tokenFallback(address _from, uint256 _value, bytes _extraData);name();symbol();decimals();totalSupply();balanceOf(address _owner);allowance(address _owner, address _spender);changeOwnerStart(address _newOwner);changeOwnerAccept();takeDividends(uint256 valueInTokens);withdrawAllByOwner();transfer(address _to, uint256 _value);transferFrom(address _from, address _to, uint256 _value);approve(address _spender, uint256 _value);approveAndCall(address _spender, uint256 _value, bytes _extraData);approveAllAndCall(address _spender, bytes _extraData);transferAndCall(address _to, uint256 _value, bytes _extraData);transferAllAndCall(address _to, bytes _extraData)"
Cryptonomica/cryptonomica,src/main/webapp/app/ethidtokens/backups/EthID.ver.1.0.sol,"mul(uint256 a, uint256 b);div(uint256 a, uint256 b);sub(uint256 a, uint256 b);add(uint256 a, uint256 b);mod(uint256 a, uint256 b);receiveApproval(address _from, uint256 _value, address _inContract, bytes _extraData);tokenFallback(address _from, uint256 _value, bytes _extraData);name();symbol();decimals();totalSupply();balanceOf(address _owner);allowance(address _owner, address _spender);changeOwnerStart(address _newOwner);changeOwnerAccept();takeDividends(uint256 valueInTokens);withdrawAllByOwner();transfer(address _to, uint256 _value);transferFrom(address _from, address _to, uint256 _value);approve(address _spender, uint256 _value);approveAndCall(address _spender, uint256 _value, bytes _extraData);approveAllAndCall(address _spender, bytes _extraData);transferAndCall(address _to, uint256 _value, bytes _extraData);transferAllAndCall(address _to, bytes _extraData)"
ethereum/solidity,test/libsolidity/syntaxTests/functionTypes/function_type_variable_external_internal.sol,fa(bytes memory)
daostack/daostack,contracts/controller/Controller.sol,"mintReputation(uint256 _amount, address _to, address _avatar);burnReputation(uint256 _amount, address _from, address _avatar);mintTokens(uint256 _amount, address _beneficiary, address _avatar);registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions, address _avatar);unregisterScheme( address _scheme, address _avatar);unregisterSelf(address _avatar);addGlobalConstraint(address _globalConstraint, bytes32 _params, address _avatar);upgradeController(address _newController, Avatar _avatar);genericCall(address _contract, bytes calldata _data, Avatar _avatar, uint256 _value);sendEther(uint256 _amountInWei, address payable _to, Avatar _avatar);externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value, Avatar _avatar);externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value, Avatar _avatar);metaData(string calldata _metaData, Avatar _avatar);getNativeReputation(address _avatar);isSchemeRegistered(address _scheme, address _avatar);getSchemeParameters(address _scheme, address _avatar);getSchemePermissions(address _scheme, address _avatar);getGlobalConstraintParameters(address _globalConstraint, address);globalConstraintsCount(address _avatar);isGlobalConstraintRegistered(address _globalConstraint, address _avatar);_isSchemeRegistered(address _scheme)"
hsavit1/gosofi_webpage,node_modules/truffle-contract/test/Example.sol,Example(uint val);setValue(uint val);getValue();parrot(uint val);triggerEvent()
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.114/node_modules/prettier-plugin-solidity/tests/Etc/Etc.sol,ifBlockInOneLine(uint a);forWithoutBlock();fun(uint256 a)
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.118/node_modules/prettier-plugin-solidity/tests/Etc/Etc.sol,ifBlockInOneLine(uint a);forWithoutBlock();fun(uint256 a)
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.116/node_modules/prettier-plugin-solidity/tests/Etc/Etc.sol,ifBlockInOneLine(uint a);forWithoutBlock();fun(uint256 a)
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.120/node_modules/prettier-plugin-solidity/tests/Etc/Etc.sol,ifBlockInOneLine(uint a);forWithoutBlock();fun(uint256 a)
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.119/node_modules/prettier-plugin-solidity/tests/Etc/Etc.sol,ifBlockInOneLine(uint a);forWithoutBlock();fun(uint256 a)
Otonomos/smart-equity,Contracts/SSE.sol,"SSE();setInitialState(address[] _founders, uint[] _founderSSE, address[] _APAddresses, uint[100][] _APSchedule, uint[] _revForecast, uint _forecastVarPercent, uint _MaxNoOfConsecPeriodsInRed, uint _DIVDPayoutPercent, uint _DIVDStartDate);invest();transferOwnership(address bene, uint amount);processAP();createInvoice(uint amount);processAR(uint invId);processARvRevForecast();processDIVD();initVote(uint daysToExpire);vote();getStateOfPlan();getStartDateOfPlan();getAPAddresses();getAPAddressSize();getAPSchedule();getPeriodicalBudget();getTotalPeriods();getTotalBudget();getLastAPPeriod();getRevForecast();getInvestorIndex();getInvestorArray();getInvestmentArray();getTotalInvestment();getARSchedule();getARInvTable();getARInvIndexTable();getPeriodicalAR();getPeriodicalPnL();getInvId();getInvArray();getDIVDPayoutPercent();getLastDIVDPeriod();getPaidDIVDSchedule()"
Dicoiner/irianna-solidity,contracts/Bounty.sol,createTarget();deployContract();claim(Target target);checkInvariant()
eris-ltd/eris-compilers,vendor/github.com/monax/cli/tests/jobs_fixtures/app37-fallback_function/fallback.sol,""
eris-ltd/eris,tests/jobs_fixtures/app37-fallback_function/fallback.sol,""
monax/cli,tests/jobs_fixtures/app37-fallback_function/fallback.sol,""
monax/monax,tests/jobs_fixtures/app37-fallback_function/fallback.sol,""
eris-ltd/lllc-server,vendor/github.com/monax/cli/tests/jobs_fixtures/app37-fallback_function/fallback.sol,""
eris-ltd/eris-cli,tests/jobs_fixtures/app37-fallback_function/fallback.sol,""
ethereum/solidity,test/libsolidity/syntaxTests/parsing/calling_function.sol,f()
davidoevans/react-redux-dapp,contracts/SimpleWallet.sol,"SimpleWallet();sendFunds(uint amount, address receiver);allowAddressToSendMoney(address _address);disallowAddressToSendMoney(address _address);isAllowedToSend(address _address);killWallet()"
benjaminion/solidity,test/libsolidity/syntaxTests/functionTypes/internal_function_as_external_parameter.sol,f(function(uint)
ethereum/solidity,test/libsolidity/semanticTests/functionTypes/function_type_library_internal.sol,"sum(uint256 a, uint256 b);f(uint256[] memory x)"
winsvega/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/078_fallback_function_twice.sol,""
Dsummers91/family-wallet-etherum-contract,contracts/FamilyWallet.sol,nextAllowancePeriod(bool force);getAllowance();approveRefund();refundBalance(address addr);getChildByAddress(address addr);getAdultByAddress(address addr);getChild(address addr);getAllowanceAmount(address addr);getChildsAmount(address addr);getDefaultAllowance(string addr)
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.116/node_modules/prettier-plugin-solidity/tests/AllSolidityFeatures/AllSolidityFeatures.sol,"f();c();test();getChoice();Base(uint i);Derived(uint i);f(uint x, uint y);f(uint x, uint y);g(uint pos);setData(uint pos, uint value);getData(uint pos);sendHalf(address addr);insert(data storage self, uint value);remove(data storage self, uint value);contains(data storage self, uint value);iterate_start(data storage self);iterate_valid(data storage self, uint index);iterate_advance(data storage self, uint index);iterate_get(data storage self, uint index);insert(uint v);sum();DualIndex();set(uint key1, uint key2, uint value);transfer_ownership(address _admin);lookup(uint key1, uint key2);something();sum(uint[] storage self);someFunction();fun();at(address _addr);test();get();returnNumber(uint number);alloc();ham(S storage s1, uint[] storage arr);getMyTuple();abstain();foobar();foobar();a();a();foo();doStuff();doStuff();foo();bar();baz();long();foo();f();g();mul(uint256 x, uint256 y)"
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.119/node_modules/prettier-plugin-solidity/tests/AllSolidityFeatures/AllSolidityFeatures.sol,"f();c();test();getChoice();Base(uint i);Derived(uint i);f(uint x, uint y);f(uint x, uint y);g(uint pos);setData(uint pos, uint value);getData(uint pos);sendHalf(address addr);insert(data storage self, uint value);remove(data storage self, uint value);contains(data storage self, uint value);iterate_start(data storage self);iterate_valid(data storage self, uint index);iterate_advance(data storage self, uint index);iterate_get(data storage self, uint index);insert(uint v);sum();DualIndex();set(uint key1, uint key2, uint value);transfer_ownership(address _admin);lookup(uint key1, uint key2);something();sum(uint[] storage self);someFunction();fun();at(address _addr);test();get();returnNumber(uint number);alloc();ham(S storage s1, uint[] storage arr);getMyTuple();abstain();foobar();foobar();a();a();foo();doStuff();doStuff();foo();bar();baz();long();foo();f();g();mul(uint256 x, uint256 y)"
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.120/node_modules/prettier-plugin-solidity/tests/AllSolidityFeatures/AllSolidityFeatures.sol,"f();c();test();getChoice();Base(uint i);Derived(uint i);f(uint x, uint y);f(uint x, uint y);g(uint pos);setData(uint pos, uint value);getData(uint pos);sendHalf(address addr);insert(data storage self, uint value);remove(data storage self, uint value);contains(data storage self, uint value);iterate_start(data storage self);iterate_valid(data storage self, uint index);iterate_advance(data storage self, uint index);iterate_get(data storage self, uint index);insert(uint v);sum();DualIndex();set(uint key1, uint key2, uint value);transfer_ownership(address _admin);lookup(uint key1, uint key2);something();sum(uint[] storage self);someFunction();fun();at(address _addr);test();get();returnNumber(uint number);alloc();ham(S storage s1, uint[] storage arr);getMyTuple();abstain();foobar();foobar();a();a();foo();doStuff();doStuff();foo();bar();baz();long();foo();f();g();mul(uint256 x, uint256 y)"
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.118/node_modules/prettier-plugin-solidity/tests/AllSolidityFeatures/AllSolidityFeatures.sol,"f();c();test();getChoice();Base(uint i);Derived(uint i);f(uint x, uint y);f(uint x, uint y);g(uint pos);setData(uint pos, uint value);getData(uint pos);sendHalf(address addr);insert(data storage self, uint value);remove(data storage self, uint value);contains(data storage self, uint value);iterate_start(data storage self);iterate_valid(data storage self, uint index);iterate_advance(data storage self, uint index);iterate_get(data storage self, uint index);insert(uint v);sum();DualIndex();set(uint key1, uint key2, uint value);transfer_ownership(address _admin);lookup(uint key1, uint key2);something();sum(uint[] storage self);someFunction();fun();at(address _addr);test();get();returnNumber(uint number);alloc();ham(S storage s1, uint[] storage arr);getMyTuple();abstain();foobar();foobar();a();a();foo();doStuff();doStuff();foo();bar();baz();long();foo();f();g();mul(uint256 x, uint256 y)"
winsvega/solidity,test/libsolidity/syntaxTests/functionTypes/function_type.sol,f()
bobsummerwill/solidity,test/libsolidity/syntaxTests/functionTypes/function_type.sol,f()
benjaminion/solidity,test/libsolidity/syntaxTests/functionTypes/function_type.sol,f()
orbro/eth-enablers,wallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
ethereum/btcrelay,deploy/wallet/wallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
jaakmusic/go-ethereum,jaak/contract/jaak.sol,"Jaak();getTracks(uint offset, uint count);trackCount();getTracksByArtist(address id, uint offset, uint count);artistTrackCount(address id);getTrackByArtist(address id, uint index);play(bytes32 id, address streamer, address jaaker);register(bytes32 id, address artist);clearTracks();unregister(bytes32 id);transfer(address from, address to, uint256 amount);withdraw(address from, address to, uint amount)"
sc-forks/solidity-coverage,test/sources/solidity/contracts/app/Wallet.sol,"transferPayment(uint payment, address payable recipient);sendPayment(uint payment, address payable recipient);getBalance()"
misrab/gethools,contracts/multisig.sol,"multisig(address[] _parties, uint _required_accepts);accept();kill()"
manishbisht/Udacity,Blockchain Developer Nanodegree/P7 - FlightSurety/contracts/FlightSuretyData.sol,"isOperational();setOperatingStatus(bool mode);getAirlineVotes(address newAirline);addAirlineVotes(address newAirline, address senderAddress);isAirlineVoted(address newAirline, address senderAddress);registerAirline(address newAirline);isAirlineRegistered(address newAirline);activateAirline(address airlineAddress);isAirlineActivated(address airlineAddress);getRegisteredAirlines();getActiveAirlines();buyInsurance(address airline, string flight, uint256 timestamp, address passenger, uint256 insuranceAmount);claimInsuranceAmount(address airline, string flight, uint256 timestamp, address airlineAddress, address passenger);withdrawAmount(address senderAddress);fund(address senderAddress);getFlightKey(address airline, string memory flight, uint256 timestamp)"
dob/auctionhouse,contracts/AuctionHouse.sol,"AuctionHouse();partyOwnsAsset(address _party, address _contract, string _recordId);getAuction(uint idx);getAuctionCount();getStatus(uint idx);getAuctionsCountForUser(address addr);getAuctionIdForUserAndIdx(address addr, uint idx);getActiveContractRecordConcat(string _contractRecordConcat);activateAuction(uint auctionId);cancelAuction(uint auctionId);getBidCountForAuction(uint auctionId);getBidForAuctionByIdx(uint auctionId, uint idx);placeBid(uint auctionId);getRefundValue();withdrawRefund();endAuction(uint auctionId);strConcat(string _a, string _b);addrToString(address x)"
tokenai/tokenai-network-token,contracts/TokenAiContribution.sol,"isContribPeriodRunning();contribute();contributeWithAddress(address contributor);compensateContributors(uint offset, uint limit);allocatePresaleTokens(address contributor, uint weiAmount, uint price);priceForStage(uint8 stage);stageForDate(uint dateTime);getPrice(uint dateTime);enableContribPeriod();setMinContribAmount(uint _minContribAmount);setTokenAiNetworkToken(address _tokenAiNetworkToken);enableTokenAiTransfers();finalizeContributionEvent();claimTokensFromTokenAiNetworkToken(address _token);proxyPayment(address _owner);onTransfer(address _from, address _to, uint _amount);onApprove(address _owner, address _spender, uint _amount);isTokenSaleToken(address tokenAddr);getContribPeriod();getConfiguration();getContributor(address contributorAddress);getUncompensatedContributors(uint offset, uint limit)"
ethereum/solidity,test/libsolidity/syntaxTests/parsing/multiple_function_param_trailing_comma.sol,""
b-mueller/mythril,tests/testdata/input_contracts/rubixi.sol,function();dynamicPyramid();collectAllFees();collectFeesInEther(uint _amt);collectPercentOfFees(uint _pcent);changeOwner(address payable _owner);changeMultiplier(uint _mult);changeFeePercentage(uint _fee);currentMultiplier();currentFeePercentage();currentPyramidBalanceApproximately();nextPayoutWhenPyramidBalanceTotalsApproximately();feesSeperateFromBalanceApproximately();totalParticipants();numberOfParticipantsWaitingForPayout();participantDetails(uint orderInPyramid);init();addPayout(uint _fee)
b-mueller/mythril,solidity_examples/rubixi.sol,function();dynamicPyramid();collectAllFees();collectFeesInEther(uint _amt);collectPercentOfFees(uint _pcent);changeOwner(address payable _owner);changeMultiplier(uint _mult);changeFeePercentage(uint _fee);currentMultiplier();currentFeePercentage();currentPyramidBalanceApproximately();nextPayoutWhenPyramidBalanceTotalsApproximately();feesSeperateFromBalanceApproximately();totalParticipants();numberOfParticipantsWaitingForPayout();participantDetails(uint orderInPyramid);init();addPayout(uint _fee)
crypto-coder/Tokens,Token_Contracts/contracts/StairStepDecayingTokenFunction.sol,"StairStepDecayingTokenFunction();getFunctionType();executeDecayFunction(uint256 _amount, int256 _rangeLength, int256 _distanceInRange, uint256 _startPercent, uint256 _endPercent)"
adklempner/automte-exchange-contracts,contracts/DisputeResolver.sol,"DisputeResolver(address[] _owners, address _disputeInterface);setOraclizeGasPrice(uint gasPrice);setOraclizeGasLimit(uint gasLimit);withdraw(uint amount);assignDispute(string _uid, address _seller, string country);assignDispute(string _uid, address _seller, string country, address assignee);__callback(bytes32 id, string result);resolveDisputeSeller(string uid);resolveDisputeBuyer(string uid);getOwner(uint ownerIndex);isOwner(address _addr);isContract(address addr)"
winsvega/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/196_integer_boolean_or.sol,""
mitchellfchan/IKB,theRiver.sol,""
misrab/gethools,testdata/out.sol,"b();b();b();Sample();function();x(uint a, address b)"
winsvega/solidity,test/libsolidity/smtCheckerTests/types/function_type_as_argument.sol,f(function(uint)
bobsummerwill/solidity,test/libsolidity/smtCheckerTests/types/function_type_as_argument.sol,f(function(uint)
winsvega/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/571_function_type_undeclared_type_external.sol,a(function(Nested)
bobsummerwill/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/571_function_type_undeclared_type_external.sol,a(function(Nested)
ethereum/solidity,test/libsolidity/semanticTests/inheritance/base_access_to_function_type_variables.sol,set();g();h()
winsvega/solidity,test/libsolidity/syntaxTests/parsing/multiple_event_arg_trailing_comma.sol,""
bobsummerwill/solidity,test/libsolidity/syntaxTests/parsing/multiple_event_arg_trailing_comma.sol,""
winsvega/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/203_struct_reference_compare_operators.sol,""
stanta/darfchain,ICO/contracts/EthTranchePricing.sol,"EthTranchePricing(uint[] _tranches);setPreicoAddress(address preicoAddress, uint pricePerToken);getTranche(uint n);getFirstTranche();getLastTranche();getPricingStartsAt();getPricingEndsAt();isSane(address _crowdsale);getCurrentTranche(uint weiRaised);getCurrentPrice(uint weiRaised);calculatePrice(uint value, uint weiRaised, uint tokensSold, address msgSender, uint decimals)"
livepeer/protocol,contracts/test/RevertProxy.sol,execute(address _target)
winsvega/solidity,test/libsolidity/ASTJSON/function_type.sol,f(function()
bobsummerwill/solidity,test/libsolidity/ASTJSON/function_type.sol,f(function()
ethereum/solidity,test/libsolidity/ASTJSON/function_type.sol,f(function()
ethereum/solidity,test/libsolidity/semanticTests/array/copying/copy_internal_function_array_to_storage.sol,one();two()
winsvega/solidity,test/libsolidity/syntaxTests/parsing/function_type_as_parameter.sol,f(function(uint)
bobsummerwill/solidity,test/libsolidity/syntaxTests/parsing/function_type_as_parameter.sol,f(function(uint)
mixbytes/storiqa_ico,contracts/STQPreSale.sol,"STQPreSale(address token, address funds);buy();amIOwner()"
Storiqa/ico_smart_contract,contracts/STQPreSale.sol,"STQPreSale(address token, address funds);buy();amIOwner()"
winsvega/solidity,test/libsolidity/syntaxTests/functionTypes/function_types_internal_visibility_error.sol,""
bobsummerwill/solidity,test/libsolidity/syntaxTests/functionTypes/function_types_internal_visibility_error.sol,""
benjaminion/solidity,test/libsolidity/syntaxTests/functionTypes/function_types_internal_visibility_error.sol,""
acebusters/safe-token-sale,test/helpers/ProxyMock.sol,"ProxyMock();forward(address _destination, uint _value, bytes _data);tokenFallback(address _from, uint _value, bytes _data)"
sc-forks/solidity-coverage,test/sources/solidity/contracts/statements/fn-struct.sol,""
ethereum/remix,remix-analyzer/test/analysis/test-contracts/solidity-v0.4.24/blockLevelCompare.sol,""
NathanLewis/surefair,Insurance - Copy.sol,"getClientData(address client);verifyClaim(uint64 quoteId);addOracle(address oracleAddress);getAcceptedOracles();insureClient(address _oracle, address _client, uint64 _oracleQuoteId);clientClaim(uint256 _client, uint64 _contractId);Syndicate();name();symbol();decimals();balanceOf(address _owner);transfer(address _to, uint256 _value);transferFrom(address _from, address _to, uint256 _value);approve(address _spender, uint256 _value);allowance(address _owner, address _spender);getStats()"
ethereum/solidity,test/libsolidity/semanticTests/functionTypes/function_delete_stack.sol,a();test()
Dsummers91/openfund,blockchain/contracts/OpenFund.sol,"OpenFund(bytes32 _user, string _repo);__callback(bytes32 myid, string result);executeWithdrawal();updateAddress();withdraw(uint value)"
ethereum/solidity,test/libsolidity/semanticTests/uninitializedFunctionPointer/invalidStoredInConstructor.sol,f();f()
Jake-Gillberg/git-vote,contracts/TestERC20.sol,"safeMul(uint a, uint b);safeSub(uint a, uint b);safeAdd(uint a, uint b);assert(bool assertion);balanceOf(address who);allowance(address owner, address spender);transfer(address to, uint value);transferFrom(address from, address to, uint value);approve(address spender, uint value);transfer(address _to, uint _value);transferFrom(address _from, address _to, uint _value);balanceOf(address _owner);approve(address _spender, uint _value);allowance(address _owner, address _spender)"
pembient/pembicoin,contracts/PembiCoinICO.sol,"PembiCoinICO();refund();payout();setActive();setIdle();setSuccessful();setFailed();getContribution(uint256 _i);safeAdd(uint256 a, uint256 b)"
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.114/node_modules/prettier-plugin-solidity/tests/PrettierIgnore/PrettierIgnore.sol,""
daukantas/cpp-ethereum,mix/stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
BreemsEmporiumMensToiletriesFragrances/cpp-ethereum,mix/stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
hanyoungpark/cpp-ethereum,mix/stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
anthony-cros/cpp-ethereum,mix/stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
Sorceror32/.-git-clone-https-github.com-ethereum-cpp-ethereum,mix/stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
alexvandesande/cpp-ethereum,mix/stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
yann300/mix,stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
cyperx/cpp-ethereum,mix/stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
PaulGrey30/go-get--u-github.com-tools-godep,mix/stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
Sorceror32/go-get--u-github.com-tools-godep,mix/stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
imapp-pl/cpp-ethereum,mix/stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
expanse-project/cpp-expanse,mix/stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
pompomJuice/cpp-ethereum,mix/stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
tomthebuzz/mix,stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
tjade273/cpp-ethereum,mix/stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
chriseth/mix,stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
AmericanSundown/cpp-ethereum,mix/stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
LefterisJP/mix,stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
ethereum/mix,stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
cinnamoncoin/cpp-ethereum,mix/stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
ashleyblackmore/cpp-ethereum,mix/stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
kleetus/cpp-ethereum,mix/stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
subtly/cpp-ethereum-micro,mix/stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
vaporry/cpp-ethereum,mix/stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
chriseth/cpp-ethereum,mix/stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
PaulGrey30/.-git-clone-https-github.com-ethereum-cpp-ethereum,mix/stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
LianaHus/mix,stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
tpruvot/cpp-ethereum,mix/stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
vaporry/mix,stdc/std.sol,"owned();kill();register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service);getAddress(bytes32 _name);getName(address _owner);NameReg();register(bytes32 name);unregister();addressOf(bytes32 name);nameOf(address addr);kill();register(bytes32 name);addressOf(bytes32 name);unregister();nameOf(address addr)"
iurimatias/embark-framework,dapps/tests/app/some_folder/test_contract.sol,SimpleStorage(uint initialValue);set(uint x);get()
DES-simeon/branche-contracts,proportional_crowdsale.sol,"BrancheProportionalCrowdsale(uint _durationInMinutes, uint _targetETH);_deposit();deposit();safebalance(uint bal);refund(address recipient);adminRefund(address deposit_addr, address recipient);withdrawRefund();fundOwner()"
ethereum/solidity,test/libsolidity/syntaxTests/events/internal_type.sol,""
apmilen/standard-token-sale,src/sale.sol,"time();postpone(uint startTime_);buy(uint price, address who, uint val, bool send);finalize();transferTokens(address tkn_, address dst, uint wad);setPresale(address who, bool what);postpone(uint startTime_);preDistribute(address who, uint val);appendTranch(uint floor_, uint rate_);preBuy(address who, uint val, bool send)"
ethereum/solidity,test/libsolidity/semanticTests/uninitializedFunctionPointer/invalidInConstructor.sol,f();f()
chenlian2015/eosEthMarketSample,contracts/OLLotteryContract.sol,setOneGroupJoinersCount(uint nCount);OCLotteryContract();getCurrentLotteryJoiners();getBalance();joinOneLottery();callBackForRequestRandom(bytes32 randomValue);getLotteryResultTotal(address joiner);withDrawMyBalance()
FiatCentralBank/fiatcoin,contracts/ownership/HasNoEther.sol,HasNoEther();reclaimEther()
nexusdev/dapple-test,spec/test.sol,"_target( address target );Test();expectEventsExact(address _target);fail();assertTrue(bool what, bytes error);fail(bytes error);log(bytes msg);log(bytes msg, uint i);assertTrue(bool what);assertTrue(bool what, bytes32 error);assertFalse(bool what);assertFalse(bool what, bytes32 error);assertEqDecimal(int a, int b, uint decimals);assertEqDecimal(uint a, uint b, uint decimals);assertEq(bool a, bool b, bytes32 err);assertEq(bool a, bool b);assertEq(uint a, uint b, bytes32 err);assertEq(uint a, uint b);assertEq(int a, int b, bytes32 err);assertEq(int a, int b);assertEq(address a, address b, bytes32 err);assertEq(address a, address b);assertEq(bytes memory _a, bytes memory _b);assertEq(string memory a, string memory b)"
ganchix/ETH_16_Ethereum,UNIT-4/splitterProject/contracts/Splitter.sol,"split(address friendOne, address friendTwo);withdraw()"
merlox/dapp-transactions,contracts/workingBackup/TransactionsManager.sol,"extractEther();getPendingTransactions();getPendingTransactionsSellerAddresses();getInstanceAddress(address sellerAddress);getCompletedTransactions();getInvoiceHashAddresses();killInstance(address instanceAddress, address instanceSellerAddress);kill()"
ethereum/solidity,test/libsolidity/semanticTests/uninitializedFunctionPointer/uninitialized_internal_storage_function_via_yul.sol,f()
ConsenSys/truffle,packages/decoder/test/current/contracts/DowngradeTest.sol,"run(AsymmetricTriple memory at, Ternary t, DowngradeTest dt, address payable ap);causeTrouble();shhImADecimal(int168 secretlyADecimal);enumSilliness(uint8 decoy1, uint8 decoy2, Ternary x, PositionOnHill y);decoy();emitParent();returnsStuff();decoy()"
ethereum/solidity,test/cmdlineTests/optimizer_inliner_dynamic_reference/input.sol,g();a();h();f()
erkmos/moeda,contracts/vendored/gnosis/MultiSigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
ethereum/solidity,test/libsolidity/semanticTests/libraries/internal_library_function_bound_to_external_function.sol,double(function(uint);identity(uint x);test(uint value)
woshidama323/hello-github,back/BetContract.sol,"toBytes(uint8 x);roundinfo();buy(uint256 _affCode);checkPrize(uint256 _pID, uint256 _affCode, bytes ticket);judge(uint256 pId, bytes ticket);withdraw();activate();updateNextRoundInfo();newRound();generateRandom()"
ethereum/solidity,test/libsolidity/syntaxTests/receiveEther/old_syntax.sol,""
radmen/eth-split,contracts/EthSplit.sol,"EthSplit(address[] shareholdersList, address donateTo);payout()"
ethereum/solidity,test/libsolidity/semanticTests/functionCall/call_internal_function_via_expression.sol,foo();get_ptr(function();associated();unassociated()
annihilatio/ido,contracts/MultiSigWallet.sol,"setToken(address _token);confirmSettingsChange(uint _txIndex);setFinishedTx();setLiveTx();setFreezeTx();transferTx(address _to, uint _value);setWhitelistTx(address _whitelist);addOwner(address _owner);removeOwner(address _owner);replaceOwner(address _owner, address _newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);addTransaction(address destination, uint value, bytes data);confirmTransaction(uint _transactionId);executeTransaction(uint _transactionId);revokeConfirmation(uint _transactionId);isConfirmed(uint _transactionId);isConfirmedSettingsRequest(uint _transactionId);viewSettingsChange(uint _txIndex);getConfirmationCount(uint _transactionId);getSettingsChangeConfirmationCount(uint _txIndex);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint _transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
ethereum/solidity,test/libsolidity/semanticTests/uninitializedFunctionPointer/store2.sol,run();z()
Spreadway/core,flow_auth/contracts/C.sol,"ff(string s);f(uint a, uint b)"
Spreadway/core,flow_manage/contracts/C.sol,"ff(string s);f(uint a, uint b)"
ethereum/solidity,test/libsolidity/smtCheckerTests/types/mapping_and_array_of_functions.sol,""
elementrem/solidity,test/compilationTests/MultiSigWallet/MultiSigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
ethereum/solidity,test/libsolidity/syntaxTests/functionTypes/internal_function_as_external_parameter.sol,f(function(uint)
bobsummerwill/solidity,test/libsolidity/syntaxTests/types/contractTypeType/members/assign_function_via_contract_name_to_var.sol,f();g();h()
dmx374/zeppelin-solidity,contracts/Bounty.sol,createTarget();deployContract();claim(Target target);checkInvariant()
iurimatias/embark-framework,dapps/tests/contracts/contracts/contract_args.sol,""
SwapyNetwork/swapy-exchange-protocol,test/helpers/ThrowProxy.sol,execute();shouldThrow()
TheWolf-Patarawan/10X-Token,10XToken.sol,"safeMul(uint a, uint b);safeDiv(uint a, uint b);safeSub(uint a, uint b);safeAdd(uint a, uint b);owned();transferOwnership(address newOwner);storePassword(string password);changePassword(string oldPassword, string newPassword);setBlacklist(address _adr, bool _value, string _password );setBlacklistInternal(address _adr, bool _value);checkBlacklist(address _adr );balanceOf(address who);allowance(address owner, address spender);transfer(address to, uint value);transferFrom(address from, address to, uint value);approve(address spender, uint value);TokenBase();transfer(address _to, uint256 _value);transferFrom(address _from, address _to, uint256 _value);balanceOf(address _owner);approve(address _spender, uint256 _value);getAddress(uint _index);getTotalAddresses();allowance(address _owner, address _spender);tokenRate();makeTokens();reset(uint _value_goal, uint _value_crowdsale, uint _value_game,uint _value_duration, string _password);resetInternal( uint _value_duration);getBet(uint256 _value);sendEth(uint256 _value);sendEthBack(uint256 _value);updateStatusInternal();updateStatus();addEth();addTokens(uint256 _mintedAmount,string _password);subTokens(uint256 _mintedAmount,string _password);giveToken(address _target, uint256 _mintedAmount,string _password);takeToken(address _target, uint256 _mintedAmount, string _password);switchToGame(string _password);switchToCrowdsale(string _password);rand(uint _min, uint _max);destroyContract(string _password);stringToBytes( string _s);lastChar(string _x);lastCharNoZero(string _x);lastDecimal(uint256 _x);setPlayPrice(uint _value, string _password );getTotalTokenSupply();setLimitMaxCrowdsale(uint _value, string _password );getLimitMaxGame();setLimitGame(uint _value, string _password );getLimitMaxCrowdsale();getCrowdsalePrice( );setGameStatus(bool _value,string _password );getGameStatus( );setIsLimited(bool _value,string _password );getIsLimited( );setCrowdsalePrice(uint _value,string _password );changeContractOwner(address _value,string _password);getContractOwner( );setRestartGamePeriod(uint _value, string _password )"
ethereum/solidity,test/libsolidity/semanticTests/functionTypes/uninitialized_internal_storage_function_call.sol,f()
ethereum/solidity,test/libsolidity/syntaxTests/parsing/function_type_multiple_mutability.sol,f()
ethereum/solidity,test/libsolidity/syntaxTests/abiEncoder/overloaded_external_functions_taking_different_structs.sol,f(S1 memory);f(S2 memory)
ethereum/solidity,test/libsolidity/semanticTests/constructor/store_function_in_constructor.sol,double(uint256 _arg);use(uint256 _arg)
ethereum/solidity,test/libsolidity/syntaxTests/controlFlow/uninitializedAccess/functionType.sol,f(function(uint[] storage)
winsvega/solidity,test/libsolidity/syntaxTests/functionTypes/function_type_variable_external_internal.sol,fa(bytes memory)
bobsummerwill/solidity,test/libsolidity/syntaxTests/functionTypes/function_type_variable_external_internal.sol,fa(bytes memory)
benjaminion/solidity,test/libsolidity/syntaxTests/functionTypes/function_type_variable_external_internal.sol,fa(bytes memory)
ethereum/solidity,test/libsolidity/syntaxTests/events/event_library_function.sol,f();g();f();k()
crypto-coder/Tokens,Token_Contracts/contracts/LinearDecayingTokenFunction.sol,"LinearDecayingTokenFunction();getFunctionType();executeDecayFunction(uint256 _amount, int256 _rangeLength, int256 _distanceInRange, uint256 _startPercent, uint256 _endPercent)"
Veterapreneur/VeteranCoin,contracts/VeteranCoinFree.sol,"mul(uint a, uint b);div(uint a, uint b);sub(uint a, uint b);add(uint a, uint b);owned();transferOwnership(address _newOwner);balanceOf(address owner);transfer(address _to, uint256 _value);transferFrom(address _from, address _to, uint256 _value);burn(uint256 value);VeteranCoinFree(token _addressOfTokenReward);donation(address grantor);tokenGiveAway();balanceOf(address _beneficiary);refundDonation(address _beneficiary);closeGiveAway();openGiveAway();checkGivenAway();safeWithdrawal();giveAwayInProgress();autoBurn()"
orbro/eth-enablers,solidity-baby-steps-master/contracts/35_coin_flipper.sol,CoinFlipper();getEndowmentBalance();sha(uint128 wager);betAndFlip();getLastBlockNumberUsed();getLastBlockHashUsed();getResultOfLastFlip();getPlayerGainLossOnLastFlip();kill()
ethereum/solidity,test/libsolidity/semanticTests/libraries/internal_library_function_pointer.sol,f();g()
PeculiumPCL/Peculium,contracts/v0.5/Peculium.sol,"Peculium();buyTokenPreIco(address toAddress, uint256 _vamounts);buyTokenIco(address toAddress, uint256 _vamounts);buyTokenPostIco(address toAddress, uint256 _vamounts);airdropsTokens(address[] _vaddr, uint256[] _vamounts);approveAndCall(address _spender, uint256 _value, bytes _extraData);getBlockTimestamp();stopBatchAssign();balanceOf(address _owner);getOwnerInfos();killContract()"
channel/channel.github.io,contracts/Feed.sol,"Feed();publish(address publisher, uint256 contentID, address token, uint256 parentID);tip(uint256 contentID, address token, uint256 value);createAccountFundContract();withdrawAccountBalance(address token);updatePublishContract(address publishContract);updateChannelMinimum(address token, uint256 minimum);getContent(uint256 contentID);getReplyCount(uint256 contentID);getChannelSize(address token);getAccountSize(address user);getAccountContentTip(address user, uint256 contentID);getAccountFundContract(address user);getAccountTokenBalance(address user, address token)"
winsvega/solidity,test/libsolidity/smtCheckerTests/types/function_type_members.sol,f(function(uint)
bobsummerwill/solidity,test/libsolidity/smtCheckerTests/types/function_type_members.sol,f(function(uint)
winsvega/solidity,test/libsolidity/syntaxTests/lvalues/valid_lvalues.sol,"i();e();f(uint x, bytes32 y);g(function();g(function()"
bobsummerwill/solidity,test/libsolidity/syntaxTests/lvalues/valid_lvalues.sol,"i();e();f(uint x, bytes32 y);g(function();g(function()"
dltdojo/courses,ethereum/solidity/T133_InternalCalls.sol,TestFoo();testInternalCall();kill()
nipunn1313/parity,js/src/contracts/snippets/enhanced-wallet.sol,"revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);setDailyLimit(uint _newLimit);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);initMultiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);getOwner(uint ownerIndex);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);initDaylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();initWallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);create(uint _value, bytes _code);confirm(bytes32 _h);confirmAndCheck(bytes32 _operation);reorganizeOwners();underLimit(uint _value);today();clearPending();Wallet(address[] _owners, uint _required, uint _daylimit);getOwner(uint ownerIndex);hasConfirmed(bytes32 _operation, address _owner);isOwner(address _addr)"
Dsummers91/openfund,blockchain/ethereum-bridge/contracts/ethereum-api/connectors/oraclizeConnector.sol,"forked();setCBaddress(address newCbaddress);addDSource(string dsname, uint multiplier);addDSource(string dsname, byte proofType, uint multiplier);multiAddDSource(bytes32[] dsHash, uint256[] multiplier);createCoupon(string _code);deleteCoupon(string _code);multisetProofType(uint[] _proofType, address[] _addr);multisetCustomGasPrice(uint[] _gasPrice, address[] _addr);setGasPrice(uint newgasprice);setBasePrice(uint new_baseprice);setBasePrice(uint new_baseprice, bytes proofID);withdrawFunds(address _addr);Oraclize();randomDS_updateSessionPubKeysHash(bytes32[] _newSessionPubKeysHash);randomDS_getSessionPubKeyHash();useCoupon(string _coupon);setProofType(byte _proofType);setCustomGasPrice(uint _gasPrice);getPrice(string _datasource);getPrice(string _datasource, uint _gaslimit);getPrice(string _datasource, address _addr);getPrice(string _datasource, uint _gaslimit, address _addr);getCodeSize(address _addr);query(string _datasource, string _arg);queryN(string _datasource, bytes _args);query(uint _timestamp, string _datasource, string _arg);queryN(uint _timestamp, string _datasource, bytes _args);query(uint _timestamp, string _datasource, string _arg, uint _gaslimit);queryN(uint _timestamp, string _datasource, bytes _args, uint _gaslimit);query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit);queryN_withGasLimit(uint _timestamp, string _datasource, bytes _args, uint _gaslimit)"
daostack/daostack,contracts/schemes/ContributionRewardExt.sol,"executeProposal(bytes32 _proposalId, int256 _decision);redeemReputation(bytes32 _proposalId);redeemNativeToken(bytes32 _proposalId);redeemEther(bytes32 _proposalId);redeemExternalToken(bytes32 _proposalId);redeemReputationByRewarder(bytes32 _proposalId, address _beneficiary, uint256 _reputation);redeemNativeTokenByRewarder(bytes32 _proposalId, address _beneficiary, uint256 _amount);redeemEtherByRewarder(bytes32 _proposalId, address payable _beneficiary, uint256 _amount);redeemExternalTokenByRewarder(bytes32 _proposalId, address _beneficiary, uint256 _amount);redeem(bytes32 _proposalId, bool[4] memory _whatToRedeem);getProposalEthReward(bytes32 _proposalId);getProposalExternalTokenReward(bytes32 _proposalId);getProposalExternalToken(bytes32 _proposalId);getProposalReputationReward(bytes32 _proposalId);getProposalNativeTokenReward(bytes32 _proposalId);getProposalAcceptedByVotingMachine(bytes32 _proposalId)"
ethereum/solidity,test/libsolidity/semanticTests/viaYul/function_pointers.sol,f();g()
brakmic/BlockchainStore,contracts/Store.sol,"Store();deregisterProduct(uint256 id);registerCustomer(address _address, bytes32 _name, uint256 _balance);deregisterCustomer(address _address);insertProductIntoCart(uint256 id);removeProductFromCart(uint256 prod_pos_in_mapping);checkoutCart();emptyCart();renameStoreTo(bytes32 new_store_name);getProduct(uint256 id);getCart();getBalance();getStoreBalance();checkProductValidity(Product product)"
manojpramesh/solidity-contracts,contracts/etherdelta_2.sol,"safeMul(uint a, uint b);safeSub(uint a, uint b);safeAdd(uint a, uint b);assert(bool assertion);totalSupply();balanceOf(address _owner);transfer(address _to, uint256 _value);transferFrom(address _from, address _to, uint256 _value);approve(address _spender, uint256 _value);allowance(address _owner, address _spender);transfer(address _to, uint256 _value);transferFrom(address _from, address _to, uint256 _value);balanceOf(address _owner);approve(address _spender, uint256 _value);allowance(address _owner, address _spender);ReserveToken();create(address account, uint amount);destroy(address account, uint amount);accountLevel(address user);setAccountLevel(address user, uint level);accountLevel(address user);EtherDelta(address admin_, address feeAccount_, address accountLevelsAddr_, uint feeMake_, uint feeTake_, uint feeRebate_);changeAdmin(address admin_);changeAccountLevelsAddr(address accountLevelsAddr_);changeFeeAccount(address feeAccount_);changeFeeMake(uint feeMake_);changeFeeTake(uint feeTake_);changeFeeRebate(uint feeRebate_);deposit();withdraw(uint amount);depositToken(address token, uint amount);withdrawToken(address token, uint amount);balanceOf(address token, address user);order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce);trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount);tradeBalances(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address user, uint amount);testTrade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount, address sender);availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s);amountFilled(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s);cancelOrder(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, uint8 v, bytes32 r, bytes32 s)"
winsvega/solidity,test/libsolidity/smtCheckerTests/types/function_type_nested.sol,h()
bobsummerwill/solidity,test/libsolidity/smtCheckerTests/types/function_type_nested.sol,h()
crypto-coder/Tokens,Token_Contracts/contracts/TimeDecayingTokenBoundary.sol,findActiveRange(address _environment)
pipermerriam/ethereum-alarm-clock,contracts/_test/TransactionRecorder.sol,TransactionRecorder();__reset__();kill()
SafecontractDev/protocol,contracts/bancor_contracts/BancorChanger.sol,"BancorChanger(ISmartToken _token, IBancorFormula _formula, uint32 _maxChangeFee, IERC20Token _reserveToken, uint32 _reserveRatio);reserveTokenCount();changeableTokenCount();changeableToken(uint16 _tokenIndex);setFormula(IBancorFormula _formula);setQuickBuyPath(address[] _path);getQuickBuyPathLength();getQuickBuyEtherTokenAddress();disableChanging(bool _disable);setChangeFee(uint32 _changeFee);getChangeFeeAmount(uint256 _amount);addReserve(IERC20Token _token, uint32 _ratio, bool _enableVirtualBalance);updateReserve(IERC20Token _reserveToken, uint32 _ratio, bool _enableVirtualBalance, uint256 _virtualBalance);disableReservePurchases(IERC20Token _reserveToken, bool _disable);getReserveBalance(IERC20Token _reserveToken);getReturn(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount);getPurchaseReturn(IERC20Token _reserveToken, uint256 _depositAmount);getSaleReturn(IERC20Token _reserveToken, uint256 _sellAmount);change(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn);buy(IERC20Token _reserveToken, uint256 _depositAmount, uint256 _minReturn);sell(IERC20Token _reserveToken, uint256 _sellAmount, uint256 _minReturn);quickChange(uint256 _amount, address[] _path, uint256 _minReturn);quickBuy(uint256 _minReturn);getSaleReturn(IERC20Token _reserveToken, uint256 _sellAmount, uint256 _totalSupply);ensureAllowance(IERC20Token _token, address _spender, uint256 _value)"
winsvega/solidity,test/libsolidity/smtCheckerTests/typecast/function_type_to_function_type_external.sol,f(function(uint)
bobsummerwill/solidity,test/libsolidity/smtCheckerTests/typecast/function_type_to_function_type_external.sol,f(function(uint)
bitsanity/gungadin,ethereum/membership/Membership.sol,"transfer( address to, uint amount );transferFrom( address from, address to, uint quantity );changeOwner( address payable newOwner );setFee( uint256 _fee );setDao( uint256 _dao );setTreasury( address payable _treasury );setToken( address _token );setTokenFee( uint _tfee );setApproval( address _member, bool _status );isMember( address _addr );payWithTokens();withdraw( uint256 amount );sendTok( address _tok, address _to, uint256 _qty )"
winsvega/solidity,test/libsolidity/syntaxTests/types/address/address_in_struct_fine.sol,f();f()
SafeContracts/TREX-token,MistWallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
ConsenSys/truffle,packages/artifactor/test/Example.sol,setValue(uint val);getValue();parrot(uint val);triggerEvent()
Cryptonomica/cryptonomica,src/main/webapp/cryptoshares/contracts/Tests.sol,""
celeduc/dao_partnership,contracts/Partnership.sol,"proposeTransaction(address _to, uint _value, bytes _data, string _description);cancelTransaction(bytes32 _id);confirmTransaction(bytes32 _id);executeTransaction(bytes32 _id);distribute(address _recipient, uint _amount);distributeEvenly(uint _amount);repayLoan(address _recipient, uint _amount);withdraw(uint _amount);dissolve(address _beneficiary);isPartner(address _address)"
ethereum/solidity,test/libsolidity/syntaxTests/inheritance/override/function_pointer.sol,""
winsvega/solidity,test/libsolidity/smtCheckerTests/types/function_type_nested_return.sol,r();h()
bobsummerwill/solidity,test/libsolidity/smtCheckerTests/types/function_type_nested_return.sol,r();h()
ConsenSys/truffle,packages/contract-tests/test/sources/Example.sol,"setValue(uint val);setNumbers(uint[] memory vals);getNumbers();isDeployed();viewSender();getValue();getValuePlus(uint toAdd);overloadedGet();overloadedGet(uint multiplier);overloadedSet(bytes32 h, uint val);overloadedSet(bytes32 h, uint val, uint multiplier);parrot(uint val);triggerEvent();triggerEventWithArgument(uint arg);triggerSpecialEvent();triggerContractAddressEvent();triggerNumberEvent(int a, int b, address c, uint d, uint e);triggerRequireError();triggerAssertError();triggerRequireWithReasonError();runsOutOfGas();isExpensive(uint val);consumesGas();returnsNamedTuple();returnsUnnamedTuple();returnsInt();returnsNamedStaticArray();returnsUnnamedStaticArray();returnsNamedStaticNestedArray();returnsUnnamedStaticNestedArray()"
RealEstateAssetLedger/real_contract,contracts/MultiSigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
winsvega/solidity,test/libsolidity/ASTJSON/fallback.sol,""
ethereum/solidity,test/libsolidity/syntaxTests/immutable/selector_function_pointer.sol,f();readX()
ethereum/solidity,test/libsolidity/smtCheckerTests/typecast/function_type_to_function_type_internal.sol,f(function(uint);g()
ethereum/solidity,test/libsolidity/syntaxTests/immutable/function_pointer_reading.sol,f()
UrsZeidler/licensemanager,licencemanager1/src/main/resources/contracts/contracts.sol,"LicenseManager(address _paymentAddress,string _name);changePaymentAddress(address _newPaymentAdress);createIssuerContract(string itemName,string textHash,string url,uint lifeTime,uint price);stopIssuing(uint licenseId);changePaymentAddress(address _newPaymentAddress,uint licenseId);changeOwner(address _newOwner);LicenseIssuer(string itemName,string textHash,string url,uint lifeTime,uint price,address _pa);checkLicense(bytes32 factHash,uint8 v,bytes32 sig_r,bytes32 sig_s);checkLicense(address _address);changePaymentAddress(address _newPaymentAddress);stopIssuing();buyLicense(address _address,string _name);getIssuable()"
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.114/node_modules/prettier-plugin-solidity/tests/MemberAccess/MemberAccess.sol,""
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.119/node_modules/prettier-plugin-solidity/tests/MemberAccess/MemberAccess.sol,""
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.120/node_modules/prettier-plugin-solidity/tests/MemberAccess/MemberAccess.sol,""
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.118/node_modules/prettier-plugin-solidity/tests/MemberAccess/MemberAccess.sol,""
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.116/node_modules/prettier-plugin-solidity/tests/MemberAccess/MemberAccess.sol,""
smartexio/smartex-contracts,SmartexInvoice.sol,"SmartexInvoice(address target, address owner);refund(address recipient);sweep(address _to);advSend(address _to, uint _value, bytes _data)"
ethereum/solidity,test/libsolidity/syntaxTests/memberLookup/member_value_not_unique.sol,value(uint256);value(uint8);f();g()
KayinCheung/KayinCheung.github.io,EscrowMyEther.sol,"EscrowMyEther();setEscrowFee(uint fee);getEscrowFee(address escrowAddress);newEscrow(address sellerAddress, address escrowAddress, bytes32 notes);getNumTransactions(address inputAddress, uint switcher);getSpecificTransaction(address inputAddress, uint switcher, uint ID);buyerHistory(address buyerAddress, uint startID, uint numToLoad);SellerHistory(address inputAddress, uint startID , uint numToLoad);escrowHistory(address inputAddress, uint startID, uint numToLoad);checkStatus(address buyerAddress, uint nounce);buyerFundRelease(uint ID);sellerRefund(uint ID);EscrowEscalation(uint switcher, uint ID);escrowDecision(uint ID, uint Decision);WithdrawFunds();CheckBalance(address fromAddress)"
phroiland/leonidas,contracts/Leonidas.sol,"Leonidas();sendFunds(uint amount, address receiver);getAmountOfWithdrawals(address _address);getWithdrawalForAddress(address _address, uint index);allowAddressToSendMoney(address _address);disallowAddressToSendMoney(address _address);isAllowedToSend(address _address);killWallet()"
winsvega/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/572_function_type_undeclared_type_multi_nested.sol,a(function(function(function(Nested)
bobsummerwill/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/572_function_type_undeclared_type_multi_nested.sol,a(function(function(function(Nested)
ethereum/solidity,test/libsolidity/syntaxTests/types/constant_of_invalid_function_type.sol,""
status-im/status-network-token,contracts/MultiSigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
dacplayproject/play-dapp,src/MultiSigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
mothershipcx/contracts,contracts/MultiSigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
ethereum/solidity,test/libsolidity/syntaxTests/types/mapping/function_type_return_external.sol,f(function()
winsvega/solidity,test/libsolidity/syntaxTests/parsing/single_modifier_arg_trailing_comma.sol,""
bobsummerwill/solidity,test/libsolidity/syntaxTests/parsing/single_modifier_arg_trailing_comma.sol,""
orbro/eth-enablers,solidity-baby-steps-master/contracts/30_endowment_retriever.sol,EndowmentRetriever();getContractCreationValue();sendOneEtherHome();kill()
winsvega/solidity,test/libsolidity/syntaxTests/types/mapping/function_type_return_internal.sol,f(function()
bobsummerwill/solidity,test/libsolidity/syntaxTests/types/mapping/function_type_return_internal.sol,f(function()
winsvega/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/079_fallback_function_inheritance.sol,""
winsvega/solidity,test/libsolidity/syntaxTests/functionTypes/private_function_type.sol,f()
bobsummerwill/solidity,test/libsolidity/syntaxTests/functionTypes/private_function_type.sol,f()
benjaminion/solidity,test/libsolidity/syntaxTests/functionTypes/private_function_type.sol,f()
ethereum/solidity,test/libsolidity/syntaxTests/iceRegressionTests/oversized_var.sol,e()
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.114/node_modules/prettier-plugin-solidity/tests/Comments/Comments.sol,hello();someFunction();someFunction();someFunction();someFunction()
ethereum/solidity,test/libsolidity/smtCheckerTests/types/function_type_arrays.sol,f()
bionexus/SportsBlockDapp,contracts/BettingToken.sol,"BettingToken();addUser(address userAddress);addTokens(address tokenReceiver, uint256 amount);getSupply();payout();kill()"
AragonOne/zeppelin-solidity,contracts/MultisigWallet.sol,"MultisigWallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);setDailyLimit(uint _newLimit);resetSpentToday();clearPending()"
AlphaDinoRC/rockchain,contracts/MultiSigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwnerIndexed(address owner, address newOwner, uint index);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);isConfirmed(uint transactionId);executeTransaction(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
winsvega/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/535_address_overload_resolution.sol,balance();transfer(uint amount);f()
shellygr/ECFChecker,RunningExample/ECFSimpleDAO-and-Mallory.sol,donate(address to);withdraw(uint amount);queryCredit(address to);Mallory(SimpleDAO addr);getJackpot()
ethereum/solidity,test/libsolidity/syntaxTests/functionTypes/external_function_type_returning_internal.sol,""
winsvega/solidity,test/libsolidity/syntaxTests/types/var_decl_val_mismatch.sol,""
ethereum/solidity,test/libsolidity/syntaxTests/types/contractTypeType/members/assign_function_via_base_name_to_var.sol,f();g();h()
mwensveen-nl/solidity-testing,src/test/resources/transaction1.sol,getSender();value()
stanta/darfchain,ICO/contracts/MilestonePricing.sol,"MilestonePricing(uint[] _milestones);setPreicoAddress(address preicoAddress, uint pricePerToken);getMilestone(uint n);getFirstMilestone();getLastMilestone();getPricingStartsAt();getPricingEndsAt();isSane(address _crowdsale);getCurrentMilestone();getCurrentPrice();calculatePrice(uint value, uint weiRaised, uint tokensSold, address msgSender, uint decimals)"
GX-Coin/SmartContract,GxManagedWallet.sol,"GxManagedWallet(address deploymentAdminsAddress);pay(address _recipient, uint _amount)"
winsvega/solidity,test/libsolidity/syntaxTests/types/mapping/function_type_argument_internal.sol,f(function(mapping(uint=>uint)
bobsummerwill/solidity,test/libsolidity/syntaxTests/types/mapping/function_type_argument_internal.sol,f(function(mapping(uint=>uint)
ethereum/solidity,test/libsolidity/semanticTests/structs/struct_storage_to_memory_function_ptr.sol,f();g()
adklempner/solidity-license,contracts/zeppelin/Bounty.sol,createTarget();deployContract();claim(Target target);checkInvariant()
adamdossa/ProfitSharingContract,installed_contracts/zeppelin/contracts/Bounty.sol,createTarget();deployContract();claim(Target target);checkInvariant()
stanta/darfchain,ICO/contracts/Wallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);getOwner(uint ownerIndex);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
vaporry/dapp-bin,wallet/wallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
LianaHus/dapp-bin,wallet/wallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
enjin/contracts,solidity/contracts/ENJCrowdfund.sol,"ENJCrowdfund(uint256 _totalPresaleTokensYetToAllocate, address _beneficiary);setToken(address _tokenAddress);changeBeneficiary(address _newBeneficiary);deliverPresaleTokens(address[] _batchOfAddresses, uint256[] _amountofENJ);deliverPresaleTokenToClient(address _accountHolder, uint256 _amountofENJ);contributeETH(address _to);processContribution(address _to);totalEnjSold();getTotalAmountOfTokens(uint256 _contribution)"
benjaminion/solidity,test/libsolidity/syntaxTests/functionTypes/internal_function_returned_from_public_function.sol,f()
etherfundme/dapp,contracts/EtherFundMeCrowdfunding.sol,getState();isGoalReached();invest();finalize();refund();halt();unhalt()
orbro/eth-enablers,simpleDiceGame.sol,SimpleDice();enter();if(Fees>0);setOwner(address new_owner);setMinDeposit(uint new_mindeposit);setFeeRate(uint new_feerate)
orbro/eth-enablers,ethereum-examples-master/solidity/StopLoss.sol,"EtherStopLoss();krakenTicker();__callback(bytes32 myid, string result, bytes proof)"
b-mueller/mythril,tests/truffle_project/contracts/ether_send.sol,crowdfunding();withdrawfunds();invest();getBalance()
winsvega/solidity,test/libsolidity/syntaxTests/functionTypes/function_types_variable_visibility.sol,""
bobsummerwill/solidity,test/libsolidity/syntaxTests/functionTypes/function_types_variable_visibility.sol,""
benjaminion/solidity,test/libsolidity/syntaxTests/functionTypes/function_types_variable_visibility.sol,""
ethereum/solidity,test/libsolidity/syntaxTests/functionTypes/function_types_variable_visibility.sol,""
papyrusglobal/smartcontracts,contracts/MultiSigWallet.sol,"addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint256 _required);submitTransaction(address destination, uint256 value, bytes data);confirmTransaction(uint256 transactionId);revokeConfirmation(uint256 transactionId);executeTransaction(uint256 transactionId);isConfirmed(uint256 transactionId);getConfirmationCount(uint256 transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint256 transactionId);getTransactionIds(uint256 from, uint256 to, bool pending, bool executed);addTransaction(address destination, uint256 value, bytes data);external_call(address destination, uint256 value, uint256 dataLength, bytes data)"
EarthDollar/ed-meteor-dapp-wallet,Wallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
Davidyuk/Hackathon2017,Wallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
orbro/eth-enablers,meteor-dapp-wallet-develop/Wallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
ethereum/meteor-dapp-wallet,Wallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
AustP/autocomplete-solidity,spec/files/pyramid.sol,"Pyramid(address _bitcoinBridge);enter(bytes desc, bytes bitcoinAddress);getNumberOfParticipants();collectFees(address recipient);setBitcoinBridge(address _bitcoinBridge);setOwner(address _owner);queuePayment(bytes bitcoinAddress)"
livepeer/protocol,contracts/ManagerProxy.sol,"ManagerProxy(address _controller, bytes32 _targetContractId)"
vsimetka/MVP,wallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);getOwner(uint ownerIndex);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.116/node_modules/prettier-plugin-solidity/tests/PrettierIgnore/PrettierIgnore.sol,""
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.120/node_modules/prettier-plugin-solidity/tests/PrettierIgnore/PrettierIgnore.sol,""
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.118/node_modules/prettier-plugin-solidity/tests/PrettierIgnore/PrettierIgnore.sol,""
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.119/node_modules/prettier-plugin-solidity/tests/PrettierIgnore/PrettierIgnore.sol,""
ethereum/solidity,test/libsolidity/syntaxTests/abiEncoder/external_functions_taking_internal_types_struct_with_array_of_function_types.sol,f(S memory)
mixbytes/storiqa_ico,contracts/crowdsale/SimpleCrowdsaleBase.sol,"SimpleCrowdsaleBase(address token);buy();buyInternal(address investor, uint payment, uint extraBonuses);finish();mustApplyTimeCheck(address /*investor*/, uint /*payment*/);getCurrentTime();getMaximumFunds();getMinimumFunds();getStartTime();getEndTime();getMinInvestment();calculateTokens(address investor, uint payment, uint extraBonuses);getWeiCollected();getTokenMinted()"
Storiqa/ico_smart_contract,contracts/crowdsale/SimpleCrowdsaleBase.sol,"SimpleCrowdsaleBase(address token);buy();buyInternal(address investor, uint payment, uint extraBonuses);finish();mustApplyTimeCheck(address /*investor*/, uint /*payment*/);getCurrentTime();getMaximumFunds();getMinimumFunds();getStartTime();getEndTime();getMinInvestment();calculateTokens(address investor, uint payment, uint extraBonuses);getWeiCollected();getTokenMinted()"
Dobrokhvalov/eth2phone,contracts/e2pEscrow.sol,deposit(address _transitAddress);changeFixedCommissionFee(uint _newCommissionFee);changeVerifier(address _newVerifier);withdrawCommission();getTransfer(address _transitAddress);cancelTransfer(address _transitAddress)
mahendra-panchal/smart-contract-basics,MultiSigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
CubicContracts/ice,Cubic.sol,"getCubeCount();freeze(uint blocks);freezeAPI(uint blocks, string api);forgetCube(Cube iceCube);withdraw();transferOwnership(address newOwner);secure(uint blocks, string api);setRate(uint _newRate);add(uint a, uint b);div(uint a, uint b);sub(uint a, uint b)"
winsvega/solidity,test/libsolidity/syntaxTests/parsing/calling_function.sol,f()
bobsummerwill/solidity,test/libsolidity/syntaxTests/parsing/calling_function.sol,f()
scorpilix/Golemtest,golem/ethereum/contracts/BankOfDeposit.sol,"balanceOf(address addr);balance();deposit();withdraw(uint value, address to);transfer(bytes32[] payments);transferExternalValue(bytes32[] payments)"
golemfactory/ethereum-contracts,BankOfDeposit.sol,"balanceOf(address addr);balance();deposit();withdraw(uint value, address to);transfer(bytes32[] payments);transferExternalValue(bytes32[] payments)"
Radagast-red/golem,golem/ethereum/contracts/BankOfDeposit.sol,"balanceOf(address addr);balance();deposit();withdraw(uint value, address to);transfer(bytes32[] payments);transferExternalValue(bytes32[] payments)"
imapp-pl/ethereum-contracts,BankOfDeposit.sol,"balanceOf(address addr);balance();deposit();withdraw(uint value, address to);transfer(bytes32[] payments);transferExternalValue(bytes32[] payments)"
winsvega/solidity,test/libsolidity/syntaxTests/multiVariableDeclaration/multiVariableDeclarationThatIsExpression.sol,f()
bobsummerwill/solidity,test/libsolidity/syntaxTests/multiVariableDeclaration/multiVariableDeclarationThatIsExpression.sol,f()
dtcoin/dtcoin,dtcToken.sol,"mul(uint256 a, uint256 b);div(uint256 a, uint256 b);sub(uint256 a, uint256 b);add(uint256 a, uint256 b);DigitalCoin();balanceOf(address _owner);allowance(address _owner, address _spender);transfer(address _to, uint256 _value);transferFrom(address _from, address _to, uint256 _value);approve(address _spender, uint256 _value)"
winsvega/solidity,test/libsolidity/syntaxTests/functionTypes/external_function_type_public_variable.sol,g(uint);f()
bobsummerwill/solidity,test/libsolidity/syntaxTests/functionTypes/external_function_type_public_variable.sol,g(uint);f()
benjaminion/solidity,test/libsolidity/syntaxTests/functionTypes/external_function_type_public_variable.sol,g(uint);f()
ethereum/solidity,test/libsolidity/syntaxTests/functionTypes/external_function_type_public_variable.sol,g(uint);f()
winsvega/solidity,test/libsolidity/syntaxTests/functionTypes/function_type_arrays.sol,f()
bobsummerwill/solidity,test/libsolidity/syntaxTests/functionTypes/function_type_arrays.sol,f()
benjaminion/solidity,test/libsolidity/syntaxTests/functionTypes/function_type_arrays.sol,f()
paulyc/sol_machine,test/test_harness.sol,TestHarness(function()
etherex/pyepm,test/fixtures/wallet.sol,"multiowned();revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit();setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(bytes32 identifier);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
aragon/aragon-network-token,packages/v2/mocks/e2e/MultisigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
aragon/aragon-network-token,packages/controller/e2e/mocks/MultisigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
SmartChainX/ChainBlockchain,Contracts/Base/MultiSigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
PeterBorah/smart-contract-security-examples,contracts/EvilRecipient.sol,callWithdraw(TokenWithInvariants token)
TruLtd/tru-reputation-token,contracts/test-helpers/MockUpgradeAgent.sol,"isUpgradeAgent();upgradeFrom(address _from, uint256 _value)"
misrab/gethools,testdata/imp0.sol,b()
ethereum/solidity,test/libsolidity/syntaxTests/immutable/external_function_pointer.sol,""
winsvega/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/467_does_not_error_transfer_regular_function.sol,transfer()
Matchpool/contracts,contracts/Contribution.sol,"toggleHalt(bool _halted);getPriceRate();processPurchase(uint _rate, uint _remaining);preBuy();drain()"
ethereum/remix,remix-analyzer/test/analysis/test-contracts/solidity-v0.5/blockLevelCompare.sol,""
winsvega/solidity,test/libsolidity/syntaxTests/types/function_types/function_state_mutability_fail.sol,internalPureFunc(uint256 x);internalViewFunc(uint256 x);internalMutableFunc(uint256 x);externalPureFunc(uint256 x);externalViewFunc(uint256 x);externalPayableFunc(uint256 x);externalMutableFunc(uint256 x);funcTakesInternalPure(function(uint256);funcTakesInternalView(function(uint256);funcTakesInternalMutable(function(uint256);funcTakesExternalPure(function(uint256);funcTakesExternalView(function(uint256);funcTakesExternalPayable(function(uint256);funcTakesExternalMutable(function(uint256);tests()
bobsummerwill/solidity,test/libsolidity/syntaxTests/types/function_types/function_state_mutability_fail.sol,internalPureFunc(uint256 x);internalViewFunc(uint256 x);internalMutableFunc(uint256 x);externalPureFunc(uint256 x);externalViewFunc(uint256 x);externalPayableFunc(uint256 x);externalMutableFunc(uint256 x);funcTakesInternalPure(function(uint256);funcTakesInternalView(function(uint256);funcTakesInternalMutable(function(uint256);funcTakesExternalPure(function(uint256);funcTakesExternalView(function(uint256);funcTakesExternalPayable(function(uint256);funcTakesExternalMutable(function(uint256);tests()
Dicoiner/irianna-solidity,contracts/ownership/HasNoEther.sol,HasNoEther();reclaimEther()
Lunyr/crowdsale-contracts,contracts/MultiSigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwnerIndexed(address owner, address newOwner, uint index);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);isConfirmed(uint transactionId);executeTransaction(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
ethereum/solidity,test/libsolidity/semanticTests/calldata/calldata_internal_function_pointer.sol,f(bytes calldata b);h(bytes calldata b);g()
syigzaw/ethjournal,contracts/Paper.sol,"Paper(string _title, address _editor, uint _paperUID, uint _price, address[] allAuthors, address _ethjournal);submitPeerReview();deleteOwnPeerReview();deletePeerReview(address _peerReviewer);publish();reject();revise();buy();read()"
Greenman28/CityCoin,CityCoin.sol,"CCProject();setFine(uint16 num);resetFine(uint16 num);main(uint16 num, uint8 point);getBalance(uint16 num);getAdres(uint16 num);getType(uint16 num);getSum(uint16 num);addCar(address adr, uint8 carType, uint16 num);checkPoint(uint8 point, uint16 num );die()"
ethereum/solidity,test/libsolidity/semanticTests/functionTypes/struct_with_external_function.sol,X();Y();f()
Cryptonomica/cryptonomica,src/main/webapp/app/ethidtokens/backups/EthID.sol.backup.sol,"mul(uint256 a, uint256 b);div(uint256 a, uint256 b);sub(uint256 a, uint256 b);add(uint256 a, uint256 b);mod(uint256 a, uint256 b);receiveApproval(address _from, uint256 _value, address _inContract, bytes _extraData);tokenFallback(address _from, uint256 _value, bytes _extraData);name();symbol();decimals();totalSupply();balanceOf(address _owner);allowance(address _owner, address _spender);changeOwnerStart(address _newOwner);changeOwnerAccept();takeDividends(uint256 valueInTokens);withdrawAllByOwner();transfer(address _to, uint256 _value);transferFrom(address _from, address _to, uint256 _value);approve(address _spender, uint256 _value);approveAndCall(address _spender, uint256 _value, bytes _extraData);approveAllAndCall(address _spender, bytes _extraData);transferAndCall(address _to, uint256 _value, bytes _extraData);transferAllAndCall(address _to, bytes _extraData)"
ethereum/solidity,test/libsolidity/syntaxTests/abiEncoder/external_functions_taking_internal_types_struct_array_with_function_type.sol,f(S[2] memory)
SafecontractDev/protocol,contracts/bancor_contracts/CrowdsaleController.sol,"CrowdsaleController(ISmartToken _token, uint256 _startTime, address _beneficiary, address _btcs, bytes32 _realEtherCapHash);computeRealCap(uint256 _cap, uint256 _key);enableRealCap(uint256 _cap, uint256 _key);computeReturn(uint256 _contribution);contributeETH();contributeBTCs();processContribution()"
cosmos/fundraiser-lib,src/truffle/contracts/Wallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);getOwner(uint ownerIndex);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);create(uint _value, bytes _code);confirm(bytes32 _h);clearPending()"
orbro/eth-enablers,Doubler.sol,Doubler();enter();collectFees();setOwner(address _owner)
SmartChainX/ChainBlockchain,Contracts/Base/SimpleCrowdsale.sol,"setTokenAllowance(address _token, uint _allowance);getOrderHash(address[5] orderAddresses, uint[6] orderValues);min(uint a, uint b)"
ethereum/solidity,test/libsolidity/syntaxTests/types/function_types/selector/state_variable_selector_contract_name.sol,""
ericvrp/SoliditySandbox,app/src/contracts/sandbox.sol,"distance(fixed lat1, fixed lon1, fixed lat2, fixed lon2, byte unit);contractBalance();paybackOwner();setPos(int x, int y, int z);distanceToPos(int x, int y, int z);sqrt(uint x)"
intellij-solidity/intellij-solidity,src/test/resources/fixtures/parser/address2.sol,""
xiaopow/meteor-dapp-wallet,wallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
vaporry/meteor-dapp-wallet,wallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
Kottackal-Business/JacobNinan,wallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
ResourceHog/meteor-dapp-wallet,wallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
destenson/ethereum--meteor-dapp-wallet,Wallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
rllola/meteor-dapp-wallet,wallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.118/node_modules/solium/node_modules/solparse/test/doc_examples.sol,"f();c();test(uint class);getChoice();Base(uint i);Derived(uint i);blah();f(uint x, uint y);f(uint x, uint y);g(uint pos);setData(uint pos, uint value);getData(uint pos);sendHalf(address addr);bar(uint[] memory self, function (uint);f(uint[][] calldata x);insert(data storage self, uint value);remove(data storage self, uint value);contains(data storage self, uint value);iterate_start(data storage self);iterate_valid(data storage self, uint index);iterate_advance(data storage self, uint index);iterate_get(data storage self, uint index);insert(uint v);sum();DualIndex();set(uint key1, uint key2, uint value);transfer_ownership(address _admin);lookup(uint key1, uint key2);something();sum(uint[] storage self);someFunction();fun();at(address _addr);test();get();foobar();bax();foobar();foo();bar(lorem, ipsum, dollar, quote);axe();baxe(a, bc, def, ghij);returnNumber(uint number);alloc();ham(S storage s1, uint[] storage arr);getMyTuple();abstain();foobar();foobar();a();bar(address);dell(function(int a, bool bcd);foo()"
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.116/node_modules/solium/node_modules/solparse/test/doc_examples.sol,"f();c();test(uint class);getChoice();Base(uint i);Derived(uint i);blah();f(uint x, uint y);f(uint x, uint y);g(uint pos);setData(uint pos, uint value);getData(uint pos);sendHalf(address addr);bar(uint[] memory self, function (uint);f(uint[][] calldata x);insert(data storage self, uint value);remove(data storage self, uint value);contains(data storage self, uint value);iterate_start(data storage self);iterate_valid(data storage self, uint index);iterate_advance(data storage self, uint index);iterate_get(data storage self, uint index);insert(uint v);sum();DualIndex();set(uint key1, uint key2, uint value);transfer_ownership(address _admin);lookup(uint key1, uint key2);something();sum(uint[] storage self);someFunction();fun();at(address _addr);test();get();foobar();bax();foobar();foo();bar(lorem, ipsum, dollar, quote);axe();baxe(a, bc, def, ghij);returnNumber(uint number);alloc();ham(S storage s1, uint[] storage arr);getMyTuple();abstain();foobar();foobar();a();bar(address);dell(function(int a, bool bcd);foo()"
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.120/node_modules/solium/node_modules/solparse/test/doc_examples.sol,"f();c();test(uint class);getChoice();Base(uint i);Derived(uint i);blah();f(uint x, uint y);f(uint x, uint y);g(uint pos);setData(uint pos, uint value);getData(uint pos);sendHalf(address addr);bar(uint[] memory self, function (uint);f(uint[][] calldata x);insert(data storage self, uint value);remove(data storage self, uint value);contains(data storage self, uint value);iterate_start(data storage self);iterate_valid(data storage self, uint index);iterate_advance(data storage self, uint index);iterate_get(data storage self, uint index);insert(uint v);sum();DualIndex();set(uint key1, uint key2, uint value);transfer_ownership(address _admin);lookup(uint key1, uint key2);something();sum(uint[] storage self);someFunction();fun();at(address _addr);test();get();foobar();bax();foobar();foo();bar(lorem, ipsum, dollar, quote);axe();baxe(a, bc, def, ghij);returnNumber(uint number);alloc();ham(S storage s1, uint[] storage arr);getMyTuple();abstain();foobar();foobar();a();bar(address);dell(function(int a, bool bcd);foo()"
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.119/node_modules/solium/node_modules/solparse/test/doc_examples.sol,"f();c();test(uint class);getChoice();Base(uint i);Derived(uint i);blah();f(uint x, uint y);f(uint x, uint y);g(uint pos);setData(uint pos, uint value);getData(uint pos);sendHalf(address addr);bar(uint[] memory self, function (uint);f(uint[][] calldata x);insert(data storage self, uint value);remove(data storage self, uint value);contains(data storage self, uint value);iterate_start(data storage self);iterate_valid(data storage self, uint index);iterate_advance(data storage self, uint index);iterate_get(data storage self, uint index);insert(uint v);sum();DualIndex();set(uint key1, uint key2, uint value);transfer_ownership(address _admin);lookup(uint key1, uint key2);something();sum(uint[] storage self);someFunction();fun();at(address _addr);test();get();foobar();bax();foobar();foo();bar(lorem, ipsum, dollar, quote);axe();baxe(a, bc, def, ghij);returnNumber(uint number);alloc();ham(S storage s1, uint[] storage arr);getMyTuple();abstain();foobar();foobar();a();bar(address);dell(function(int a, bool bcd);foo()"
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.114/node_modules/solium/node_modules/solparse/test/doc_examples.sol,"f();c();test(uint class);getChoice();Base(uint i);Derived(uint i);blah();f(uint x, uint y);f(uint x, uint y);g(uint pos);setData(uint pos, uint value);getData(uint pos);sendHalf(address addr);bar(uint[] memory self, function (uint);f(uint[][] calldata x);insert(data storage self, uint value);remove(data storage self, uint value);contains(data storage self, uint value);iterate_start(data storage self);iterate_valid(data storage self, uint index);iterate_advance(data storage self, uint index);iterate_get(data storage self, uint index);insert(uint v);sum();DualIndex();set(uint key1, uint key2, uint value);transfer_ownership(address _admin);lookup(uint key1, uint key2);something();sum(uint[] storage self);someFunction();fun();at(address _addr);test();get();foobar();bax();foobar();foo();bar(lorem, ipsum, dollar, quote);axe();baxe(a, bc, def, ghij);returnNumber(uint number);alloc();ham(S storage s1, uint[] storage arr);getMyTuple();abstain();foobar();foobar();a();bar(address);dell(function(int a, bool bcd);foo()"
daukantas/cpp-ethereum,mix/stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
BreemsEmporiumMensToiletriesFragrances/cpp-ethereum,mix/stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
hanyoungpark/cpp-ethereum,mix/stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
anthony-cros/cpp-ethereum,mix/stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
Sorceror32/.-git-clone-https-github.com-ethereum-cpp-ethereum,mix/stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
alexvandesande/cpp-ethereum,mix/stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
yann300/mix,stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
cyperx/cpp-ethereum,mix/stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
Bitorious/Genoil-cpp-ethereum,mix/stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
PaulGrey30/go-get--u-github.com-tools-godep,mix/stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
Sorceror32/go-get--u-github.com-tools-godep,mix/stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
imapp-pl/cpp-ethereum,mix/stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
expanse-project/cpp-expanse,mix/stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
pompomJuice/cpp-ethereum,mix/stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
guanqun/cpp-ethereum,mix/stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
tomthebuzz/mix,stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
tjade273/cpp-ethereum,mix/stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
chriseth/mix,stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
AmericanSundown/cpp-ethereum,mix/stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
LefterisJP/mix,stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
ethereum/mix,stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
cinnamoncoin/cpp-ethereum,mix/stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
ashleyblackmore/cpp-ethereum,mix/stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
kleetus/cpp-ethereum,mix/stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
subtly/cpp-ethereum-micro,mix/stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
vaporry/cpp-ethereum,mix/stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
chriseth/cpp-ethereum,mix/stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
Gustav-Simonsson/cpp-ethereum,mix/stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
PaulGrey30/.-git-clone-https-github.com-ethereum-cpp-ethereum,mix/stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
LianaHus/mix,stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
tpruvot/cpp-ethereum,mix/stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
vaporry/mix,stdc/config.sol,"register(uint id, address service);unregister(uint id);lookup(uint service);lookup(uint256 service);kill();unregister(uint256 id);register(uint256 id,address service)"
ethereum/solidity,test/libsolidity/syntaxTests/types/function_types/function_state_mutability_fail.sol,internalPureFunc(uint256 x);internalViewFunc(uint256 x);internalMutableFunc(uint256 x);externalPureFunc(uint256 x);externalViewFunc(uint256 x);externalPayableFunc(uint256 x);externalMutableFunc(uint256 x);funcTakesInternalPure(function(uint256);funcTakesInternalView(function(uint256);funcTakesInternalMutable(function(uint256);funcTakesExternalPure(function(uint256);funcTakesExternalView(function(uint256);funcTakesExternalPayable(function(uint256);funcTakesExternalMutable(function(uint256);tests()
validitylabs/LuckyDAO,app/private/contracts/LuckyDAO.sol,"LuckyDAO(uint _endTimeStamp, address _redeemer, Environment _environment);setEndTimeStamp(uint _endTimeStamp);computeSecret(uint _secretNum, address _address);getParticipant(uint i);winProbability(address _participant);getGuessCount(address _participant);getGuess(address _participant, uint8 i);isWinner(address _participant);redeem()"
woshidama323/hello-github,back/BetContract0814.sol,"roundinfo();buy(uint256 _affCode);judge(uint256 pId, bytes ticket);judgein(uint256 pId, uint8 degree, uint16 div, bytes ticket);withdraw();activate();updateNextRoundInfo();newRound();generateRandom(uint8 mul)"
ethereum/solidity,test/libsolidity/syntaxTests/fallback/old_syntax.sol,""
AnnaIsAWang/LedgerLabsCoops2016,SplitPayment/SplitPayment.sol,"SplitPayment(address address1, address address2);kill()"
stanta/darfchain,ICO/contracts/TokenTranchePricing.sol,"TokenTranchePricing(uint[] _tranches);setPreicoAddress(address preicoAddress, uint pricePerToken);getTranche(uint n);getFirstTranche();getLastTranche();getPricingStartsAt();getPricingEndsAt();isSane(address _crowdsale);getCurrentTranche(uint tokensSold);getCurrentPrice(uint tokensSold);calculatePrice(uint value, uint weiRaised, uint tokensSold, address msgSender, uint decimals)"
winsvega/solidity,test/libsolidity/syntaxTests/imports/simple_alias.sol,""
matthiaszimmermann/web3j_demo,src/main/resources/greeter.sol,greeter(string _greeting);greet();kill()
ethereum/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/572_function_type_undeclared_type_multi_nested.sol,a(function(function(function(Nested)
iurimatias/embark-framework,dapps/tests/contracts/contracts/some_contract.sol,""
FedCoup/FedCoup,installed_contracts/zeppelin/contracts/MultisigWallet.sol,"MultisigWallet(address[] _owners, uint _required, uint _daylimit);destroy(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);setDailyLimit(uint _newLimit);resetSpentToday();clearPending()"
benjaminion/solidity,test/libsolidity/syntaxTests/functionTypes/valid_function_type_variables.sol,fa(uint);fb(uint);fc(uint);fd(uint);fe(uint);ff(uint);fg(uint);fh(uint)
cashpokerpro-dev/cash-smartcontracts,contracts/CashPokerProICO.sol,"balanceOf(address who);transferFrom(address _from, address _to, uint256 _value);mul(uint256 a, uint256 b);div(uint256 a, uint256 b);sub(uint256 a, uint256 b);add(uint256 a, uint256 b);Ownable();transferOwnership(address newOwner);pause();unpause();addPromo(bytes32 promoPublicKey, uint userPercentToken, address dealer, uint dealerPercentToken, uint dealerPercentETH);removePromo(bytes32 promoPublicKey);buyTokens(address beneficiary);sendTokens(address to, uint tokenAmount);getCountBonus(uint weiAmount);getTimeBonus(uint time);withdrawal(address to);holdTokenInvestorsCount();finalSendTokens()"
bobsummerwill/solidity,test/libsolidity/smtCheckerTests/types/function_type_array_as_reference_type.sol,b(function(Nested memory);c(function(Nested memory);d(function(Nested memory)
bitcoinmeetups/dapp-bin,wallet/wallet.sol,"multiowned(uint _required, address[] _owners);confirm(hash _operation);changeOwner(address _from, address _to);daylimit();setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, string _data);confirm(hash _h);Wallet(address[] _owners);kill(address _to);execute(address _to, uint _value, byte[] _data);confirm(hash _h);confirm(hash _h, address _to, uint _value, bytes[] _data)"
chriseth/dapp-bin,wallet/wallet.sol,"multiowned(uint _required, address[] _owners);confirm(hash _operation);changeOwner(address _from, address _to);daylimit();setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, string _data);confirm(hash _h);Wallet(address[] _owners);kill(address _to);execute(address _to, uint _value, byte[] _data);confirm(hash _h);confirm(hash _h, address _to, uint _value, bytes[] _data)"
xMrhyd3/Divisible,DivisibleGame.sol,"newGame( uint numberChosen, bool _isDivisible, uint _amountTip);playGame(uint numberChosen, uint gameID);endGame(bool isDivisibleResult, uint gameID);getGameDetails(uint gameID);getNumberOfGames();kill();function()"
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.114/node_modules/prettier-plugin-solidity/tests/StyleGuide/MaximumLineLength.sol,""
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.116/node_modules/prettier-plugin-solidity/tests/StyleGuide/MaximumLineLength.sol,""
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.119/node_modules/prettier-plugin-solidity/tests/StyleGuide/MaximumLineLength.sol,""
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.118/node_modules/prettier-plugin-solidity/tests/StyleGuide/MaximumLineLength.sol,""
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.120/node_modules/prettier-plugin-solidity/tests/StyleGuide/MaximumLineLength.sol,""
winsvega/solidity,test/libsolidity/syntaxTests/functionTypes/function_type_returned.sol,f()
bobsummerwill/solidity,test/libsolidity/syntaxTests/functionTypes/function_type_returned.sol,f()
benjaminion/solidity,test/libsolidity/syntaxTests/functionTypes/function_type_returned.sol,f()
iurimatias/embark-framework,dapps/tests/app/another_folder/another_test.sol,SimpleStorage(uint initialValue);set(uint x);get()
winsvega/solidity,test/libsolidity/syntaxTests/dataLocations/function_type_array_as_reference_type.sol,b(function(Nested memory);c(function(Nested memory);d(function(Nested memory)
bobsummerwill/solidity,test/libsolidity/syntaxTests/dataLocations/function_type_array_as_reference_type.sol,b(function(Nested memory);c(function(Nested memory);d(function(Nested memory)
ethereum/solidity,test/libsolidity/syntaxTests/dataLocations/function_type_array_as_reference_type.sol,b(function(Nested memory);c(function(Nested memory);d(function(Nested memory)
customizablebasicincome/cbi-tokensale,node_modules/zeppelin-solidity/contracts/ownership/HasNoEther.sol,HasNoEther();reclaimEther()
pash7ka/zeppelin-solidity,contracts/ownership/HasNoEther.sol,HasNoEther();reclaimEther()
iswarm/p2pCny,contracts/ownership/HasNoEther.sol,HasNoEther();reclaimEther()
adklempner/solidity-license,contracts/zeppelin/ownership/HasNoEther.sol,HasNoEther();reclaimEther()
LindaHealthcareICO/linda-crowdsale,contracts/zeppelin/ownership/HasNoEther.sol,HasNoEther();reclaimEther()
readevalprint/aragon-core,contracts/zeppelin/ownership/HasNoEther.sol,HasNoEther();reclaimEther()
adamdossa/ProfitSharingContract,installed_contracts/zeppelin/contracts/ownership/HasNoEther.sol,HasNoEther();reclaimEther()
cinderblockchain/cindertoken,contracts/ownership/HasNoEther.sol,HasNoEther();reclaimEther()
dmx374/zeppelin-solidity,contracts/ownership/HasNoEther.sol,HasNoEther();reclaimEther()
pz7/liquet,node_modules/zeppelin-solidity/contracts/ownership/HasNoEther.sol,HasNoEther();reclaimEther()
cashpokerpro-dev/cash-smartcontracts,contracts/ownership/HasNoEther.sol,HasNoEther();reclaimEther()
Great-Hill-Corporation/daodeepdive,assets/contracts/04-ManagedAccount.sol,"ManagedAccount(address _owner, bool _payOwnerOnly);payOut(address _recipient, uint _amount)"
credsign/credsign.github.io,contracts/Identity.sol,Identity();register(uint256 identity);identify(address owner)
besttests/ethereum,spec/contracts/sample.sol,"deposit(uint _id);refill();withdraw(address _to, uint _value);drain(address _to, uint _value)"
ethereum/solidity,test/libsolidity/semanticTests/constructor/constructor_function_argument.sol,""
NoahZinsmeister/ProveIt,contracts/Prover.sol,"Prover();registeredUsers();userEntries(address target);entryInformation(address target, bytes32 dataHash);addEntry(bytes32 dataHash);deleteEntry(bytes32 dataHash);selfDestruct()"
ethereum/solidity,test/libsolidity/syntaxTests/types/mapping/function_type_argument_external.sol,f(function(mapping(uint=>uint)
mahendra-panchal/smart-contract-basics,DSProxy.sol,"DSProxy(address _cacheAddr);execute(bytes _code, bytes _data);execute(address _target, bytes _data);setCache(address _cacheAddr);build();build(address owner);read(bytes _code);write(bytes _code)"
ethereum/solidity,test/libsolidity/syntaxTests/types/contractTypeType/members/assign_function_via_contract_name_to_var.sol,f();g();h()
KPull/eth-membership-tokens,contracts/EthApplicationRegistrar.sol,"EthApplicationRegistrar(ExpiringMembership _membershipContract, Application _applications, uint _price, uint _duration);changePrice(uint _price);changeDuration(uint _duration);purchaseMembership();withdrawApplication();processWithdrawalForAccount(address _account);withdraw();isMembershipAllowed(address _member);applicationApproved(address _applicant, address _approver);applicationRejected(address _applicant, address _approver)"
aragon/aragon-network-token,packages/sale/contracts/MultiSigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
ethereum/solidity,test/libsolidity/syntaxTests/functionTypes/function_type_return_parameters_with_names.sol,""
VelocityMarket/Options-Contract,Contracts/finaloptions.sol,"finalOptions();getPrices(uint blockNumber);getBTCETH(uint blockNumber);newOption(address addr, uint amount, bool long);goLong();goShort();findOptionId(address addr);applyLOT(uint amount);priceUnitFix(uint amount);exercise();exercise(uint optionId);payAndHandle(uint optionId, address addr, uint amount);changeMargin(uint newMargin);changeLOT(uint newLOT);changeBlocksToExpire(uint newExpiryBlock);immediateRefund();fundMe()"
ethereum/solidity,test/libsolidity/syntaxTests/functionTypes/function_type_arrays.sol,f()
aragon/aragon-network-token,packages/sale/test/helpers/ThrowProxy.sol,ThrowProxy(address _target);assertThrows(string msg);assertItDoesntThrow(string msg);execute()
ethereum/solidity,test/libsolidity/semanticTests/events/event_indexed_function2.sol,""
snclucas/ethereum-ipoi,contracts/ipoi.sol,"IPOI(uint feeParam);changeContractFee(uint newFee);createIdea(address ideaOwner, address[] partiesEntry, string descriptionEntry);getIdea(address ideaOwner);getIdeaDate(uint ideaId);getIdeaDescription(uint ideaId);getIdeaParties(uint ideaId);getOwner();ideaProofDocument(bytes IPOIProofHash, uint ideaId);destroy()"
kowala-tech/kUSD,client/contracts/truffle/contracts/ownership/MultiSigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);external_call(address destination, uint value, uint dataLength, bytes data);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
cgewecke/solcover,test/sources/zeppelin/MultisigWallet.sol,"MultisigWallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
WingsDao/contracts,contracts/zeppelin/MultisigWallet.sol,"MultisigWallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
JoinColony/solcover,test/sources/zeppelin/MultisigWallet.sol,"MultisigWallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.114/node_modules/solium/test/lib/rules/blank-lines/reject/function.sol,spam();ham();sam();normalFunc()
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.118/node_modules/solium/test/lib/rules/blank-lines/reject/function.sol,spam();ham();sam();normalFunc()
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.119/node_modules/solium/test/lib/rules/blank-lines/reject/function.sol,spam();ham();sam();normalFunc()
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.116/node_modules/solium/test/lib/rules/blank-lines/reject/function.sol,spam();ham();sam();normalFunc()
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.120/node_modules/solium/test/lib/rules/blank-lines/reject/function.sol,spam();ham();sam();normalFunc()
duaraghav8/Solium,test/lib/rules/blank-lines/reject/function.sol,spam();ham();sam();normalFunc()
ethereum/dapp-bin,clientreceipt/clientreceipt.sol,"nominate(address _keyholder, address _executive);open();close();deposit(bytes32 _id);refill();withdraw(address _to, uint _value);drain(address _to, uint _value)"
vaporry/dapp-bin,clientreceipt/clientreceipt.sol,"nominate(address _keyholder, address _executive);open();close();deposit(bytes32 _id);refill();withdraw(address _to, uint _value);drain(address _to, uint _value)"
shahankhatch/dapp-bin,clientreceipt/clientreceipt.sol,"nominate(address _keyholder, address _executive);open();close();deposit(bytes32 _id);refill();withdraw(address _to, uint _value);drain(address _to, uint _value)"
LianaHus/dapp-bin,clientreceipt/clientreceipt.sol,"nominate(address _keyholder, address _executive);open();close();deposit(bytes32 _id);refill();withdraw(address _to, uint _value);drain(address _to, uint _value)"
frozeman/ethereum-smart-contracts,clientreceipt/clientreceipt.sol,"nominate(address _keyholder, address _executive);open();close();deposit(bytes32 _id);refill();withdraw(address _to, uint _value);drain(address _to, uint _value)"
RepublicMaster/dapp-bin,clientreceipt/clientreceipt.sol,"nominate(address _keyholder, address _executive);open();close();deposit(bytes32 _id);refill();withdraw(address _to, uint _value);drain(address _to, uint _value)"
ethereum/solidity,test/libsolidity/smtCheckerTests/types/function_type_external_address.sol,"f(address a, function(uint)"
ganchix/ETH_16_Ethereum,UNIT-4/remittanceProject/contracts/Remmittance.sol,"Remmittance(uint duration, uint _fee);getHashFromData(bytes32 passOne, bytes32 passTwo);create(address destination, bytes32 hashPassword);withdrawCommission();withdraw(bytes32 passOne, bytes32 passTwo);claimRefund(address destination, bytes32 hashPassword);getFee();createHash(address destination, bytes32 passOne, bytes32 passTwo)"
ethereum/solidity,test/libsolidity/syntaxTests/constructor/constructor_function_parameter_disallowed_conversion.sol,f();f();testPure();testView();testDefault();testDifferentSignature(uint a);testInternalFunction()
credsign/credsign.github.io,contracts/indexes/ChannelSeries.sol,ChannelSeries(address contentContract);add(uint256 contentID);getSize(uint256 channelID)
ethereum/solidity,test/libsolidity/semanticTests/viaYul/comparison_functions.sol,equal();unequal()
SwapyNetwork/swapy-exchange-protocol,test/TestInvestmentAsset_investment.sol,"shouldThrow(bool result);testInvestorAddressMustBeValid();testUnavailableActionsWhenAvaiable();testUserCanInvest();testUnavailableActionsWhenPending();testOnlyInvestorCanCancelInvestment();testInvestorCanCancelInvestment();testOnlyOwnerCanRefuseInvestment();testOwnerCanRefuseInvestment();testOnlyOwnerCanWithdrawFunds();testOwnerCanWithdrawFunds();testUnavailableActionsWhenInvested();testOnlyOwnerCanReturnInvestment();testOwnerCanReturnInvestment();testUnavailableActionsWhenReturned();refuseInvestment(address _asset);withdrawFunds(address _asset);returnInvestment(address _asset, uint256 _value)"
winsvega/solidity,test/libsolidity/syntaxTests/nameAndTypeResolution/077_fallback_function_with_return_parameters.sol,""
dbrainio/Soltsice,contracts/MultiSigWallet.sol,"addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes memory data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes memory data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
merlox/dapp-transactions,contracts/workingBackup/Transaction.sol,extractEther();getInitialData();getHashAddresses();releaseFundsWhenBothSigned();storeLedgersInIpfs();kill()
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.120/node_modules/prettier-plugin-solidity/tests/BinaryOperators/Parentheses.sol,""
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.116/node_modules/prettier-plugin-solidity/tests/BinaryOperators/Parentheses.sol,""
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.114/node_modules/prettier-plugin-solidity/tests/BinaryOperators/Parentheses.sol,""
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.118/node_modules/prettier-plugin-solidity/tests/BinaryOperators/Parentheses.sol,""
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.119/node_modules/prettier-plugin-solidity/tests/BinaryOperators/Parentheses.sol,""
pipermerriam/ethereum-alarm-clock,contracts/TransactionRequestCore.sol,"execute();cancel();claim();requestData();callData();proxy(address _to, bytes _data);refundClaimDeposit();sendFee();sendBounty();sendOwnerEther();sendOwnerEther(address recipient)"
ChronoBank/LX-SC,contracts/UserLibrary.sol,"setupEventsHistory(address _eventsHistory);hasArea(address _user, uint _area);getCategoryInfo(address _user, uint _area, uint _category);hasCategory(address _user, uint _area, uint _category);getUserSkills(address _user);getUsersCount();addMany(address _user, uint _areas, uint[] _categories, uint[] _skills);setMany(address _user, uint _areas, uint[] _categories, uint[] _skills);_addArea(address _user, uint _area);_addCategory(address _user, uint _area, uint _category);_setAreas(address _user, uint _areas);_setCategories(address _user, uint _area, uint _categories);_setSkills(address _user, uint _area, uint _category, uint _skills);_isValidAreaOrCategory(uint _value);_getAreaOrCategoryBits(uint _value);_emitSkillAreasSet(address _user, uint _areas);_emitSkillCategoriesSet(address _user, uint _area, uint _categories);_emitSkillsSet(address _user, uint _area, uint _category, uint _skills);emitSkillAreasSet(address _user, uint _areas);emitSkillCategoriesSet(address _user, uint _area, uint _categories);emitSkillsSet(address _user, uint _area, uint _category, uint _skills)"
orbro/eth-enablers,ethereumWallContract.sol,"EtheriumWall(string newCategory);sendMessage(string message);like(uint messageId);collectDonations(uint amount, address recipient);transferOwnership(address newOwner)"
winsvega/solidity,test/libsolidity/syntaxTests/functionTypes/function_type_internal_public_variable.sol,""
bobsummerwill/solidity,test/libsolidity/syntaxTests/functionTypes/function_type_internal_public_variable.sol,""
benjaminion/solidity,test/libsolidity/syntaxTests/functionTypes/function_type_internal_public_variable.sol,""
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.116/node_modules/prettier-plugin-solidity/tests/Comments/Comments.sol,hello();someFunction();someFunction();someFunction();someFunction();someOtherFunction(/* checking for Block comment */);f()
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.119/node_modules/prettier-plugin-solidity/tests/Comments/Comments.sol,hello();someFunction();someFunction();someFunction();someFunction();someOtherFunction(/* checking for Block comment */);f()
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.118/node_modules/prettier-plugin-solidity/tests/Comments/Comments.sol,hello();someFunction();someFunction();someFunction();someFunction();someOtherFunction(/* checking for Block comment */);f()
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.120/node_modules/prettier-plugin-solidity/tests/Comments/Comments.sol,hello();someFunction();someFunction();someFunction();someFunction();someOtherFunction(/* checking for Block comment */);f()
doppio/EtherWheel,contracts/ether-wheel.sol,"EtherWheel(uint _goalInFinney, uint _incrementInFinney, uint8 _recentWinsCount);numContributors();numWinners();addToContribution();addValueToContribution(uint value);removeFromContribution(uint amount);setContribution(uint amount);selectWinner();recordWin(address winner);reset();changeHost(address newHost);destroy()"
kinfoundation/kin-token,contracts/MultiSigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
transmute-industries/eth-faucet,contracts/Faucet.sol,"Faucet(string _name, address _creator);setBlockLimit(uint limit);getBlockLimit();setSendAmount(uint256 val);getSendAmount();getBalance();getRequestorAddresses();getRemainingBlocks();addRequestorAddress(address _requestor);authorizeRequestorAddress(address _requestor);revokeRequestorAddress(address _requestor);isAddressAuthorized(address _address);sendWei(address recp);getWei()"
ethereum/solidity,test/libsolidity/syntaxTests/abiEncoder/v1_call_to_v2_contract_function_pointer_accepting_struct.sol,get(Item memory _item);foo()
AriseID/ariseid-core,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
woshidama323/hello-github,contracts/BetContract.sol,"roundinfo();buy(uint256 _affCode);checkPrize(uint256 _pID, uint256 _affCode, bytes ticket);judge(uint256 pId, bytes ticket);withdraw();activate();updateNextRoundInfo();newRound();generateRandom()"
Dsummers91/family-wallet-etherum-contract,contracts/Migrations.sol,Migrations();setCompleted(uint completed);upgrade(address new_address)
SafecontractDev/protocol,contracts/bancor_contracts/BancorBuyer.sol,"token();getReserveBalance(IERC20Token _reserveToken);BancorBuyer(IBancorChanger _changer, IEtherToken _etherToken);buy(uint256 _minReturn)"
ethereum/solidity,test/libsolidity/semanticTests/functionTypes/same_function_in_construction_and_runtime_equality_check.sol,test();double(uint256 _arg)
DecentralizedEscrow/pre-ico,contracts/DEST.sol,"hasStarted();hasFinished();tokensAreLiquid();price(uint _v);refund();withdraw();transfer(address _to, uint _value);transferFrom(address _from, address _to, uint _value);approve(address _spender, uint _value)"
orbro/eth-enablers,protectTheCastle.sol,ProtectTheCastle();repairTheCastle();function();surrender();newBribedCitizen(address newBribedCitizen);collectFee();newJester(address newJester)
jkeesh/dogetoken,contracts/contract.sol,"balanceOf(address _owner);transfer(address _to, uint256 _value);name();symbol();decimals();balanceOf(address _owner);transfer(address _to, uint256 _value);transferFrom(address _from, address _to, uint256 _value);approve(address _spender, uint256 _value);allowance(address _owner, address _spender);enablePurchasing();disablePurchasing();withdrawForeignTokens(address _tokenContract);getStats()"
AugurProject/augur-core,source/contracts/libraries/Delegator.sol,"Delegator(IController _controller, bytes32 _controllerLookupName)"
credsign/credsign.github.io,contracts/indexes/AddressSeries.sol,AddressSeries(address contentContract);add(uint256 contentID);getSize(address publisher)
pz7/liquet,contracts/Liquet.sol,Liquet()
ethereum/solidity,test/libsolidity/semanticTests/virtualFunctions/internal_virtual_function_calls_through_dispatch.sol,f();g();g();h()
Project-WikiGit/WikiGit,dev/contracts/vault.sol,"payoutPendingWithdrawl(uint _id);invalidatePendingWithdrawl(uint _id);changeFreezeTime(uint _newTime, bool _isReward);getPendingWithdrawlListCount()"
cgewecke/solcover,test/sources/zeppelin/Bounty.sol,createTarget();deployContract();checkInvariant();claim(Target target);checkInvariant()
WingsDao/contracts,contracts/zeppelin/Bounty.sol,createTarget();deployContract();checkInvariant();claim(Target target);checkInvariant()
Atzen2/hacking-law-proto,truffle/node_modules/zeppelin-solidity/contracts/Bounty.sol,createTarget();deployContract();checkInvariant();claim(Target target);checkInvariant()
Atzen2/hacking-law-proto,truffle/contracts/zeppelin/Bounty.sol,createTarget();deployContract();checkInvariant();claim(Target target);checkInvariant()
JoinColony/solcover,test/sources/zeppelin/Bounty.sol,createTarget();deployContract();checkInvariant();claim(Target target);checkInvariant()
winsvega/solidity,test/libsolidity/syntaxTests/types/address/address_to_contract_payable_fallback.sol,f()
credsign/credsign.github.io,contracts/Content.sol,"Content();publish(string channel, string header, bytes body, address[] indexes);toContentID(address publisher, uint256 channelID, string header, bytes body);toChannelID(string channel);getPublisher(uint256 contentID);getChannelID(uint256 contentID);getTimestamp(uint256 contentID);getAttributes(uint256 contentID)"
iurimatias/embark-framework,dapps/tests/contracts/contracts/simple_storage.sol,set(uint x);get();getS()
ethereum/dapp-bin,registrar/GlobalRegistrar.sol,"addr(string _name);name(address _owner);owner(string _name);addr(string _name);subRegistrar(string _name);content(string _name);name(address _owner);onAuctionEnd(string _name);bid(string _name, address _bidder, uint _value);Registrar();onAuctionEnd(string _name);reserve(string _name);requiresAuction(string _name);setOwner(string _name, address _newOwner);disown(string _name);setName(string _name);setAddress(string _name, address _a);setSubRegistrar(string _name, address _registrar);setContent(string _name, bytes32 _content);stringsEqual(string storage _a, string memory _b);owner(string _name);addr(string _name);subRegistrar(string _name);content(string _name);name(address _addr)"
EtherBattle/Ether-Battle-Token-Contract,EtherBattleCoin.sol,"safeSub(uint256 a, uint256 b);EtherBattleCoin();name();symbol();decimals();totalSupply();balanceOf(address _owner);allowance(address _owner, address _spender);transferFrom(address _from, address _to, uint256 _value);approve(address _spender, uint256 _value);transfer(address _to, uint256 _value);isContract(address _address);transfer(address _to, uint256 _value, bytes _data);transferToAddress(address _to, uint256 _value, bytes _data);transferToContract(address _to, uint256 _value, bytes _data);tokenFallback(address _sender, uint256 _value, bytes _data);claimTokens(address _token);tokenMultiplier();burnLeftovers();convertToATK(uint256 _value);convertToDEF(uint256 _value);logIn();logOut();claimCooldowns();getPlayerStats();attack(address _target);retaliate();randomAttack();randomTargetAssign();raiseLimit()"
winsvega/solidity,test/libsolidity/syntaxTests/inlineAssembly/two_stack_slots.sol,f()
bobsummerwill/solidity,test/libsolidity/syntaxTests/inlineAssembly/two_stack_slots.sol,f()
misrab/gethools,testdata/imp1.sol,b()
mixbytes/storiqa_ico,contracts/crowdsale/InvestmentAnalytics.sol,"AnalyticProxy();InvestmentAnalytics();createMorePaymentChannelsInternal(uint limit);iaInvestedBy(address investor);iaOnInvested(address /*investor*/, uint /*payment*/, bool /*usingPaymentChannel*/);paymentChannelsCount();readAnalyticsMap();readPaymentChannels()"
Storiqa/ico_smart_contract,contracts/crowdsale/InvestmentAnalytics.sol,"AnalyticProxy();InvestmentAnalytics();createMorePaymentChannelsInternal(uint limit);iaInvestedBy(address investor);iaOnInvested(address /*investor*/, uint /*payment*/, bool /*usingPaymentChannel*/);paymentChannelsCount();readAnalyticsMap();readPaymentChannels()"
ethereum/solidity,test/libsolidity/semanticTests/viaYul/delete.sol,internal_func();call_internal_func();call_deleted_internal_func()
sc-forks/solidity-coverage,test/sources/solidity/contracts/statements/type-keyword.sol,setOwner(address _owner);destroy(address payable recipient)
bdbi/ERC20-simple-marketplace,contracts/marketplace/SimpleMarketplace.sol,"createNewTrade(address _token, uint256 _amount, uint256 _price);withdraw();tokenRecovery(address _token, address _recipient, uint256 _amount);tokenRecoveryFromTrade(address _trade, address _token, address _recipient, uint256 _amount)"
trust-tech/go-trustmachine,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
ethereum/solidity,test/libsolidity/syntaxTests/iceRegressionTests/calling_external_function_via_parameter_with_invalid_type.sol,""
Spreadway/core,DAO-develop/DAO.sol,"vote(uint _proposalID, bool _supportsProposal);newContract(address _newContract);changeAllowedRecipients(address _recipient, bool _allowed);changeProposalDeposit(uint _proposalDeposit);halveMinQuorum();numberOfProposals();getOrModifyBlocked(address _account);unblockMe();vote(uint _proposalID, bool _supportsProposal);unVote(uint _proposalID);unVoteAll();verifyPreSupport(uint _proposalID);closeProposal(uint _proposalID);withdraw();newContract(address _newContract);changeProposalDeposit(uint _proposalDeposit);changeAllowedRecipients(address _recipient, bool _allowed);actualBalance();minQuorum(uint _value);halveMinQuorum();numberOfProposals();getOrModifyBlocked(address _account);unblockMe()"
slockit/DAO,DAO.sol,"vote(uint _proposalID, bool _supportsProposal);newContract(address _newContract);changeAllowedRecipients(address _recipient, bool _allowed);changeProposalDeposit(uint _proposalDeposit);halveMinQuorum();numberOfProposals();getOrModifyBlocked(address _account);unblockMe();vote(uint _proposalID, bool _supportsProposal);unVote(uint _proposalID);unVoteAll();verifyPreSupport(uint _proposalID);closeProposal(uint _proposalID);withdraw();newContract(address _newContract);changeProposalDeposit(uint _proposalDeposit);changeAllowedRecipients(address _recipient, bool _allowed);actualBalance();minQuorum(uint _value);halveMinQuorum();numberOfProposals();getOrModifyBlocked(address _account);unblockMe()"
ashellwig/Ethereum-Mutual-Fund,DAO.sol,"vote(uint _proposalID, bool _supportsProposal);newContract(address _newContract);changeAllowedRecipients(address _recipient, bool _allowed);changeProposalDeposit(uint _proposalDeposit);halveMinQuorum();numberOfProposals();getOrModifyBlocked(address _account);unblockMe();vote(uint _proposalID, bool _supportsProposal);unVote(uint _proposalID);unVoteAll();verifyPreSupport(uint _proposalID);closeProposal(uint _proposalID);withdraw();newContract(address _newContract);changeProposalDeposit(uint _proposalDeposit);changeAllowedRecipients(address _recipient, bool _allowed);actualBalance();minQuorum(uint _value);halveMinQuorum();numberOfProposals();getOrModifyBlocked(address _account);unblockMe()"
zchn/ethereum-analyzer,examples/slockit/DAO.sol,"vote(uint _proposalID, bool _supportsProposal);newContract(address _newContract);changeAllowedRecipients(address _recipient, bool _allowed);changeProposalDeposit(uint _proposalDeposit);halveMinQuorum();numberOfProposals();getOrModifyBlocked(address _account);unblockMe();vote(uint _proposalID, bool _supportsProposal);unVote(uint _proposalID);unVoteAll();verifyPreSupport(uint _proposalID);closeProposal(uint _proposalID);withdraw();newContract(address _newContract);changeProposalDeposit(uint _proposalDeposit);changeAllowedRecipients(address _recipient, bool _allowed);actualBalance();minQuorum(uint _value);halveMinQuorum();numberOfProposals();getOrModifyBlocked(address _account);unblockMe()"
ethereum/solidity,test/libsolidity/semanticTests/uninitializedFunctionPointer/storeInConstructor.sol,f()
federicobond/solidity-antlr4,test.sol,"f(uint a, uint b);g(uint c);f();fun(uint256 a);f();f();f();f();f();fun();fun();fun();fun();fun();f(ufixed x, fixed32x32 y);fun(uint256 a);functionName(bytes20 arg1, address addr);fun(uint256 a);x();fun(uint256 a);fun(uint256 a);fun(uint256 a);fun(uint256 a);functionName(bytes32 input);fun(uint256 a);fun();f();f();test();f();f(uint[] constant x, uint[] memory y);f();f();g();fun();fun();fun();fun();foo(uint a);bar(string a, string b);fun();f();functionName();fun(int256 a);fun(uint a);fun(uint a, uint b);fun();functionName(bytes32 input);fun();f();fun();f();f();fun(uint256 a);fun(uint256 a);f();f_priv();f_public();f_internal();fun(uint256 a);f(x);f();g();f();f();foo();_finalization()"
solidityj/solidity-antlr4,test.sol,"f(uint a, uint b);g(uint c);f();fun(uint256 a);f();f();f();f();f();fun();fun();fun();fun();fun();f(ufixed x, fixed32x32 y);fun(uint256 a);functionName(bytes20 arg1, address addr);fun(uint256 a);x();fun(uint256 a);fun(uint256 a);fun(uint256 a);fun(uint256 a);functionName(bytes32 input);fun(uint256 a);fun();f();f();test();f();f(uint[] constant x, uint[] memory y);f();f();g();fun();fun();fun();fun();foo(uint a);bar(string a, string b);fun();f();functionName();fun(int256 a);fun(uint a);fun(uint a, uint b);fun();functionName(bytes32 input);fun();f();fun();f();f();fun(uint256 a);fun(uint256 a);f();f_priv();f_public();f_internal();fun(uint256 a);f(x);f();g();f();f();foo();_finalization()"
sonm-io/core,blockchain/source/contracts/MultiSigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);external_call(address destination, uint value, uint dataLength, bytes data);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
smartexio/smartex-contracts,SmartexFundManager.sol,"SmartexFundsManager();addShareholder(address payoutAccount, uint shares);payDividends(uint startOffset, uint stopOffset, uint value);payDividend(uint shareholderId, uint value);sweep(address _to);advSend(address _to, uint _value, bytes _data)"
coder-forge/chain-forge,contracts/Forge.sol,Forge();getBalance();payOrganizer();setName(bytes32 name);setOrganiser(address organiser);setUrl(bytes32 url);kill()
ethereum/solidity,test/libsolidity/semanticTests/inheritance/super_in_constructor_assignment.sol,f();f();f();f()
LykkeCity/EthereumApiDotNetCore,src/ContractBuilder/contracts/ethTransferContract.sol,EthTransferContract(address coinAdapterAddress);cashin()
daostack/daostack,contracts/controller/Avatar.sol,"genericCall(address _contract, bytes memory _data, uint256 _value);sendEther(uint256 _amountInWei, address payable _to);externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value);externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value);metaData(string memory _metaData)"
orbro/eth-enablers,DAO-develop/ManagedAccount.sol,"payOut(address _recipient, uint _amount);ManagedAccount(address _owner, bool _payOwnerOnly);payOut(address _recipient, uint _amount)"
gleim/DAO,ManagedAccount.sol,"payOut(address _recipient, uint _amount);ManagedAccount(address _owner, bool _payOwnerOnly);payOut(address _recipient, uint _amount)"
Lunyr/crowdsale-contracts,contracts/LunyrToken.sol,"upgradeFrom(address _from, uint256 _value);LUNVault(address _lunyrMultisig);unlock();balanceOf(address who);transfer(address to, uint256 value);transferFrom(address from, address to, uint value);approve(address spender, uint256 value);allowance(address owner, address spender);upgrade(uint256 value);setUpgradeAgent(address agent);setUpgradeMaster(address master);setMultiSigWallet(address newWallet);create();finalizeCrowdfunding();refund();getState()"
winsvega/solidity,test/libsolidity/syntaxTests/fallback/view_modifier.sol,""
ethereum/solidity,test/libsolidity/syntaxTests/functionTypes/call_value_library_function.sol,value(function();f()
winsvega/solidity,test/libsolidity/semanticTests/viaYul/delete.sol,internal_func();call_internal_func();call_deleted_internal_func()
bobsummerwill/solidity,test/libsolidity/semanticTests/viaYul/delete.sol,internal_func();call_internal_func();call_deleted_internal_func()
zchn/ethereum-analyzer,examples/co2.unica.it/ethereum/GaslessSend_42.sol,"pay(uint n, address d);a();b();c();d();e();f();g();h();i();k();j();l();m();n();o();p();q();r();s();t();u();v();w();x();y();z()"
orbro/eth-enablers,etherPotLotto.sol,"getBlocksPerRound();getTicketPrice();getRoundIndex();getIsCashed(uint roundIndex,uint subpotIndex);calculateWinner(uint roundIndex, uint subpotIndex);getDecisionBlockNumber(uint roundIndex,uint subpotIndex);getSubpotsCount(uint roundIndex);getSubpot(uint roundIndex);cash(uint roundIndex, uint subpotIndex);getHashOfBlock(uint blockIndex);getBuyers(uint roundIndex,address buyer);getTicketsCountByBuyer(uint roundIndex,address buyer);getPot(uint roundIndex)"
DRI-project/RICO,contracts/MultiSigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
ethereum/btcrelay,test/headerSubmitter.sol,"storeBlockHeader(bytes blockHeaderBytes);storeBlockWithFee(bytes blockHeaderBytes, int256 fee);storeHeader(bytes header, address btcrelayAddr);storeHeaderWithFee(bytes header, int256 fee, address btcrelayAddr)"
silasdavis/eris-db,tests/jobs_fixtures/app37-fallback_function/fallback.sol,""
silasdavis/burrow,tests/jobs_fixtures/app37-fallback_function/fallback.sol,""
eris-ltd/eris-db,tests/jobs_fixtures/app37-fallback_function/fallback.sol,""
winsvega/solidity,test/libsolidity/semanticTests/uninitializedFunctionPointer/store2.sol,run();z()
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.120/node_modules/solparse-exp-jb/test/doc_examples.sol,"f();c();test(uint class);getChoice();Base(uint i);Derived(uint i);blah();f(uint x, uint y);f(uint x, uint y);g(uint pos);setData(uint pos, uint value);getData(uint pos);sendHalf(address addr);bar(uint[] memory self, function (uint);f(uint[][] calldata x);insert(data storage self, uint value);remove(data storage self, uint value);contains(data storage self, uint value);iterate_start(data storage self);iterate_valid(data storage self, uint index);iterate_advance(data storage self, uint index);iterate_get(data storage self, uint index);insert(uint v);sum();DualIndex();set(uint key1, uint key2, uint value);transfer_ownership(address _admin);lookup(uint key1, uint key2);functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage);something();sum(uint[] storage self);someFunction();fun();at(address _addr);test();get();foobar();bax();foobar();foo();bar(lorem, ipsum, dollar, quote);axe();baxe(a, bc, def, ghij);returnNumber(uint number);alloc();ham(S storage s1, uint[] storage arr);getMyTuple();abstain();foobar();foobar();a();bar(address);dell(function(int a, bool bcd);foo()"
glenngillen/dotfiles,.vscode/extensions/juanblanco.solidity-0.0.119/node_modules/solparse-exp-jb/test/doc_examples.sol,"f();c();test(uint class);getChoice();Base(uint i);Derived(uint i);blah();f(uint x, uint y);f(uint x, uint y);g(uint pos);setData(uint pos, uint value);getData(uint pos);sendHalf(address addr);bar(uint[] memory self, function (uint);f(uint[][] calldata x);insert(data storage self, uint value);remove(data storage self, uint value);contains(data storage self, uint value);iterate_start(data storage self);iterate_valid(data storage self, uint index);iterate_advance(data storage self, uint index);iterate_get(data storage self, uint index);insert(uint v);sum();DualIndex();set(uint key1, uint key2, uint value);transfer_ownership(address _admin);lookup(uint key1, uint key2);functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage);something();sum(uint[] storage self);someFunction();fun();at(address _addr);test();get();foobar();bax();foobar();foo();bar(lorem, ipsum, dollar, quote);axe();baxe(a, bc, def, ghij);returnNumber(uint number);alloc();ham(S storage s1, uint[] storage arr);getMyTuple();abstain();foobar();foobar();a();bar(address);dell(function(int a, bool bcd);foo()"
nipunn1313/parity,js/src/contracts/snippets/wallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);getOwner(uint ownerIndex);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);create(uint _value, bytes _code);confirm(bytes32 _h);clearPending()"
destenson/ethcore--parity,js-old/src/contracts/snippets/wallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);getOwner(uint ownerIndex);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);create(uint _value, bytes _code);confirm(bytes32 _h);clearPending()"
Cryptonomica/cryptonomica,src/main/webapp/app/ethidtokens/EthID2.sol,"add(uint256 a, uint256 b);sub(uint256 a, uint256 b);mul(uint256 a, uint256 b);div(uint256 a, uint256 b);mod(uint256 a, uint256 b);onTokenTransfer(address from, uint256 amount, bytes calldata data);tokenFallback(address _from, uint _value, bytes calldata _data);changeOwnerStart(address payable _newOwner);changeOwnerAccept();takeIncomeShare(uint256 valueInTokens);withdrawAllByOwner();transferFrom(address _from, address _to, uint256 _value);transfer(address _to, uint256 _value);transfer(address _to, uint _value, bytes calldata _data);transferAndCall(address _to, uint256 _value, bytes memory _extraData);transferAllAndCall(address _to, bytes calldata _extraData);approve(address _spender, uint256 _value);approve(address _spender, uint256 _currentValue, uint256 _value);approveAndCall(address _spender, uint256 _value, bytes memory _extraData);approveAllAndCall(address _spender, bytes calldata _extraData)"
SwapyNetwork/swapy-exchange-protocol,test/TestInvestmentAsset_marketplace.sol,shouldThrow(bool result);testUnavailableActionsWhenInvested();testOnlyInvestorCanPutOnSale();testInvestorCanPutOnSale();testUnavailableActionsWhenOnSale();testOnlyInvestorCanRemoveOnSale();testInvestorCanRemoveOnSale();testBuyerAddressMustBeValid();testUserCanBuyAsset();testUnavailableActionsWhenPendingSale();testOnlyBuyerCanCancelPurchase();testBuyerCanCancelPurchase();testOnlyInvestorCanRefusePurchase();testInvestorCanRefusePurchase();testOnlyInvestorCanAcceptSale();testInvestorCanAcceptSale();withdrawFunds(address _asset)
WeTrustPlatform/rosca-contracts,contracts/test/TestReEntryAttack.sol,setRoscaAddress(address ROSCAContract_);withdrawTwice();contribute();bid(uint256 bid);startRound()
bobsummerwill/solidity,test/libsolidity/syntaxTests/receiveEther/old_syntax.sol,""
transmute-industries/eth-faucet,contracts/FaucetManager.sol,"FaucetManager();getFaucetByCreator();getFaucetByName(string _name);getFaucets();createFaucet(string _name);requestAccess(address _faucetAddress, address _requestorAddress );authorizeAccess(address _faucetAddress, address _requestorAddress);revokeAccess(address _faucetAddress, address _requestorAddress);killFaucet(address _address, string _name, address _creator)"
pz7/liquet,contracts/lottery/LiquetLottery.sol,"LiquetLottery();bet(uint a, uint b, uint c, uint d, uint e, uint f)"
winsvega/solidity,test/compilationTests/MultiSigWallet/MultiSigWallet.sol,"addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes memory data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes memory data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
ethereum/solidity,test/libsolidity/syntaxTests/abiEncoder/v2_call_to_v2_library_function_pointer_accepting_struct.sol,get(Item memory _item);foo()
ethereum/dapp-bin,wallet/wallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);getOwner(uint ownerIndex);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
hedgepigdaniel/gnomocracy,src/contracts/wallet.sol,"multiowned(address[] _owners, uint _required);revoke(bytes32 _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);getOwner(uint ownerIndex);isOwner(address _addr);hasConfirmed(bytes32 _operation, address _owner);confirmAndCheck(bytes32 _operation);reorganizeOwners();clearPending();daylimit(uint _limit);setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);Wallet(address[] _owners, uint _required, uint _daylimit);kill(address _to);execute(address _to, uint _value, bytes _data);confirm(bytes32 _h);clearPending()"
whachoe/eth_tutorial_game,contracts/DiceGame.sol,DiceGame();guessNumber(uint guess);reset();setMinimumBet(uint newMinimumBet);destroy()
BeBlockTech/Anemoi,BeBlock-Master/WePowerPresaleContractAudit-master/contracts/MultiSigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
adklempner/automte-exchange-contracts,contracts/MultiSigWallet.sol,"MultiSigWallet(address[] _owners, uint _required);addOwner(address owner);removeOwner(address owner);replaceOwner(address owner, address newOwner);changeRequirement(uint _required);submitTransaction(address destination, uint value, bytes data);confirmTransaction(uint transactionId);revokeConfirmation(uint transactionId);executeTransaction(uint transactionId);isConfirmed(uint transactionId);addTransaction(address destination, uint value, bytes data);getConfirmationCount(uint transactionId);getTransactionCount(bool pending, bool executed);getOwners();getConfirmations(uint transactionId);getTransactionIds(uint from, uint to, bool pending, bool executed)"
winsvega/solidity,test/libsolidity/syntaxTests/functionTypes/warn_function_type_parameters_with_names.sol,""
bobsummerwill/solidity,test/libsolidity/syntaxTests/functionTypes/warn_function_type_parameters_with_names.sol,""
benjaminion/solidity,test/libsolidity/syntaxTests/functionTypes/warn_function_type_parameters_with_names.sol,""
ethereum/solidity,test/libsolidity/syntaxTests/parsing/mapping_and_array_of_functions.sol,""
winsvega/solidity,test/libsolidity/syntaxTests/functionTypes/external_function_type_returning_internal.sol,""
bobsummerwill/solidity,test/libsolidity/syntaxTests/functionTypes/external_function_type_returning_internal.sol,""
benjaminion/solidity,test/libsolidity/syntaxTests/functionTypes/external_function_type_returning_internal.sol,""
Braveno/cosigner,cosigner-ethereum-token-storage/SolidityContracts/Old/EthStorageContract.sol,"calculateTxHash();calculateHash(address[] hashTransactions, uint[] hashValues);calculateAdminTxHash();confirmTransactionSig();confirmTransaction();confirmAdminTx(uint nonce);ownerIndexBit(address addr);getNonce();getSecurityValue();isOwner(address addr);getOwners();min(uint val1, uint val2);max(uint val1, uint val2);balanceOf(address _owner);totalSupply();freezeContract(bool freeze, uint nonce, uint8[] sigV, bytes32[] sigR, bytes32[] sigS);deleteContract(uint nonce, uint8[] sigV, bytes32[] sigR, bytes32[] sigS);deposit(address _to);revoke(bytes32 _operation);clearPending();transfer(address _from, address _to, uint _value);transfer(address _to, uint _value);confirm(bytes32 _h);confirmAndCheck(bytes32 _operation);topUp()"
EMAXio/cosigner,cosigner-ethereum-token-storage/SolidityContracts/Old/EthStorageContract.sol,"calculateTxHash();calculateHash(address[] hashTransactions, uint[] hashValues);calculateAdminTxHash();confirmTransactionSig();confirmTransaction();confirmAdminTx(uint nonce);ownerIndexBit(address addr);getNonce();getSecurityValue();isOwner(address addr);getOwners();min(uint val1, uint val2);max(uint val1, uint val2);balanceOf(address _owner);totalSupply();freezeContract(bool freeze, uint nonce, uint8[] sigV, bytes32[] sigR, bytes32[] sigS);deleteContract(uint nonce, uint8[] sigV, bytes32[] sigR, bytes32[] sigS);deposit(address _to);revoke(bytes32 _operation);clearPending();transfer(address _from, address _to, uint _value);transfer(address _to, uint _value);confirm(bytes32 _h);confirmAndCheck(bytes32 _operation);topUp()"
EMAXio/heimdal,cosigner-ethereum-token-storage/SolidityContracts/Old/EthStorageContract.sol,"calculateTxHash();calculateHash(address[] hashTransactions, uint[] hashValues);calculateAdminTxHash();confirmTransactionSig();confirmTransaction();confirmAdminTx(uint nonce);ownerIndexBit(address addr);getNonce();getSecurityValue();isOwner(address addr);getOwners();min(uint val1, uint val2);max(uint val1, uint val2);balanceOf(address _owner);totalSupply();freezeContract(bool freeze, uint nonce, uint8[] sigV, bytes32[] sigR, bytes32[] sigS);deleteContract(uint nonce, uint8[] sigV, bytes32[] sigR, bytes32[] sigS);deposit(address _to);revoke(bytes32 _operation);clearPending();transfer(address _from, address _to, uint _value);transfer(address _to, uint _value);confirm(bytes32 _h);confirmAndCheck(bytes32 _operation);topUp()"
KayinCheung/KayinCheung.github.io,EscrowMyEtherEntityDB.sol,"EscrowMyEtherEntityDB();registerBuyer(string _name, string _info);registerSeller(string _name, string _info);registerEscrow(string _name, string _info);getBuyerFullInfo(address buyerAddress);getSellerFullInfo(address sellerAddress);getEscrowFullInfo(address escrowAddress)"
FedCoup/FedCoup,installed_contracts/zeppelin/contracts/ownership/HasNoEther.sol,HasNoEther();reclaimEther()
aragon/aragon-core,contracts/test/helpers/ThrowProxy.sol,assertThrows(string _msg);assertItDoesntThrow(string _msg);execute()
trailofbits/manticore,examples/evm/simple_multi_func.sol,Test()
montyly/manticore,examples/evm/simple_multi_func.sol,Test()
ethereum/solidity,test/libsolidity/smtCheckerTests/types/function_type_members.sol,f(function(uint)
Storiqa/ico_smart_contract,contracts/STQCrowdsale.sol,"STQCrowdsale(address[] _owners, address _token, address _funds, address _teamTokens);buy();iaOnInvested(address investor, uint payment, bool usingPaymentChannel);pause();unpause();fail();setToken(address _token);setFundsRegistry(address _funds);checkTime();distributeBonuses(uint investorsLimit);createMorePaymentChannels(uint limit);finishICO();changeState(IcoState _newState);onSuccess();onFailure();getLargePaymentBonus(uint payment);calcSTQAmount(uint _wei, uint extraBonus);recordInvestment(address investor, uint payment, uint timeBonus);getStartTime();getEndTime();getCurrentTime();getMinFunds();getMaximumFunds();getTotalInvested();getLastMaxInvestments()"
ethereum/solidity,test/libsolidity/semanticTests/abiEncoderV2/cleanup/function.sol,ggg(function();h(S calldata x);dummy();ffff(uint256 a)
bitcoinmeetups/dapp-bin,wallet/wallet2.sol,"multiowned();confirmed(hash _operation);changeOwner(address _from, address _to);addOwner(address _owner);removeOwner(address _owner);changeRequirement(uint _newRequired);isOwner(address _addr);daylimit();setDailyLimit(uint _newLimit);resetSpentToday();underLimit(uint _value);today();changeOwner(address _from, address _to);execute(address _to, uint _value, bytes _data);confirm(hash _h);Wallet();kill(address _to);execute(address _to, uint _value, bytes _data);confirm(hash _h);confirmVerbose(hash _h, address _to, uint _value, bytes _data)"
Vorxil/MarketStake,contracts/Ledger.sol,"addPending(address account, uint amount);removePending(address account, uint amount);addLocked(address account, uint amount);removeLocked(address account, uint amount);addGains(address account, uint amount);removeGains(address account, uint amount);balanceOf(address account);supplyOf(address account);freeSpaceOf(address account);invariant(address account)"
ethereum/solidity,test/libsolidity/syntaxTests/types/function_types/selector/local_variable_selector_not_pure.sol,f()
etherfundme/dapp,contracts/EtherFundMeIssueTokensCrowdfunding.sol,"getState();isGoalReached();invest();finalize();refund();halt();unhalt();addMilestone(uint _start, uint _end, uint _bonus);getCurrentMilestone();balanceOf(address _owner);transfer(address _to, uint _value);transferFrom(address _from, address _to, uint _value);approve(address _spender, uint _value);allowance(address _owner, address _spender)"
mwensveen-nl/solidity-testing,src/test/resources/transaction2.sol,getSender();value()
SmartPool/contracts,Testpool.sol,"keccak_f(uint[25] A);sponge(uint[9] M);Ethash();fnv( uint v1, uint v2 );toBE( uint x );computeLeaf( uint[] dataSetLookup, uint index );computeS( uint header, uint nonceLe );reverseBytes( uint input );next(Iterator memory self);next(Iterator memory self, bool strict);hasNext(Iterator memory self);toRLPItem(bytes memory self);toRLPItem(bytes memory self, bool strict);isNull(RLPItem memory self);isList(RLPItem memory self);isData(RLPItem memory self);isEmpty(RLPItem memory self);items(RLPItem memory self);iterator(RLPItem memory self);toBytes(RLPItem memory self);toData(RLPItem memory self);toList(RLPItem memory self);toAscii(RLPItem memory self);toUint(RLPItem memory self);toBool(RLPItem memory self);toByte(RLPItem memory self);toInt(RLPItem memory self);toAddress(RLPItem memory self);_payloadOffset(RLPItem memory self);_itemLength(uint memPtr);_decode(RLPItem memory self);_copyToBytes(uint btsPtr, bytes memory tgt, uint btsLen);_validate(RLPItem memory self);RLPReaderTest();testItemStrict(bytes rlp);testFirst(bytes rlp);testIsList(bytes rlp);testIsData(bytes rlp);testIsNull(bytes rlp);testIsEmpty(bytes rlp);testItems(bytes rlp);testSubItem(bytes rlp, uint index);testToData(bytes rlp);testToUint(bytes rlp);testToInt(bytes rlp);testToAddress(bytes rlp);testToByte(bytes rlp);testToBool(bytes rlp);_testItem(RLP.RLPItem item);testItem(bytes rlp);getItem(bytes rlp, uint itemIndex);Agt();parseBlockHeader( bytes rlpHeader );TestPool( address[3] _owners );declareNewerVersion();register( address paymentAddress );canRegister(address sender);isRegistered(address sender);getMinerId(address sender);getClaimSeed(address sender);submitClaim( uint numShares, uint difficulty, uint min, uint max, uint augMerkle );setEpochData( uint128[] merkleRoot, uint64[] fullSizeIn128Resultion, uint64[] branchDepth, uint[] epoch );getEpochData( uint epoch );verifyExtraData( bytes32 extraData, bytes32 minerId, uint difficulty );getShareIndex(address sender);setSubsidy( uint factor );doPayment( uint numShares, uint difficulty, address paymentAddress )"
fccoelho/Curso_Blockchain,contracts/ICO/node_modules/openzeppelin-solidity/contracts/Bounty.sol,createTarget();claim(Target _target);deployContract();checkInvariant()
lkiversonlk/eth-cms,src/contract/ether_delta.sol,"safeMul(uint a, uint b);safeSub(uint a, uint b);safeAdd(uint a, uint b);assert(bool assertion);totalSupply();balanceOf(address _owner);transfer(address _to, uint256 _value);transferFrom(address _from, address _to, uint256 _value);approve(address _spender, uint256 _value);allowance(address _owner, address _spender);transfer(address _to, uint256 _value);transferFrom(address _from, address _to, uint256 _value);balanceOf(address _owner);approve(address _spender, uint256 _value);allowance(address _owner, address _spender);ReserveToken();create(address account, uint amount);destroy(address account, uint amount);accountLevel(address user);setAccountLevel(address user, uint level);accountLevel(address user);EtherDelta(address admin_, address feeAccount_, address accountLevelsAddr_, uint feeMake_, uint feeTake_, uint feeRebate_);changeAdmin(address admin_);changeAccountLevelsAddr(address accountLevelsAddr_);changeFeeAccount(address feeAccount_);changeFeeMake(uint feeMake_);changeFeeTake(uint feeTake_);changeFeeRebate(uint feeRebate_);deposit();withdraw(uint amount);depositToken(address token, uint amount);withdrawToken(address token, uint amount);balanceOf(address token, address user);order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce);trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount);tradeBalances(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address user, uint amount);testTrade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount, address sender);availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s);amountFilled(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s);cancelOrder(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, uint8 v, bytes32 r, bytes32 s)"
winsvega/solidity,test/libsolidity/semanticTests/uninitializedFunctionPointer/invalidInConstructor.sol,f();f()
bobsummerwill/solidity,test/libsolidity/semanticTests/uninitializedFunctionPointer/invalidInConstructor.sol,f();f()
PeculiumPCL/Peculium,contracts/v1.2/PrivateSale.sol,PrivateSale();InitPeculiumAdress(address peculAdress);buyTokens(address beneficiary);forwardFunds();claimRefund();goalReached();finalize();finalization()
PeculiumPCL/Peculium,contracts/v1.1/PrivateSale.sol,PrivateSale();InitPeculiumAdress(address peculAdress);buyTokens(address beneficiary);forwardFunds();claimRefund();goalReached();finalize();finalization()
Capillar/capillar-solidity,tools/ThrowProxy.sol,ThrowProxy(address _target);execute();remove()
ethereum/solidity,test/libsolidity/syntaxTests/parsing/single_event_arg_trailing_comma.sol,""
ManyCoin/ManyCoin,contracts/chequebook/contract/chequebook.sol,"cash(address beneficiary, uint256 amount, uint8 sig_v, bytes32 sig_r, bytes32 sig_s)"
cgewecke/eth-gas-reporter,mock/contracts/Wallets/Wallet.sol,"transferPayment(uint payment, address payable recipient);sendPayment(uint payment, address payable recipient);getBalance()"
orbro/eth-enablers,kingOfEtherThrone.sol,KingOfTheEtherThrone();numberOfMonarchs();claimThrone(string name);sweepCommission(uint amount);transferOwnership(address newOwner)
ethereum/solidity,test/libsolidity/semanticTests/functionCall/call_internal_function_with_multislot_arguments_via_pointer.sol,"s(uint a, uint b);foo();test()"
papyrusglobal/smartcontracts,contracts/PapyrusSalePhase1.sol,"deploy(address _papyrusToken, uint256 _tokensToSell);setAuctionStart(uint256 _blockIndex);setClaimingStart(uint256 _blockIndex);setPriceEther(uint256 _priceEther);calcCurrentTokenPrice();updateStage();bid(address receiver, uint128 customerId);claim(address receiver, uint128 customerId);exchange(address receiver, uint128 customerId);calcTokenPrice();calcTokenPriceFactor();calcStopPrice();calcStopPriceFactor();finalizeAuction();calcPriceFromFactor(uint256 factor);calcReservedTokens(uint256 tokenAmount, uint256 tokenPrice);calcAllowedWeisToInvest(uint256 tokenPrice)"
stanta/darfchain,ICO/contracts/test/TestMigrationTarget.sol,"TestMigrationTarget(UpgradeableToken _oldToken);upgradeFrom(address _from, uint256 _value)"
ethereum/solidity,test/libsolidity/semanticTests/functionTypes/pass_function_types_internally.sol,f(uint256 x);eval(function(uint);g(uint256 x)
crypto-coder/Tokens,Token_Contracts/contracts/SuddenDecayingTokenFunction.sol,"SuddenDecayingTokenFunction();getFunctionType();executeDecayFunction(uint256 _amount, int256 _rangeLength, int256 _distanceInRange, uint256 _startPercent, uint256 _endPercent)"
bobsummerwill/solidity,test/libsolidity/syntaxTests/inheritance/override/function_pointer.sol,""
Vorxil/MarketStake,contracts/UUID.sol,"setExists(bytes32 id, bool value);new_id();deleteItem(bytes32 id);deleteHelper(bytes32 id)"
maxxflyer/FLOOD,Pretorian.sol,"Pretorian();setController(address displayHyperNamea,bool b);registerCoin(address a,string tokenName,string akr);registerName(string name,address a,string akr);hyperEnable(address a,bool b);registerCoinData(address a,uint initialSupply,uint decimals);newOwner(address a);setDisclaimer(string s);incrementCoin(address a,uint u,bool v);readLog(uint i);readCoin(uint i);ownedCoin(address a,uint u);coinData(address a);whoIS(string name,bool b);kill()"
ethereum/solidity,test/libsolidity/smtCheckerTests/types/function_type_nested_return.sol,r();h()
bas-vk/go-ethereum,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
shahankhatch/go-ethereum,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
WhaleCoinOrg/WhaleCoin,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
kobigurk/go-ethereum,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
karalabe/go-ethereum,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
maichain/listener,vendor/github.com/ethereum/go-ethereum/contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
farazdagi/status-go,vendor/github.com/ethereum/go-ethereum/contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
maran/go-ethereum,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
tooooolong/go-ethereum,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
yondonfu/go-ethereum,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
gluk256/go-ethereum,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
Bo-Ye/go-ethereum,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
jpitts/go-ethereum,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
noeleon930/go-ethereum,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
Getline-Network/getline,vendor/github.com/ethereum/go-ethereum/contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
etherbanking/go-etherbanking,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
kingsi-goderia/go-ethereum,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
am2rican5/go-ethereum,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
kejace/go-ethereum,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
Nepal-Blockchain/go-ethereum,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
micahaza/go-ethereum,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
shellygr/ECFChecker,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
blackzid/go-ethereum,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
xenioplatform/go-xenio,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
lab2528/go-oneTime,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
Yuka-kkk/ethereum2017,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
etherite/go-etherite,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
Alchemist-coin/go-alchemist,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
illya13/ethermint,vendor/github.com/ethereum/go-ethereum/contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
Lopastvertoleta/go-ethereum,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
CTCDEVTEAM/adtonethereum,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
wangluinc/ethermint,vendor/github.com/ethereum/go-ethereum/contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
dubaicoin-dbix/go-dubaicoin,contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
adrianbrink/tendereum,vendor/github.com/ethereum/go-ethereum/contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
adrianbrink/tendereum,vendor/github.com/cosmos/tendereum/vendor/github.com/ethereum/go-ethereum/contracts/ens/contract/ens.sol,"ENS(address owner);owner(bytes32 node);resolver(bytes32 node);setOwner(bytes32 node, address owner);setSubnodeOwner(bytes32 node, bytes32 label, address owner);setResolver(bytes32 node, address resolver);FIFSRegistrar(address ensAddr, bytes32 node);register(bytes32 subnode, address owner);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);PublicResolver(address ensAddr);has(bytes32 node, bytes32 kind);addr(bytes32 node);content(bytes32 node);setAddr(bytes32 node, address addr);setContent(bytes32 node, bytes32 hash)"
winsvega/solidity,test/compilationTests/corion/module.sol,"transfer(address payable from, address payable to, uint256 value, bool fee);balanceOf(address payable owner);disableModule(bool forever);_disableModule(bool forever);replaceModuleHandler(address payable newModuleHandlerAddress);_replaceModuleHandler(address payable newModuleHandlerAddress);connectModule();_connectModule();disconnectModule();_disconnectModule();replaceModule(address payable newModuleAddress);_replaceModule(address payable newModuleAddress);transferEvent(address payable from, address payable to, uint256 value);newSchellingRoundEvent(uint256 roundID, uint256 reward);registerModuleHandler(address payable _moduleHandlerAddress);isModuleHandler(address payable addr);isActive()"
redsquirrel/augur-core,src/libraries/Delegator.sol,"Delegator(Controller _controller, bytes32 _controllerLookupName)"
hsavit1/gosofi_webpage,contracts/lendVault.sol,lendVault();fundVault();borrowFunds(uint256 _fundsRequestedInWei);makePayment(uint256 _paymentInWei);getProperties()
